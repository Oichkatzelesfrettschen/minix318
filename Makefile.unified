# MINIX4 Unified Kernel Makefile
# Modern build system for the consolidated MINIX4 kernel
# Version: 4.0.0
# Date: 2025-06-12

# Build configuration
BUILD_DIR := build
KERNEL_DIR := minix/kernel
ARCH_DIR := $(KERNEL_DIR)/arch
INCLUDE_DIR := $(KERNEL_DIR)

# Compiler configuration
CC := gcc
AS := gas
LD := ld
AR := ar

# Compiler flags
CFLAGS := -std=c23 -Wall -Wextra -Werror -O2 -g
CFLAGS += -ffreestanding -nostdlib -nostdinc
CFLAGS += -mcmodel=kernel -mno-red-zone -mno-mmx -mno-sse -mno-sse2
CFLAGS += -fno-builtin -fno-stack-protector
CFLAGS += -I$(INCLUDE_DIR) -I$(KERNEL_DIR) -I.

# Architecture detection and flags
ARCH ?= $(shell uname -m)
ifeq ($(ARCH),x86_64)
    CFLAGS += -m64 -DARCH_X86_64
    ARCH_SUBDIR := x86_64
else ifeq ($(ARCH),i386)
    CFLAGS += -m32 -DARCH_I386
    ARCH_SUBDIR := i386
else ifeq ($(ARCH),arm)
    CFLAGS += -DARCH_ARM
    ARCH_SUBDIR := arm
else ifeq ($(ARCH),aarch64)
    CFLAGS += -DARCH_AARCH64
    ARCH_SUBDIR := aarch64
else
    $(error Unsupported architecture: $(ARCH))
endif

# Debug build support
ifdef DEBUG
    CFLAGS += -DDEBUG -O0 -ggdb3
endif

# Source files
KERNEL_SOURCES := $(wildcard $(KERNEL_DIR)/*.c)
ARCH_SOURCES := $(wildcard $(ARCH_DIR)/$(ARCH_SUBDIR)/*.c)
ARCH_ASM_SOURCES := $(wildcard $(ARCH_DIR)/$(ARCH_SUBDIR)/*.S)

# Object files
KERNEL_OBJECTS := $(KERNEL_SOURCES:%.c=$(BUILD_DIR)/%.o)
ARCH_OBJECTS := $(ARCH_SOURCES:%.c=$(BUILD_DIR)/%.o)
ARCH_ASM_OBJECTS := $(ARCH_ASM_SOURCES:%.S=$(BUILD_DIR)/%.o)

ALL_OBJECTS := $(KERNEL_OBJECTS) $(ARCH_OBJECTS) $(ARCH_ASM_OBJECTS)

# Target kernel image
KERNEL_IMAGE := $(BUILD_DIR)/minix4-kernel

# Phony targets
.PHONY: all clean install test check format help

# Default target
all: $(KERNEL_IMAGE)

# Help target
help:
	@echo "MINIX4 Unified Kernel Build System"
	@echo ""
	@echo "Targets:"
	@echo "  all      - Build the kernel (default)"
	@echo "  clean    - Clean build artifacts"
	@echo "  install  - Install kernel image"
	@echo "  test     - Run kernel tests"
	@echo "  check    - Run static analysis"
	@echo "  format   - Format source code"
	@echo "  help     - Show this help"
	@echo ""
	@echo "Variables:"
	@echo "  ARCH     - Target architecture (x86_64, i386, arm, aarch64)"
	@echo "  DEBUG    - Enable debug build (DEBUG=1)"
	@echo "  CC       - C compiler (default: gcc)"
	@echo ""

# Create build directories
$(BUILD_DIR):
	@mkdir -p $(BUILD_DIR)
	@mkdir -p $(BUILD_DIR)/$(KERNEL_DIR)
	@mkdir -p $(BUILD_DIR)/$(ARCH_DIR)/$(ARCH_SUBDIR)

# Kernel image linking
$(KERNEL_IMAGE): $(ALL_OBJECTS) | $(BUILD_DIR)
	@echo "Linking kernel image..."
	$(LD) -T kernel.ld -o $@ $(ALL_OBJECTS)
	@echo "Kernel image created: $@"

# C source compilation
$(BUILD_DIR)/%.o: %.c | $(BUILD_DIR)
	@echo "Compiling $<..."
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

# Assembly source compilation
$(BUILD_DIR)/%.o: %.S | $(BUILD_DIR)
	@echo "Assembling $<..."
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

# Clean build artifacts
clean:
	@echo "Cleaning build artifacts..."
	rm -rf $(BUILD_DIR)

# Install kernel (placeholder)
install: $(KERNEL_IMAGE)
	@echo "Installing kernel..."
	@echo "Note: Install target not yet implemented"

# Run tests (placeholder)
test: $(KERNEL_IMAGE)
	@echo "Running kernel tests..."
	@echo "Note: Test framework not yet implemented"

# Static analysis
check:
	@echo "Running static analysis..."
	@echo "Checking C23 compliance..."
	$(CC) $(CFLAGS) -fsyntax-only $(KERNEL_SOURCES) $(ARCH_SOURCES)
	@echo "Static analysis complete"

# Format source code
format:
	@echo "Formatting source code..."
	find $(KERNEL_DIR) -name "*.c" -o -name "*.h" | xargs clang-format -i -style="{BasedOnStyle: LLVM, IndentWidth: 4, ColumnLimit: 100}"
	@echo "Code formatting complete"

# Show build configuration
config:
	@echo "Build Configuration:"
	@echo "  Architecture: $(ARCH)"
	@echo "  Compiler: $(CC)"
	@echo "  Flags: $(CFLAGS)"
	@echo "  Kernel sources: $(words $(KERNEL_SOURCES)) files"
	@echo "  Arch sources: $(words $(ARCH_SOURCES)) files"
	@echo "  ASM sources: $(words $(ARCH_ASM_SOURCES)) files"

# Dependency tracking
-include $(ALL_OBJECTS:.o=.d)

$(BUILD_DIR)/%.d: %.c | $(BUILD_DIR)
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -MM -MT $(@:.d=.o) $< > $@

# File statistics
stats:
	@echo "MINIX4 Kernel Statistics:"
	@echo "  Total C files: $(words $(KERNEL_SOURCES) $(ARCH_SOURCES))"
	@echo "  Total lines of code:"
	@wc -l $(KERNEL_SOURCES) $(ARCH_SOURCES) | tail -1
	@echo "  Header files:"
	@find $(KERNEL_DIR) -name "*.h" | wc -l

# Create source distribution
dist: clean
	@echo "Creating source distribution..."
	tar czf minix4-kernel-$(shell date +%Y%m%d).tar.gz \
		$(KERNEL_DIR) \
		Makefile \
		README.md \
		LICENSE
	@echo "Distribution created"

# Development targets
dev-setup:
	@echo "Setting up development environment..."
	@echo "Installing required tools..."
	# Add development tool installation here

# Kernel debugging support
debug: CFLAGS += -DDEBUG -O0 -ggdb3
debug: $(KERNEL_IMAGE)
	@echo "Debug kernel image created"

# Release build
release: CFLAGS += -O3 -DNDEBUG
release: clean $(KERNEL_IMAGE)
	@echo "Release kernel image created"

# Cross-compilation support
cross-%:
	@$(MAKE) ARCH=$* CC=$*-gcc AS=$*-gas LD=$*-ld

# Documentation generation
docs:
	@echo "Generating documentation..."
	doxygen Doxyfile
	@echo "Documentation generated in docs/"

# Validation targets
validate-headers:
	@echo "Validating header dependencies..."
	@for header in $(shell find $(KERNEL_DIR) -name "*.h"); do \
		echo "Checking $$header..."; \
		$(CC) $(CFLAGS) -fsyntax-only -include $$header -x c /dev/null; \
	done

validate-build: clean all
	@echo "Build validation complete"

# Show consolidated files
show-consolidated:
	@echo "Consolidated kernel files:"
	@echo "  main_unified.c - Unified kernel entry point"
	@echo "  proc_unified.c - Unified process management"
	@echo "  proc_unified.h - Process management headers"
	@echo "  proc_stubs.c - Supporting implementations"
	@echo "  kernel.h - Central kernel header"
	@echo ""
	@echo "Architecture support:"
	@echo "  x86_64: $(ARCH_DIR)/x86_64/"
	@echo "  i386: $(ARCH_DIR)/i386/"
	@echo "  ARM: $(ARCH_DIR)/arm/ (placeholder)"
	@echo "  AArch64: $(ARCH_DIR)/aarch64/ (placeholder)"
