This option shall make available all interfaces required by the C-language output of lex that are not made available through the -l c option.
-l pthread
This option shall make available all interfaces referenced in
and , and also pthread_kill() and pthread_sigmask() referenced in . An implementation may search this library in the absence of this
option.
-l m
This option shall make available all interfaces referenced in ,
, and .
An implementation may search this library in the absence of this option.
-l rt
This option shall make available all interfaces referenced in ,
, ,
, and , interfaces marked as optional in , interfaces marked as ADV (Advisory Information) in , and interfaces beginning with the prefix clock_ and timer_ in . An implementation may search this library in the absence of this option.
-l xnet
This option shall make available all interfaces referenced in , ,
, , and . An implementation may search this library in the absence of this
option.
-l y
This option shall make available all interfaces required by the C-language output of yacc that are not made available through the -l c option.
In the absence of options that inhibit invocation of the link editor, such as -c or -E, the c17 utility
shall cause the equivalent of a -l c option to be passed to the link editor after the last pathname operand or
-l option, causing it to be searched after all other object files and libraries are loaded.
The libraries c, l, m, pthread, rt, xnet, and y shall be found as shared
libraries when specified as the option-argument to the -l option and may also be found as static libraries but, except for
the shared library version of the c library, need not exist as regular files. The implementation may accept as -l
option-arguments names of additional implementation-defined libraries that do not exist as regular files.
External Symbols
The C compiler and link editor shall support the significance of external symbols up to a length of at least 31 bytes; the
action taken upon encountering symbols exceeding the implementation-defined maximum symbol length is unspecified.
The compiler and link editor shall support a minimum of 4095 external identifiers in one translation unit. A diagnostic message
shall be written to the standard output if the implementation-defined limit is exceeded; other actions are unspecified.
Header Search
If a file with the same name as one of the standard headers defined in XBD 14.
Headers, not provided as part of the implementation, is placed in any of the usual places that are searched by default for
headers, the results are unspecified.
Programming Environments
All implementations shall support one of the following programming environments as a default. Implementations may support more
than one of the following programming environments. Applications can use the _POSIX_Vn_ILP* and _POSIX_Vn_LP*
constants in , and corresponding sysconf() and getconf calls, to determine
which programming environments are supported.
Table: Programming Environments: Type Sizes
Programming Environment getconf Name
Bits in int
Bits in long
Bits in all pointer types
Bits in off_t
_POSIX_V8_ILP32_OFF32
32
32
32
32
_POSIX_V8_ILP32_OFFBIG
32
32
32
>=64
_POSIX_V8_LP64_OFF64
32
64
64
64
_POSIX_V8_LPBIG_OFFBIG
>=32
>=64
>=64
>=64
All implementations shall support one or more environments where the widths of the following types are no greater
than the width of type long:
blksize_t
cc_t
mode_t
nfds_t
pid_t
ptrdiff_t
size_t
speed_t
ssize_t
suseconds_t
tcflag_t
wchar_t
wint_t
The executable files created when these environments are selected shall be in a proper format for execution by the
exec family of functions. Each environment may be one of the ones in Programming Environments: Type
Sizes, or it may be another environment. The names for the environments that meet this requirement shall be output by a
getconf command using the POSIX_V8_WIDTH_RESTRICTED_ENVS argument, as a
-separated list of names suitable for use with the getconf -v
option. If more than one environment meets the requirement, the names of all such environments shall be output on separate lines.
Any of these names can then be used in a subsequent getconf command to obtain the
flags specific to that environment with the following suffixes added as appropriate:
_CFLAGS
To get the C compiler flags.
_LDFLAGS
To get the linker/loader flags.
_LIBS
To get the libraries.
This requirement may be removed in a future version.
When this utility processes a file containing a function called main(), it shall be defined with a return
type equivalent to int. Using return from the initial call to main() shall be equivalent (other than with respect to
language scope issues) to calling exit() with the returned value. Reaching the end of
the initial call to main() shall be equivalent to calling exit(0). The implementation shall not declare a prototype
for this function.
Implementations provide configuration strings for C compiler flags, linker/loader flags, and libraries for each
supported environment. When an application needs to use a specific programming environment rather than the implementation default
programming environment while compiling, the application shall first verify that the implementation supports the desired
environment. If the desired programming environment is supported, the application shall then invoke c17 with the appropriate
C compiler flags as the first options for the compile, the appropriate linker/loader flags after any other options except -l
but before any operands or -l options, and the appropriate libraries at the end of the operands and -l options.
Conforming applications shall not attempt to link together object files compiled for different programming models.
Applications shall also be aware that binary data placed in shared memory or in files might not be recognized by applications built
for other programming models.
Table: Programming Environments: c17 Arguments
Programming Environment getconf Name
Use
c17 Arguments getconf Name
_POSIX_V8_ILP32_OFF32
C Compiler Flags
POSIX_V8_ILP32_OFF32_CFLAGS
Linker/Loader Flags
POSIX_V8_ILP32_OFF32_LDFLAGS
Libraries
POSIX_V8_ILP32_OFF32_LIBS
_POSIX_V8_ILP32_OFFBIG
C Compiler Flags
POSIX_V8_ILP32_OFFBIG_CFLAGS
Linker/Loader Flags
POSIX_V8_ILP32_OFFBIG_LDFLAGS
Libraries
POSIX_V8_ILP32_OFFBIG_LIBS
_POSIX_V8_LP64_OFF64
C Compiler Flags
POSIX_V8_LP64_OFF64_CFLAGS
Linker/Loader Flags
POSIX_V8_LP64_OFF64_LDFLAGS
Libraries
POSIX_V8_LP64_OFF64_LIBS
_POSIX_V8_LPBIG_OFFBIG
C Compiler Flags
POSIX_V8_LPBIG_OFFBIG_CFLAGS
Linker/Loader Flags
POSIX_V8_LPBIG_OFFBIG_LDFLAGS
Libraries
POSIX_V8_LPBIG_OFFBIG_LIBS
In addition to the type size programming environments above, all implementations also support a multi-threaded
programming environment that is orthogonal to all of the programming environments listed above. The getconf utility can be used to get flags for the threaded programming environment, as
indicated in Programming Environments: Type Sizes.
Table: Threaded Programming Environment: c17 Arguments
Programming Environment getconf Name
Use
c17 Arguments getconf Name
_POSIX_THREADS
C Compiler Flags
POSIX_V8_THREADS_CFLAGS
Linker/Loader Flags
POSIX_V8_THREADS_LDFLAGS
These programming environment flags may be used in conjunction with any of the type size programming environments
supported by the implementation.
EXIT STATUS
The following exit values shall be returned:
0
Successful compilation or link edit.
>0
An error occurred.
CONSEQUENCES OF ERRORS
When c17 encounters a compilation error that causes an object file not to be created, it shall write a diagnostic to
standard error and continue to compile other source code operands, but it shall not perform the link phase and it shall return a
non-zero exit status. If the link edit is unsuccessful, a diagnostic message shall be written to standard error and c17
exits with a non-zero status. A conforming application shall rely on the exit status of c17, rather than on the existence or
mode of the executable file.
The following sections are informative.
APPLICATION USAGE
Since the c17 utility usually creates files in the current directory during the compilation process, it is typically
necessary to run the c17 utility in a directory in which a file can be created.
On systems providing POSIX Conformance (see XBD 2.
Conformance), c17 is required only with the C-Language Development option; XSI-conformant systems always provide
c17.
Since this standard requires that conforming applications define either _POSIX_C_SOURCE or _XOPEN_SOURCE before
inclusion of any header (see XSH 2.2.1 POSIX.1 Symbols), if
c17 is used to compile source code that includes a header without defining one of these feature test macros in the required
manner, the behavior of c17 itself and the results of using any files it generates are undefined. When c17 is used
this way, implementations are encouraged to make visible in headers from the ISO C standard only the symbols that are allowed
by that standard, and otherwise to behave the same as if _POSIX_C_SOURCE or _XOPEN_SOURCE had been defined, but portable
applications cannot rely on this.
Some historical implementations have created .o files when -c is not specified and more than one
source file is given. Since this area is left unspecified, the application cannot rely on .o files being created, but it
also must be prepared for any related .o files that already exist being deleted at the completion of the link edit.
There is the possible implication that if a user supplies versions of the standard functions (before they would be
encountered by an implicit -l c or explicit -l m), that those versions would be used in place of the
standard versions. There are various reasons this might not be true (functions defined as macros, manipulations for clean name
space, and so on), so the existence of files named in the same manner as the standard libraries within the -L directories is
explicitly stated to produce unspecified behavior.
All of the functions specified in the System Interfaces volume of POSIX.1-2024 may be made visible by
implementations when the Standard C Library is searched. Conforming applications must explicitly request searching the other
standard libraries when functions made visible by those libraries are used.
In the ISO C standard the mapping from physical source characters to the C source character set is
implementation-defined. Implementations may strip white-space characters before the terminating  of a (physical)
line as part of this mapping and, as a consequence of this, one or more white-space characters (and no other characters) between a
character and the  character that terminates the line produces implementation-defined results.
Portable applications should not use such constructs.
Some c17 compilers not conforming to POSIX.1-2024 do not support trigraphs by default.
Implementations may support multiple programming environments with some of them conforming to this standard and
some not conforming. The _POSIX_Vn_ILP* and _POSIX_Vn_LP* constants in , and corresponding sysconf()
and getconf calls, only indicate whether each programming environment is supported;
they do not indicate anything about conformance of the environments that are supported. For example, an implementation may support
the ILP32_OFF32 environment for legacy reasons with a 32-bit time_t, whereas in a conforming environment time_t is
required to have a width of at least 64 bits. Application writers should consult an implementation's POSIX Conformance Document for
information about the conformance of each supported programming environment.
EXAMPLES
The following usage example compiles foo.c and creates the executable file foo:
c17 -o foo foo.c
The following usage example compiles foo.c and creates the object file foo.o:
c17 -c foo.c
The following usage example compiles foo.c and creates the executable file a.out:
c17 foo.c
The following usage example compiles foo.c, links it with bar.o, and creates the executable file
a.out. It may also create and leave foo.o:
c17 foo.c bar.o
The following usage example preprocesses foo.c and bar.c to create foo.i and bar.i,
compiles foo.i and bar.i to create foo.o and bar.o, then links foo.o and bar.o to create
the executable file foobar. Each c17 execution would ideally be invoked from a separate rule in a makefile (see
make) with suitable dependencies so that each is only executed when it needs to
be:
c17 -E foo.c > foo.i
c17 -E bar.c > bar.i
c17 -c foo.i
c17 -c bar.i
c17 -o foobar foo.o bar.o
The following example shows how an application using threads interfaces can test for support of and use a
programming environment supporting 32-bit int, long, and all pointer types, and an off_t type using at least
64 bits:
offbig_env=$(getconf _POSIX_V8_ILP32_OFFBIG)
if [ $offbig_env != "-1" ] && [ $offbig_env != "undefined" ]
then
c17 $(getconf POSIX_V8_ILP32_OFFBIG_CFLAGS) \
$(getconf POSIX_V8_THREADS_CFLAGS) -D_XOPEN_SOURCE=800 \
$(getconf POSIX_V8_ILP32_OFFBIG_LDFLAGS) \
$(getconf POSIX_V8_THREADS_LDFLAGS) foo.c -o foo \
$(getconf POSIX_V8_ILP32_OFFBIG_LIBS) \
-l pthread
else
echo ILP32_OFFBIG programming environment not supported
exit 1
fi
The following examples clarify the use and interactions of -L and -l options.
Consider the case in which module a.c calls function f() in library libQ.a, and module
b.c calls function g() in library libp.a. Assume that both libraries reside in /a/b/c. The command line
to compile and link in the desired way is:
c17 -L /a/b/c main.o a.c -l Q b.c -l p
In this case the -L option need only precede the first -l option, since both libQ.a and
libp.a reside in the same directory.
Multiple -L options can be used when library name collisions occur. Building on the previous example,
suppose that the user wants to use a new libp.a, in /a/a/a, but still wants f() from /a/b/c/libQ.a:
c17 -L /a/a/a -L /a/b/c main.o a.c -l Q b.c -l p
In this example, the linker searches the -L options in the order specified, and finds /a/a/a/libp.a
before /a/b/c/libp.a when resolving references for b.c. The order of the -l options is still important,
however.
The following example shows how an application can use a programming environment where the widths of the following
types: blksize_t, cc_t, mode_t, nfds_t, pid_t, ptrdiff_t, size_t, speed_t,
ssize_t, suseconds_t, tcflag_t, wchar_t, wint_t
are no greater than the width of type long:
# First choose one of the listed environments ...
# ... if there are no additional constraints, the first one will do:
CENV=$(getconf POSIX_V8_WIDTH_RESTRICTED_ENVS | head -n l)
# ... or, if an environment that supports large files is preferred,
# look for names that contain "OFF64" or "OFFBIG". (This chooses
# the last one in the list if none match.)
for CENV in $(getconf POSIX_V8_WIDTH_RESTRICTED_ENVS)
do
case $CENV in
*OFF64*|*OFFBIG*) break ;;
esac
done
# The chosen environment name can now be used like this:
c17 $(getconf ${CENV}_CFLAGS) -D _POSIX_C_SOURCE=202405L \
$(getconf ${CENV}_LDFLAGS) foo.c -o foo \
$(getconf ${CENV}_LIBS)
The following example shows how to create a shared library that does not depend on any other shared library:
c17 -G -c foo.c bar.c
c17 -G -o foobar.so foo.o bar.o
The following example shows how to create a dynamic executable that loads application specific shared libraries by
searching a specified list of directories when it is executed:
c17 -G -c foo.c
c17 -G -o /path/to/dir1/foo.so foo.o
c17 -G -c bar.c
c17 -G -o /path/to/dir2/bar.so bar.o
c17 -B dynamic -L /path/to/dir1 -L /path/to/dir2 -R /path/to/dir1 \
-R /path/to/dir2 -o foobar foobar.c -l foo -l bar
RATIONALE
The c17 utility is based on the c89 utility originally introduced in the ISO POSIX-2:1993 standard.
Some of the changes from c89 include the ability to intersperse options and operands (which many c89
implementations allowed despite it not being specified), the description of -l as an option instead of an operand, and the
modification to the contents of the Standard Libraries section to account for new headers and options; for example,  added to the description of -l rt.
POSIX.1-2024 specifies that the c17 utility must be able to use regular files for *.o files and for
a.out files. Implementations are free to overwrite existing files of other types when attempting to create object files and
executable files, but are not required to do so. If something other than a regular file is specified and using it fails for any
reason, c17 is required to issue a diagnostic message and exit with a non-zero exit status. But for some file types, the
problem may not be noticed for a long time. For example, if a FIFO named a.out exists in the current directory, c17
may attempt to open a.out and will hang in the open() call until another process
opens the FIFO for reading. Then c17 may write most of the a.out to the FIFO and fail when it tries to seek back
close to the start of the file to insert a timestamp (FIFOs are not seekable files). The c17 utility is also allowed to
issue a diagnostic immediately if it encounters an a.out or *.o file that is not a regular file. For portable use,
applications should ensure that any a.out, -o option-argument, or *.o files corresponding to any *.c
files do not conflict with names already in use that are not regular files or symbolic links that point to regular files.
Commands of the form c17 -c -o ... are frequently used to directly place the .o file into an
alternative directory without a need to separately rename the output file. This helps to support concurrent compilations and out of
tree builds.
Some implementations allow -c -o directory to produce
directory/file.o even when there is more than one input file; however, portable applications using
-c with -o must compile only one file at a time and must specify the final destination filename rather than a
directory.
The shared library version of the c library is required to exist as a regular file because the dynamic
linker needs to be able to load at least one library at execution time. Other standard shared libraries need not exist in their own
right if the interfaces the standard requires them to provide exist in the c library; all that is required is that they are
"found" when specified as -l option-arguments. Static versions of the standard libraries need not exist as regular files,
even if they are found as static libraries when specified as -l option-arguments.
On many systems, multi-threaded applications run in a programming environment that is distinct from that used by
single-threaded applications. This multi-threaded programming environment (in addition to needing to specify -l pthread at
link time) may require additional flags to be set when headers are processed at compile time (-D_REENTRANT being common).
This programming environment is orthogonal to the type size programming environments discussed above and listed in Programming Environments: Type Sizes. This version of the standard adds getconf utility calls to provide the C compiler flags and linker/loader flags needed to
support multi-threaded applications. Note that on a system where single-threaded applications are a special case of a
multi-threaded application, both of these getconf calls may return NULL strings; on
other implementations both of these strings may be non-NULL strings.
The C standardization committee invented trigraphs (e.g., "??!" to represent '|') to address
character portability problems in development environments based on national variants of the 7-bit ISO/IEC 646:1991 standard
character set. However, these environments were already obsolete by the time the first ISO C standard was published, and in
practice trigraphs have not been used for their intended purpose, and usually are intended to have their original meaning in
K&R C. For example, in practice a C-language source string like "What??!" is usually intended to end in two
characters and an , not in '|'.
When the -E option is used, execution of some #pragma preprocessor directives may simply result in a
copy of the directive being included in the output as part of the allowed extra information used by subsequent compilation passes
(see STDOUT).
This standard requires that, when -E is used, lines beginning with '#' are output identifying the
files processed as a result of #include directives in order that c17 -E can be used to generate makefile
dependencies. See make. Usually such lines are output each time the origin of the
subsequent lines in the output changes, and the line number after the '#' is the line number in the named file of the line
from which the next line in the output was derived.
When the -R option is not included when an executable file or shared library is being created, some
implementations use the environment variables LD_RUN_PATH and LD_LIBRARY_PATH to determine the directories to be
searched for shared libraries.
Some implementations permit place-holders preceded by a  character ('$'), such as
$ORIGIN, in the -R directory option-argument to be evaluated at load time. Some implementations accept a colon separated
list of directories for the path to search for shared libraries, with the same effect as specifying the -R option multiple
times. However, these features are not universal.
The name of a shared library usually contains an element named so. Other implementation-defined elements are
allowed for backwards compatibility with historical systems, and so that tools can be developed on conforming systems to create
libraries for multiple environments. For example, Microsoft systems use the filename extension .dll (and do not allow
following text) to denote a shared library. The standard allows additional characters to be used in the name of a library following
an so element to permit shared library versioning information to be at the end of the library filename rather than requiring
that any such strings appear before the final element of the library name.
The decision to standardize on so as a required element in a shared library name was intentional, as the
alternative would have been standardizing things such as a new make macro $(SHLIB_EXT) that would otherwise be needed to write a
portable makefile that can compile shared libraries despite not having a standardized element name.
If a combination of direct and indirect dependencies of a shared library would require different versions of
another shared library, options that are not specified by the standard (such as -B direct) will probably need to be used
when linking that shared library, so that at runtime the intended versions are found.
FUTURE DIRECTIONS
If this utility is directed to display a pathname that contains any bytes that have the encoded value of a
character when  is a terminator or separator in the output format being used, implementations are encouraged to
treat this as an error. A future version of this standard may require implementations to treat this as an error.
If this utility is directed to create a new directory entry that contains any bytes that have the encoded value of
a  character, implementations are encouraged to treat this as an error. A future version of this standard may
require implementations to treat this as an error.
Unlike all of the other non-OB-shaded utilities in this standard, a utility by this name probably will not appear
in the next version of this standard. This utility's name is tied to the current revision of the ISO C standard at the time
this standard is approved. Since the ISO C standard and this standard are maintained by different organizations on different
schedules, we cannot predict what the compiler will be named in the next version of the standard.
SEE ALSO
1.1.1.4 File Read, Write, and Creation, ar, getconf, make, nm, strip, umask
XBD 8. Environment Variables, 12.2 Utility Syntax Guidelines, 14. Headers
XSH exec, sysconf()
CHANGE HISTORY
First released in Issue 8. Included for alignment with the ISO/IEC 9899:2018 standard.
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/wc.html =====
wc
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
wc — word, line, and byte or character count
SYNOPSIS
wc [-c|-m] [-lw] [file...]
DESCRIPTION
The wc utility shall read one or more input files and, by default, write the number of  characters, words,
and bytes contained in each input file to the standard output.
The utility also shall write a total count for all named files, if more than one input file is specified.
The wc utility shall consider a word to be a non-zero-length string of characters delimited by white space.
OPTIONS
The wc utility shall conform to XBD 12.2 Utility Syntax
Guidelines.
The following options shall be supported:
-c
Write to the standard output the number of bytes in each input file.
-l
Write to the standard output the number of  characters in each input file.
-m
Write to the standard output the number of characters in each input file.
-w
Write to the standard output the number of words in each input file.
When any option is specified, wc shall report only the information requested by the specified options.
OPERANDS
The following operand shall be supported:
file
A pathname of an input file. If no file operands are specified, the standard input shall be used.
STDIN
The standard input shall be used if no file operands are specified, and shall be used if a file operand is
'-' and the implementation treats the '-' as meaning standard input. Otherwise, the standard input shall not be
used. See the INPUT FILES section.
INPUT FILES
The input files may be of any type.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of wc:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments and input files) and which characters are defined as white-space characters.
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error and
informative messages written to standard output.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
Default.
STDOUT
By default, the standard output shall contain an entry for each input file of the form:
"%d %d %d %s\n", , , ,
If the -m option is specified, the number of characters shall replace the  field in this format.
If any options are specified and the -l option is not specified, the number of  characters shall not be
written.
If any options are specified and the -w option is not specified, the number of words shall not be written.
If any options are specified and neither -c nor -m is specified, the number of bytes or characters shall not be
written.
If no input file operands are specified, no name shall be written and no  characters preceding the pathname
shall be written.
If more than one input file operand is specified, an additional line shall be written, of the same format as the other
lines, except that the word total (in the POSIX locale) shall be written instead of a pathname and the total of each column
shall be written as appropriate. Such an additional line, if any, is written at the end of the output.
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
The -m option is not a switch, but an option at the same level as -c. Thus, to produce the full default output
with character counts instead of bytes, the command required is:
wc -mlw
EXAMPLES
None.
RATIONALE
The output file format pseudo-printf() string differs from the System V version of
wc:
"%7d%7d%7d %s\n"
which produces possibly ambiguous and unparsable results for very large files, as it assumes no number shall exceed six
digits.
Some historical implementations use only , , and  as word separators. The equivalent of
the ISO C standard isspace() function is more appropriate.
The -c option stands for "character" count, even though it counts bytes. This stems from the sometimes erroneous
historical view that bytes and characters are the same size. Due to international requirements, the -m option (reminiscent
of "multi-byte") was added to obtain actual character counts.
Early proposals only specified the results when input files were text files. The current specification more closely matches
historical practice. (Bytes, words, and  characters are counted separately and the results are written when an
end-of-file is detected.)
Historical implementations of the wc utility only accepted one argument to specify the options -c, -l, and
-w. Some of them also had multiple occurrences of an option cause the corresponding count to be written multiple times and
had the order of specification of the options affect the order of the fields on output, but did not document either of these.
Because common usage either specifies no options or only one option, and because none of this was documented, the changes required
by this volume of POSIX.1-2024 should not break many historical applications (and do not break any historical conforming
applications).
FUTURE DIRECTIONS
If this utility is directed to display a pathname that contains any bytes that have the encoded value of a
character when  is a terminator or separator in the output format being used, implementations are encouraged to
treat this as an error. A future version of this standard may require implementations to treat this as an error.
SEE ALSO
cksum
XBD 8. Environment Variables, 12.2 Utility Syntax Guidelines
CHANGE HISTORY
First released in Issue 2.
Issue 7
Austin Group Interpretation 1003.1-2001 #092 is applied.
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
Issue 8
Austin Group Defect 251 is applied, encouraging implementations to report an error if a utility is directed to display a
pathname that contains any bytes that have the encoded value of a  character when  is a terminator or
separator in the output format being used.
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/cxref.html =====
cxref
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
cxref — generate a C-language program cross-reference table (DEVELOPMENT)
SYNOPSIS
[XSI]  cxref [-cs] [-o file] [-w num]
[-D name[=def]]... [-I dir]...
[-U name]... file...
DESCRIPTION
The cxref utility shall analyze a collection of C-language files and attempt to build a cross-reference table.
Information from #define lines shall be included in the symbol table. A sorted listing shall be written to standard output
of all symbols (auto, static, and global) in each file separately, or with the -c option, in combination. Each symbol
shall contain an  before the declaring reference.
OPTIONS
The cxref utility shall conform to XBD 12.2 Utility Syntax
Guidelines, except that the order of the -D, -I, and -U options (which are identical to their
interpretation by c17) is significant. The following options shall be supported:
-c
Write a combined cross-reference of all input files.
-s
Operate silently; do not print input filenames.
-o file
Direct output to named file.
-w num
Format output no wider than num (decimal) columns. This option defaults to 80 if num is not specified or is less
than 51.
-D
Equivalent to c17.
-I
Equivalent to c17.
-U
Equivalent to c17.
OPERANDS
The following operand shall be supported:
file
A pathname of a C-language source file.
STDIN
Not used.
INPUT FILES
The input files are C-language source files.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of cxref:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_COLLATE
Determine the locale for the ordering of the output.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments and input files).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
NLSPATH
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
Default.
STDOUT
The standard output shall be used for the cross-reference listing, unless the -o option is used to select a different
output file.
The format of standard output is unspecified, except that the following information shall be included:
If the -c option is not specified, each portion of the listing shall start with the name of the input file on a separate
line.
The name line shall be followed by a sorted list of symbols, each with its associated location pathname, the name of the
function in which it appears (if it is not a function name itself), and line number references.
Each line number may be preceded by an  ('*') flag, meaning that this is the declaring reference. Other
single-character flags, with implementation-defined meanings, may be included.
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
The output file named by the -o option shall be used instead of standard output.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
None.
EXAMPLES
None.
RATIONALE
None.
FUTURE DIRECTIONS
If this utility is directed to display a pathname that contains any bytes that have the encoded value of a
character when  is a terminator or separator in the output format being used, implementations are encouraged to
treat this as an error. A future version of this standard may require implementations to treat this as an error.
SEE ALSO
c17
XBD 8. Environment Variables, 12.2 Utility Syntax Guidelines
CHANGE HISTORY
First released in Issue 2.
Issue 5
In the SYNOPSIS, [-U dir] is changed to [-U name].
Issue 6
The APPLICATION USAGE section is added.
Issue 7
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
Issue 8
Austin Group Defect 251 is applied, encouraging implementations to report an error if a utility is directed to display a
pathname that contains any bytes that have the encoded value of a  character when  is a terminator or
separator in the output format being used.
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/admin.html =====
admin
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
admin — create and administer SCCS files (DEVELOPMENT)
SYNOPSIS
[XSI]  admin -i[name] [-n] [-a login]
[-d flag] [-e login] [-f flag]
[-m mrlist] [-r rel]
[-t[name] [-y[comment]] newfile
admin -n [-a login] [-d flag] [-e login]
[-f flag] [-m mrlist]
[-t[name]] [-y[comment]] newfile...
admin [-a login] [-d flag] [-m mrlist]
[-r rel] [-t[name]] file...
admin -h file...
admin -z file...
DESCRIPTION
The admin utility shall create new SCCS files or change parameters of existing ones. If a named file does not exist, it
shall be created, and its parameters shall be initialized according to the specified options. Parameters not initialized by an
option shall be assigned a default value. If a named file does exist, parameters corresponding to specified options shall be
changed, and other parameters shall be left as is.
All SCCS filenames supplied by the application shall be of the form s.filename. New SCCS files shall be given read-only
permission mode. Write permission in the parent directory is required to create a file. All writing done by admin shall be
to a temporary x-file, named x.filename (see get) created with read-only
mode if admin is creating a new SCCS file, or created with the same mode as that of the SCCS file if the file already
exists. After successful execution of admin, the SCCS file shall be removed (if it exists), and the x-file shall be
renamed with the name of the SCCS file. This ensures that changes are made to the SCCS file only if no errors occur.
The admin utility shall also use a transient lock file (named z.filename), which is used to prevent simultaneous
updates to the SCCS file; see get.
OPTIONS
The admin utility shall conform to XBD 12.2 Utility Syntax
Guidelines, except that the -i, -t, and -y options have optional option-arguments. These optional
option-arguments shall not be presented as separate arguments. The following options are supported:
-n
Create a new SCCS file. When -n is used without -i, the SCCS file shall be created with control information but
without any file data.
-i[name]
Specify the name of a file from which the text for a new SCCS file shall be taken. The text constitutes the first delta
of the file (see the -r option for the delta numbering scheme). If the -i option is used, but the name
option-argument is omitted, the text shall be obtained by reading the standard input. If this option is omitted, the SCCS file
shall be created with control information but without any file data. The -i option implies the -n option.
-r SID
Specify the SID of the initial delta to be inserted. This SID shall be a trunk SID; that is, the branch and sequence numbers
shall be zero or missing. The level number is optional, and defaults to 1.
-t[name]
Specify the name of a file from which descriptive text for the SCCS file shall be taken. In the case of existing SCCS
files (neither -i nor -n is specified):
A -t option without a name option-argument shall cause the removal of descriptive text (if any) currently in the
SCCS file.
A -t option with a name option-argument shall cause the text (if any) in the named file to replace the descriptive
text (if any) currently in the SCCS file.
-f flag
Specify a flag, and, possibly, a value for the flag, to be placed in the SCCS file. Several -f options may
be supplied on a single admin command line. Implementations shall recognize the following flags and associated values:
b
Allow use of the -b option on a get command to create branch deltas.
cceil
Specify the highest release (that is, ceiling), a number less than or equal to 9999, which may be retrieved by a get command for editing. The default value for an unspecified c flag shall be 9999.
ffloor
Specify the lowest release (that is, floor), a number greater than 0 but less than 9999, which may be retrieved by a get command for editing. The default value for an unspecified f flag shall be 1.
dSID
Specify the default delta number (SID) to be used by a get command.
istr
Treat the "No ID keywords" message issued by get or delta as a fatal error. In the absence of this flag, the message is only a warning. The
message is issued if no SCCS identification keywords (see get) are found in the text
retrieved or stored in the SCCS file. If a value is supplied, the application shall ensure that the keywords exactly match the
given string; however, the string shall contain a keyword, and no embedded  characters.
j
Allow concurrent get commands for editing on the same SID of an SCCS file. This
allows multiple concurrent updates to the same version of the SCCS file.
llist
Specify a list of releases to which deltas can no longer be made (that is, get -e against one of these locked releases fails). Conforming applications shall use the
following syntax to specify a list. Implementations may accept additional forms as an extension:
::= a |
::=  | ,
::=
The character a in the list shall be equivalent to specifying all releases for the named SCCS file. The
non-terminal  in range shall be the delta number of an existing delta associated with the SCCS file.
n
Cause delta to create a null delta in each of those releases (if any) being
skipped when a delta is made in a new release (for example, in making delta 5.1 after delta 2.7, releases 3 and 4 are skipped).
These null deltas shall serve as anchor points so that branch deltas may later be created from them. The absence of this flag shall
cause skipped releases to be nonexistent in the SCCS file, preventing branch deltas from being created from them in the future.
During the initial creation of an SCCS file, the n flag may be ignored; that is, if the -r option is used to set the
release number of the initial SID to a value greater than 1, null deltas need not be created for the "skipped" releases.
qtext
Substitute user-definable text for all occurrences of the %Q% keyword in the SCCS file text retrieved by get.
mmod
Specify the module name of the SCCS file substituted for all occurrences of the %M% keyword in the SCCS file text
retrieved by get. If the m flag is not specified, the value assigned shall be the
name of the SCCS file with the leading '.' removed.
ttype
Specify the type of module in the SCCS file substituted for all occurrences of the %Y% keyword in the SCCS file
text retrieved by get.
vpgm
Cause delta to prompt for modification request (MR) numbers as the reason for
creating a delta. The optional value specifies the name of an MR number validation program. (If this flag is set when creating an
SCCS file, the application shall ensure that the m option is also used even if its value is null.)
-d flag
Remove (delete) the specified flag from an SCCS file. Several -d options may be supplied on a single admin
command. See the -f option for allowable flag names. (The llist flag gives a list of releases to
be unlocked. See the -f option for further description of the l flag and the syntax of a list.)
-a login
Specify a login name, or numerical group ID, to be added to the list of users who may make deltas (changes) to the SCCS
file. A group ID shall be equivalent to specifying all login names common to that group ID. Several -a options may be
used on a single admin command line. As many logins, or numerical group IDs, as desired may be on the list
simultaneously. If the list of users is empty, then anyone may add deltas. If login or group ID is preceded by a
'!', the users so specified shall be denied permission to make deltas.
-e login
Specify a login name, or numerical group ID, to be erased from the list of users allowed to make deltas (changes) to the
SCCS file. Specifying a group ID is equivalent to specifying all login names common to that group ID. Several -e
options may be used on a single admin command line.
-y[comment]
Insert the comment text into the SCCS file as a comment for the initial delta in a manner identical to that of delta. In the POSIX locale, omission of the -y option shall result in a default comment
line being inserted in the form:
"date and time created %s %s by %s", , ,
where  is expressed in the format of the date utility's
%y/%m/%d conversion specification,  in the format of the date utility's %T conversion specification format, and  is the
login name of the user creating the file.
-m mrlist
Insert the list of modification request (MR) numbers into the SCCS file as the reason for creating the initial delta in a
manner identical to delta. The application shall ensure that the v flag is set
and the MR numbers are validated if the v flag has a value (the name of an MR number validation program). A diagnostic
message shall be written if the v flag is not set or MR validation fails.
-h
Check the structure of the SCCS file and compare the newly computed checksum with the checksum that is stored in the SCCS file.
If the newly computed checksum does not match the checksum in the SCCS file, a diagnostic message shall be written.
-z
Recompute the SCCS file checksum and store it in the first line of the SCCS file (see the -h option above). Note that
use of this option on a truly corrupted file may prevent future detection of the corruption.
OPERANDS
The following operands shall be supported:
file
A pathname of an existing SCCS file or a directory. If file is a directory, the admin utility shall behave as
though each file in the directory were specified as a named file, except that non-SCCS files (last component of the pathname does
not begin with s.) and unreadable files shall be silently ignored.
newfile
A pathname of an SCCS file to be created.
If exactly one file or newfile operand appears, and it is '-', the standard input shall be read; each
line of the standard input shall be taken to be the name of an SCCS file to be processed. Non-SCCS files and unreadable files shall
be silently ignored.
STDIN
The standard input shall be a text file used only if -i is specified without an option-argument or if a file or
newfile operand is specified as '-'. If the first character of any standard input line is  in the POSIX
locale, the results are unspecified.
INPUT FILES
The existing SCCS files shall be text files of an unspecified format.
The application shall ensure that the file named by the -i option's name option-argument shall be a text file; if
the first character of any line in this file is  in the POSIX locale, the results are unspecified. If this file contains
more than 99999 lines, the number of lines recorded in the header for this file shall be 99999 for this delta.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of admin:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments and input files).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error and the
contents of the default -y comment.
NLSPATH
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
Default.
STDOUT
Not used.
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
Any SCCS files created shall be text files of an unspecified format. During processing of a file, a locking
z-file, as described in get, may be created and deleted.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
It is recommended that directories containing SCCS files be writable by the owner only, and that SCCS files themselves be
read-only. The mode of the directories should allow only the owner to modify SCCS files contained in the directories. The mode of
the SCCS files prevents any modification at all except by SCCS commands.
EXAMPLES
None.
RATIONALE
None.
FUTURE DIRECTIONS
If this utility is directed to display a pathname that contains any bytes that have the encoded value of a
character when  is a terminator or separator in the output format being used, implementations are encouraged to
treat this as an error. A future version of this standard may require implementations to treat this as an error.
If this utility is directed to create a new directory entry that contains any bytes that have the encoded value of a
character, implementations are encouraged to treat this as an error. A future version of this standard may require
implementations to treat this as an error.
SEE ALSO
delta, get, prs, what
XBD 8. Environment Variables, 12.2 Utility Syntax Guidelines
CHANGE HISTORY
First released in Issue 2.
Issue 6
The normative text is reworded to avoid use of the term "must" for application requirements, and to emphasize the term
"shall" for implementation requirements.
The grammar is updated.
The Open Group Base Resolution bwg2001-007 is applied, adding new text to the INPUT FILES section warning that the maximum lines
recorded in the file is 99999.
The Open Group Base Resolution bwg2001-009 is applied, amending the description of the -h option.
Issue 8
Austin Group Defect 251 is applied, encouraging implementations to behave as follows:
Report an error if a utility is directed to display a pathname that contains any bytes that have the encoded value of a
character when  is a terminator or separator in the output format being used.
Disallow the creation of filenames containing any bytes that have the encoded value of a  character.
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/nice.html =====
nice
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
nice — invoke a utility with an altered nice value
SYNOPSIS
nice [-n increment] utility [argument...]
DESCRIPTION
The nice utility shall invoke a utility, requesting that it be run with a different nice value (see XBD 3.225 Nice Value). With no options, the executed utility shall be run with a
nice value that is some implementation-defined quantity greater than or equal to the nice value of the current process. If the user
lacks appropriate privileges to affect the nice value in the requested manner, the nice utility shall not affect the nice
value; in this case, a warning message may be written to standard error, but this shall not prevent the invocation of
utility or affect the exit status.
OPTIONS
The nice utility shall conform to XBD 12.2 Utility Syntax
Guidelines.
The following option is supported:
-n increment
A positive or negative decimal integer which shall have the same effect on the execution of the utility as if the utility had
called the nice() function with the numeric value of the increment
option-argument.
OPERANDS
The following operands shall be supported:
utility
The name of a utility that is to be invoked. If the utility operand names any of the special built-in utilities in
2.15 Special Built-In Utilities, the results are undefined.
argument
Any string to be supplied as an argument when invoking the utility named by the utility operand.
STDIN
Not used.
INPUT FILES
None.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of nice:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
PATH
Determine the search path used to locate the utility to be invoked. See XBD 8.
Environment Variables.
ASYNCHRONOUS EVENTS
Default.
STDOUT
Not used.
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
If utility is invoked, the exit status of nice shall be the exit status of utility; otherwise, the
nice utility shall exit with one of the following values:
1-125
An error occurred in the nice utility.
126
The utility specified by utility was found but could not be invoked.
127
The utility specified by utility could not be found.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
The only guaranteed portable uses of this utility are:
nice utility
Run utility with the default higher or equal nice value.
nice -n  utility
Run utility with a higher nice value.
On some implementations they have no discernible effect on the invoked utility and on some others they are exactly
equivalent.
Historical systems have frequently supported the  up to 20. Since there is no error penalty
associated with guessing a number that is too high, users without access to the system conformance document (to see what limits are
actually in place) could use the historical 1 to 20 range or attempt to use very large numbers if the job should be truly low
priority.
The nice value of a process can be displayed using the command:
ps -o nice
The command, env, nice,
nohup, time, timeout, and xargs utilities have been
specified to use exit code 127 if a utility to be invoked cannot be found, so that applications can distinguish "failure to find a
utility" from "invoked utility exited with an error indication". The value 127 was chosen because it is not commonly used for
other meanings; most utilities use small values for "normal error conditions" and the values above 128 can be confused with
termination due to receipt of a signal. The value 126 was chosen in a similar manner to indicate that the utility could be found,
but not invoked. Some scripts produce meaningful error messages differentiating the 126 and 127 cases. The distinction between exit
codes 126 and 127 is based on KornShell practice that uses 127 when all attempts to exec the utility fail with [ENOENT], and
uses 126 when any attempt to exec the utility fails for any other reason.
EXAMPLES
None.
RATIONALE
The 4.3 BSD version of nice does not check whether increment is a valid decimal integer. The command nice
-x utility, for example, would be treated the same as the command nice --1 utility. If the user
does not have appropriate privileges, this results in a "permission denied" error. This is considered a bug.
When a user without appropriate privileges gives a negative increment, System V treats it like the command nice
-0 utility, while 4.3 BSD writes a "permission denied" message and does not run the utility. The standard specifies
the System V behavior together with an optional BSD-style "permission denied" message.
The C shell has a built-in version of nice that has a different interface from the one described in this volume of
POSIX.1-2024.
The term "utility" is used, rather than "command", to highlight the fact that shell compound commands, pipelines, and so on,
cannot be used. Special built-ins also cannot be used. However, "utility" includes user application programs and shell scripts,
not just utilities defined in this volume of POSIX.1-2024.
Historical implementations of nice provide a nice value range of 40 or 41 discrete steps, with the default nice value
being the midpoint of that range. By default, they raise the nice value of the executed utility by 10.
Some historical documentation states that the increment value must be within a fixed range. This is misleading; the valid
increment values on any invocation are determined by the current process nice value, which is not always the default.
The definition of nice value is not intended to suggest that all processes in a system have priorities that are comparable.
Scheduling policy extensions such as the realtime priorities in the System Interfaces volume of POSIX.1-2024 make the notion of a
single underlying priority for all scheduling policies problematic. Some implementations may implement the nice-related
features to affect all processes on the system, others to affect just the general time-sharing activities implied by this volume of
POSIX.1-2024, and others may have no effect at all. Because of the use of "implementation-defined" in nice and renice, a wide range of implementation strategies are possible.
Earlier versions of this standard allowed a -increment option. This form is no longer specified by POSIX.1-2024
but may be present in some implementations.
FUTURE DIRECTIONS
None.
SEE ALSO
2. Shell Command Language, renice
XBD 3.225 Nice Value, 8. Environment Variables, 12.2
Utility Syntax Guidelines
XSH nice()
CHANGE HISTORY
First released in Issue 4.
Issue 6
This utility is marked as part of the User Portability Utilities option.
The obsolescent SYNOPSIS is removed.
IEEE Std 1003.1-2001/Cor 2-2004, item XCU/TC2/D6/18 is applied, deleting a paragraph of RATIONALE that referred
to text no longer in the standard.
Issue 7
Austin Group Interpretation 1003.1-2001 #027 is applied.
SD5-XCU-ERN-32 and SD5-XCU-ERN-33 are applied, updating the DESCRIPTION, APPLICATION USAGE, and RATIONALE sections.
The nice utility is moved from the User Portability Utilities option to the Base. User Portability Utilities is now an
option for interactive utilities.
Issue 8
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
Austin Group Defect 1586 is applied, adding the timeout utility.
Austin Group Defect 1594 is applied, changing the APPLICATION USAGE section.
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/expand.html =====
expand
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
expand — convert tabs to spaces
SYNOPSIS
expand [-t tablist] [file...]
DESCRIPTION
The expand utility shall write files or the standard input to the standard output with  characters replaced
with one or more  characters needed to pad to the next tab stop. Any  characters shall be copied to
the output and cause the column position count for tab stop calculations to be decremented; the column position count shall not be
decremented below zero.
OPTIONS
The expand utility shall conform to XBD 12.2 Utility Syntax
Guidelines.
The following option shall be supported:
-t tablist
Specify the tab stops. The application shall ensure that the argument tablist consists of either a single positive
decimal integer or a list of tabstops. If a single number is given, tabs shall be set that number of column positions apart instead
of the default 8.
If a list of tabstops is given, the application shall ensure that it consists of a list of two or more positive decimal
integers, separated by  or  characters, in ascending order. The  characters shall be set at
those specific column positions. Each tab stop N shall be an integer value greater than zero, and the list is in strictly
ascending order. This is taken to mean that, from the start of a line of output, tabbing to position N shall cause the next
character output to be in the (N+1)th column position on that line.
In the event of expand having to process a  at a position beyond the last of those specified in a multiple
tab-stop list, the  shall be replaced by a single  in the output.
OPERANDS
The following operand shall be supported:
file
The pathname of a text file to be used as input.
STDIN
See the INPUT FILES section.
INPUT FILES
Input files shall be text files.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of expand:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments and input files), the processing of  and  characters, and for
the determination of the width in column positions each character would occupy on an output device.
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
Default.
STDOUT
The standard output shall be equivalent to the input files with  characters converted into the appropriate number of
characters.
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion
>0
An error occurred.
CONSEQUENCES OF ERRORS
The expand utility shall terminate with an error message and non-zero exit status upon encountering difficulties
accessing one of the file operands.
The following sections are informative.
APPLICATION USAGE
None.
EXAMPLES
None.
RATIONALE
The expand utility is useful for preprocessing text files (before sorting, looking at specific columns, and so on) that
contain  characters.
See XBD 3.75 Column Position.
The tablist option-argument consists of integers in ascending order. Utility Syntax Guideline 8 mandates that
expand shall accept the integers (within the single argument) separated using either  or
characters.
Earlier versions of this standard allowed the following form in the SYNOPSIS:
expand [-tabstop][-tab1,tab2,...,tabn][file ...]
This form is no longer specified by POSIX.1-2024 but may be present in some implementations.
FUTURE DIRECTIONS
None.
SEE ALSO
tabs, unexpand
XBD 3.75 Column Position, 8. Environment Variables, 12.2
Utility Syntax Guidelines
CHANGE HISTORY
First released in Issue 4.
Issue 6
This utility is marked as part of the User Portability Utilities option.
The APPLICATION USAGE section is added.
The obsolescent SYNOPSIS is removed.
The LC_CTYPE environment variable description is updated to align with the IEEE P1003.2b draft standard.
The normative text is reworded to avoid use of the term "must" for application requirements.
Issue 7
Austin Group Interpretation 1003.1-2001 #027 is applied.
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
The expand utility is moved from the User Portability Utilities option to the Base. User Portability Utilities is now an
option for interactive utilities.
Issue 8
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/V3_chap01.html =====
Introduction
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
1. Introduction
The Shell and Utilities volume of POSIX.1-2024 describes the commands and utilities offered to application programs by
POSIX-conformant systems.
1.1 Relationship to Other Documents
1.1.1 System Interfaces
This subsection describes some of the features provided by the System Interfaces volume of POSIX.1-2024 that are assumed to be
globally available on all systems conforming to this volume of POSIX.1-2024. This subsection does not attempt to detail all of the
features defined in the System Interfaces volume of POSIX.1-2024 that are required by all of the utilities defined in this volume
of POSIX.1-2024; the utility and function descriptions point out additional functionality required to provide the corresponding
specific features needed by each.
The following subsections describe frequently used concepts. Many of these concepts are described in the Base Definitions volume
of POSIX.1-2024. Utility and function description statements override these defaults when appropriate.
1.1.1.1 Process Attributes
The following process attributes, as described in the System Interfaces volume of POSIX.1-2024, are assumed to be supported for
all processes in this volume of POSIX.1-2024:
Controlling Terminal
Current Working Directory
Effective Group ID
Effective User ID
File Descriptors
File Mode Creation Mask
Process Group ID
Process ID
Real Group ID
Real User ID
Root Directory
Saved Set-Group-ID
Saved Set-User-ID
Session Membership
Supplementary Group IDs
A conforming implementation may include additional process attributes.
1.1.1.2 Concurrent Execution of Processes
The following functionality of the fork() function defined in the
System Interfaces volume of POSIX.1-2024 shall be available on all systems conforming to this volume of POSIX.1-2024:
Independent processes shall be capable of executing independently without either process terminating.
A process shall be able to create a new process with all of the attributes referenced in 1.1.1.1 Process Attributes, determined according to the semantics of a call to the fork() function defined in the System Interfaces volume of POSIX.1-2024 followed by a call in
the child process to one of the exec functions defined in the System Interfaces volume of POSIX.1-2024.
1.1.1.3 File Access Permissions
The file access control mechanism described by XBD 4.7 File
Access Permissions shall apply to all files on an implementation conforming to this volume of POSIX.1-2024.
1.1.1.4 File Read, Write, and Creation
If a file that does not exist is to be written, it shall be created as described below, unless the utility
description states otherwise.
When a file that does not exist is created, the following features defined in the System Interfaces volume of
POSIX.1-2024 shall apply unless the utility or function description states otherwise:
The user ID of the file shall be set to the effective user ID of the calling process.
The group ID of the file shall be set to the effective group ID of the calling process or the group ID of the
directory in which the file is being created.
If the file is a regular file, the permission bits of the file shall be set to: S_IROTH | S_IWOTH | S_IRGRP |
S_IWGRP | S_IRUSR | S_IWUSR
(see the description of File Modes in XBD 14. Headers
, ) except that the bits specified by the file mode creation
mask of the process shall be cleared. If the file is a directory, the permission bits shall be set to: S_IRWXU | S_IRWXG |
S_IRWXO
except that the bits specified by the file mode creation mask of the process shall be cleared.
The last data access, last data modification, and last file status change timestamps of the file shall be updated
as specified in XBD 4.12 File Times Update.
If the file is a directory, it shall be an empty directory; otherwise, the file shall have length zero.
If the file is a symbolic link, the effect shall be undefined unless the {POSIX2_SYMLINKS} variable is in effect
for the directory in which the symbolic link would be created.
Unless otherwise specified, the file created shall be a regular file.
When an attempt is made to create a file that already exists, the utility shall take the action indicated in
Actions when Creating a File that Already Exists corresponding to the type of the file the utility is
trying to create and the type of the existing file, unless the utility description states otherwise.
Table: Actions when Creating a File that Already Exists
New Type
Existing Type
B
C
D
F
L
M
P
Q
R
S
T
Function Creating New
B
Block Special
F
F
F
F
F
U
U
U
OF
U
U
mknod()**
C
Character Special
F
F
F
F
F
U
U
U
OF
U
U
mknod()**
D
Directory
F
F
F
F
F
—
—
—
F
—
U
mkdir()
F
FIFO Special File
F
F
F
F
F
—
—
—
O
—
U
mkfifo()
L
Symbolic Link
F
F
F
F
F
—
—
—
FL
—
U
symlink()
M
Shared Memory
F
F
F
F
F
—
—
—
—
—
U
shm_open()
P
Semaphore
F
F
F
F
F
—
—
—
—
—
U
sem_open()
Q
Message Queue
F
F
F
F
F
—
—
—
—
—
U
mq_open()
R
Regular File
F
F
F
F
F
—
—
—
RF
—
U
open()
S
Socket
F
F
F
F
F
—
—
—
—
—
U
bind()
T
Typed Memory
F
F
F
F
F
U
U
U
U
U
U
*
The following codes are used in Actions when Creating a File that Already Exists:
F
Fail. The attempt to create the new file shall fail and the utility shall either continue with its operation or exit
immediately with an exit status that indicates an error occurred, depending on the description of the utility.
FL
Follow link. Unless otherwise specified, the symbolic link shall be followed as specified for pathname resolution, and the
operation performed shall be as if the target of the symbolic link (after all resolution) had been named. If the target of the
symbolic link does not exist, it shall be as if that nonexistent target had been named directly.
O
Open FIFO. When attempting to create a regular file, and the existing file is a FIFO special file:
If the FIFO is not already open for reading, the attempt shall block until the FIFO is opened for reading.
Once the FIFO is open for reading, the utility shall open the FIFO for writing and continue with its
operation.
OF
The named file shall be opened with the consequences defined for that file type.
RF
Regular file. When attempting to create a regular file, and the existing file is a regular file:
The user ID, group ID, and permission bits of the file shall not be changed.
The file shall be truncated to zero length.
The last data modification and last file status change timestamps shall be marked for update.
—
The effect is implementation-defined unless specified by the utility description.
U
The effect is unspecified unless specified by the utility description.
*
There is no portable way to create a file of this type.
**
Not portable.
When a file is to be appended, the file shall be opened in a manner equivalent to using the O_APPEND flag, without
the O_TRUNC flag, in the open() function defined in the System Interfaces volume of
POSIX.1-2024.
When a file is to be read or written, the file shall be opened with an access mode corresponding to the operation
to be performed. If file access permissions deny access, the requested operation shall fail.
1.1.1.5 File Removal
When a directory that is the root directory or current working directory of any process is removed, the effect is
implementation-defined. If file access permissions deny access, the requested operation shall fail. Otherwise, when a file is
removed:
Its directory entry shall be removed from the file system.
The link count of the file shall be decremented.
If the file is an empty directory (see XBD 3.119 Empty
Directory):
If no process has the directory open, the space occupied by the directory shall be freed and the directory shall
no longer be accessible.
If one or more processes have the directory open, the directory contents shall be preserved until all references
to the file have been closed.
If the file is a directory that is not empty, the last file status change timestamp shall be marked for
update.
If the file is not a directory:
If the link count becomes zero:
If no process has the file open, the space occupied by the file shall be freed and the file shall no longer be
accessible.
If one or more processes have the file open, the file contents shall be preserved until all references to the file
have been closed.
If the link count is not reduced to zero, the last file status change timestamp shall be marked for update.
The last data modification and last file status change timestamps of the containing directory shall be marked for
update.
1.1.1.6 File Time Values
All files shall have the three time values described by XBD 4.12
File Times Update.
1.1.1.7 File Contents
When a reference is made to the contents of a file, pathname, this means the equivalent of all of the data
placed in the space pointed to by buf when performing the read() function calls
in the following operations defined in the System Interfaces volume of POSIX.1-2024:
while (read (fildes, buf, nbytes) > 0)
;
If the file is indicated by a pathname pathname, the file descriptor shall be determined by the equivalent
of the following operation defined in the System Interfaces volume of POSIX.1-2024:
fildes = open (pathname, O_RDONLY);
The value of nbytes in the above sequence is unspecified; if the file is of a type where the data returned
by read() would vary with different values, the value shall be one that results in the
most data being returned.
If the read() function calls would return an error, it is unspecified
whether the contents of the file are considered to include any data from offsets in the file beyond where the error would be
returned.
1.1.1.8 Pathname Resolution
The pathname resolution algorithm, described by XBD 4.16 Pathname
Resolution, shall be used by implementations conforming to this volume of POSIX.1-2024; see also XBD 4.8 File Hierarchy.
1.1.1.9 Changing the Current Working Directory
When the current working directory (see XBD 3.94 Current Working
Directory) is to be changed, unless the utility or function description states otherwise, the operation shall succeed
unless a call to the chdir() function defined in the System Interfaces volume of
POSIX.1-2024 would fail when invoked with the new working directory pathname as its argument.
1.1.1.10 Establish the Locale
The functionality of the setlocale() function defined in the
System Interfaces volume of POSIX.1-2024 shall be available on all systems conforming to this volume of POSIX.1-2024; that is,
utilities that require the capability of establishing an international operating environment shall be permitted to set the
specified category of the international environment.
1.1.1.11 Actions Equivalent to Functions
Some utility descriptions specify that a utility performs actions equivalent to a function defined in the System
Interfaces volume of POSIX.1-2024. Such specifications require only that the external effects be equivalent, not that any effect
within the utility and visible only to the utility be equivalent.
1.1.2 Concepts Derived from the ISO C Standard
Some of the standard utilities perform complex data manipulation using their own procedure and arithmetic
languages, as defined in their EXTENDED DESCRIPTION or OPERANDS sections. Unless otherwise noted, the arithmetic and semantic
concepts (precision, type conversion, control flow, and so on) shall be equivalent to those defined in the ISO C standard, as
described in the following sections. Note that there is no requirement that the standard utilities be implemented in any particular
programming language.
1.1.2.1 Arithmetic Precision and Operations
Integer variables and constants, including the values of operands and option-arguments, used by the standard
utilities listed in this volume of POSIX.1-2024 shall be implemented as equivalent to the ISO C standard signed long
data type; floating point shall be implemented as equivalent to the ISO C standard double type. Conversions between
types shall be as described in the ISO C standard. All variables shall be initialized to zero if they are not otherwise
assigned by the input to the application.
Arithmetic operators and control flow keywords shall be implemented as equivalent to those in the cited ISO C
standard section, as listed in Selected ISO C Standard Operators and Control Flow Keywords.
Note:
The comma operator (section 6.5.17 of the ISO C standard) is intentionally not included in the table. It need not be
supported by implementations.
Table: Selected ISO C Standard Operators and Control Flow Keywords
Operation
ISO C Standard Equivalent Reference
()
Section 6.5.1, Primary Expressions
postfix ++
postfix --
Section 6.5.2, Postfix Operators
unary +
unary -
prefix ++
prefix --
~
!
sizeof()
Section 6.5.3, Unary Operators
*
/
%
Section 6.5.5, Multiplicative Operators
+
-
Section 6.5.6, Additive Operators
>
Section 6.5.7, Bitwise Shift Operators
, >=
Section 6.5.8, Relational Operators
==
!=
Section 6.5.9, Equality Operators
&
Section 6.5.10, Bitwise AND Operator
^
Section 6.5.11, Bitwise Exclusive OR Operator
|
Section 6.5.12, Bitwise Inclusive OR Operator
&&
Section 6.5.13, Logical AND Operator
||
Section 6.5.14, Logical OR Operator
expr?expr:expr
Section 6.5.15, Conditional Operator
=, *=, /=, %=, +=, -=
>=, &=, ^=, |=
Section 6.5.16, Assignment Operators
if ()
if () ... else
switch ()
Section 6.8.4, Selection Statements
while ()
do ... while ()
for ()
Section 6.8.5, Iteration Statements
goto
continue
break
return
Section 6.8.6, Jump Statements
The evaluation of arithmetic expressions shall be equivalent to that described in Section 6.5, Expressions, of the
ISO C standard.
1.1.2.2 Mathematical Functions
Any mathematical functions with the same names as those in the following sections of the ISO C standard:
Section 7.12, Mathematics,
Section 7.22.2, Pseudo-Random Sequence Generation Functions
shall be implemented to return the results equivalent to those returned from a call to the corresponding function
described in the ISO C standard.
1.2 Utility Limits
This section lists magnitude limitations imposed by a specific implementation. The braces notation, {LIMIT}, is
used in this volume of POSIX.1-2024 to indicate these values, but the braces are not part of the name.
Table: Utility Limit Minimum Values
Name
Description
Value
{POSIX2_BC_BASE_MAX}
The maximum obase value allowed by the bc utility.
99
{POSIX2_BC_DIM_MAX}
The maximum number of elements permitted in an array by the bc
utility.
2048
{POSIX2_BC_SCALE_MAX}
The maximum scale value allowed by the bc utility.
99
{POSIX2_BC_STRING_MAX}
The maximum length of a string constant accepted by the bc utility.
1000
{POSIX2_COLL_WEIGHTS_MAX}
The maximum number of weights that can be assigned to an entry of the LC_COLLATE order keyword in the
locale definition file; see the border_start keyword in XBD 7.3.2
LC_COLLATE.
2
{POSIX2_EXPR_NEST_MAX}
The maximum number of expressions that can be nested within parentheses by the expr utility.
32
{POSIX2_LINE_MAX}
Unless otherwise noted, the maximum length, in bytes, of the input line of a utility (either standard input or
another file), when the utility is described as processing text files. The length includes room for the trailing
.
2048
{POSIX_RE_DUP_MAX}
Maximum number of repeated occurrences of a BRE or ERE interval expression; see XBD 9.3.6 BREs Matching Multiple Characters and 9.4.6 EREs Matching Multiple Characters.
255
The values specified in Utility Limit Minimum Values represent the lowest values
conforming implementations shall provide and, consequently, the largest values on which an application can rely without further
enquiries, as described below. These values shall be accessible to applications via the getconf utility (see getconf).
Implementations may provide more liberal, or less restrictive, values than shown in Utility
Limit Minimum Values. These possibly more liberal values are accessible using the symbols in Symbolic
Utility Limits.
The sysconf() function defined in the System Interfaces volume of
POSIX.1-2024 or the getconf utility return the value of each symbol on each specific
implementation. The value so retrieved is the largest, or most liberal, value that is available throughout the session lifetime, as
determined at session creation. The literal names shown in the table apply only to the getconf utility; the high-level language binding describes the exact form of each name to be
used by the interfaces in that binding.
All numeric limits defined by the System Interfaces volume of POSIX.1-2024, such as {PATH_MAX}, shall also apply to
this volume of POSIX.1-2024. All the utilities defined by this volume of POSIX.1-2024 are implicitly limited by these values,
unless otherwise noted in the utility descriptions.
It is not guaranteed that the application can actually reach the specified limit of an implementation in any given
case, or at all, as a lack of virtual memory or other resources may prevent this. The limit value indicates only that the
implementation does not specifically impose any arbitrary, more restrictive limit.
Table: Symbolic Utility Limits
Name
Description
Minimum Value
{BC_BASE_MAX}
The maximum obase value allowed by the bc utility.
{POSIX2_BC_BASE_MAX}
{BC_DIM_MAX}
The maximum number of elements permitted in an array by the bc
utility.
{POSIX2_BC_DIM_MAX}
{BC_SCALE_MAX}
The maximum scale value allowed by the bc utility.
{POSIX2_BC_SCALE_MAX}
{BC_STRING_MAX}
The maximum length of a string constant accepted by the bc utility.
{POSIX2_BC_STRING_MAX}
{COLL_WEIGHTS_MAX}
The maximum number of weights that can be assigned to an entry of the LC_COLLATE order keyword in the
locale definition file; see the order_start keyword in XBD 7.3.2
LC_COLLATE.
{POSIX2_COLL_WEIGHTS_MAX}
{EXPR_NEST_MAX}
The maximum number of expressions that can be nested within parentheses by the expr utility.
{POSIX2_EXPR_NEST_MAX}
{LINE_MAX}
Unless otherwise noted, the maximum length, in bytes, of the input line of a utility (either standard input or
another file), when the utility is described as processing text files. The length includes room for the trailing
.
{POSIX2_LINE_MAX}
{RE_DUP_MAX}
Maximum number of repeated occurrences of a BRE or ERE interval expression; see XBD 9.3.6 BREs Matching Multiple Characters and 9.4.6 EREs Matching Multiple Characters.
{POSIX_RE_DUP_MAX}
The following value may be a constant within an implementation or may vary from one pathname to another.
{POSIX2_SYMLINKS}
When referring to a directory, the system supports the creation of symbolic links within that directory; for non-directory files,
the meaning of {POSIX2_SYMLINKS} is undefined.
1.3 Grammar Conventions
Portions of this volume of POSIX.1-2024 are expressed in terms of a special grammar notation. It is used to portray
the complex syntax of certain program input. The grammar is based on the syntax used by the yacc utility. However, it does not represent fully functional yacc input, suitable for program use; the lexical processing and all semantic requirements are
described only in textual form. The grammar is not based on source used in any traditional implementation and has not been tested
with the semantic code that would normally be required to accompany it. Furthermore, there is no implication that the partial
yacc code presented represents the most efficient, or only, means of supporting the
complex syntax within the utility. Implementations may use other programming languages or algorithms, as long as the syntax
supported is the same as that represented by the grammar.
The following typographical conventions are used in the grammar; they have no significance except to aid in
reading.
The identifiers for the reserved words of the language are shown with a leading capital letter. (These are
terminals in the grammar; for example, While, Case.)
The identifiers for terminals in the grammar are all named with uppercase letters and underscores; for example,
NEWLINE, ASSIGN_OP, NAME.
The identifiers for non-terminals are all lowercase.
1.4 Utility Description Defaults
This section describes all of the subsections used within the utility descriptions, including:
Intended usage of the section
Global defaults that affect all the standard utilities
The meanings of notations used in this volume of POSIX.1-2024 that are specific to individual utility
sections
NAME
This section gives the name or names of the utility and briefly states its purpose.
SYNOPSIS
The SYNOPSIS section summarizes the syntax of the calling sequence for the utility, including options, option-arguments, and
operands. Standards for utility naming are described in XBD 12.2 Utility Syntax
Guidelines; for describing the utility's arguments in XBD 12.1 Utility
Argument Syntax.
DESCRIPTION
The DESCRIPTION section describes the actions of the utility. If the utility has a very complex set of subcommands or its own
procedural language, an EXTENDED DESCRIPTION section is also provided. Most explanations of optional functionality are omitted
here, as they are usually explained in the OPTIONS section.
As stated in 1.1.1.11 Actions Equivalent to Functions, some functions are described
in terms of equivalent functionality. When specific functions are cited, the implementation shall provide equivalent functionality
including side-effects associated with successful execution of the function. The treatment of errors and intermediate results from
the individual functions cited is generally not specified by this volume of POSIX.1-2024. See the utility's EXIT STATUS and
CONSEQUENCES OF ERRORS sections for all actions associated with errors encountered by the utility.
A standard utility shall not be treated as a declaration utility unless explicitly stated in this section.
OPTIONS
The OPTIONS section describes the utility options and option-arguments, and how they modify the actions of the utility. Standard
utilities that have options either fully comply with XBD 12.2 Utility Syntax
Guidelines or describe all deviations. Apparent disagreements between functionality descriptions in the OPTIONS and
DESCRIPTION (or EXTENDED DESCRIPTION) sections are always resolved in favor of the OPTIONS section.
Each OPTIONS section that uses the phrase "The ... utility shall conform to the Utility Syntax Guidelines ..."
refers only to the use of the utility as specified by this volume of POSIX.1-2024; implementation extensions should also conform to
the guidelines, but may allow exceptions for historical practice.
Unless otherwise stated in the utility description, when given an option unrecognized by the implementation, or
when a required option-argument is not provided, standard utilities shall issue a diagnostic message to standard error and exit
with an exit status that indicates an error occurred.
All utilities in this volume of POSIX.1-2024 shall be capable of processing arguments using eight-bit
transparency.
Default Behavior: When this section is listed as "None.", it means that the implementation need not
support any options. Standard utilities that do not accept options, but that do accept operands, shall recognize "--" as a
first argument to be discarded.
The requirement for recognizing "--" is because conforming applications need a way to shield their
operands from any arbitrary options that the implementation may provide as an extension. For example, if the standard utility
foo is listed as taking no options, and the application needed to give it a pathname with a leading , it
could safely do it as:
foo -- -myfile
and avoid any problems with -m used as an extension.
OPERANDS
The OPERANDS section describes the utility operands, and how they affect the actions of the utility. Apparent disagreements between
functionality descriptions in the OPERANDS and DESCRIPTION (or EXTENDED DESCRIPTION) sections shall be resolved in favor of the
OPERANDS section.
If an operand naming a file can be specified as '-', which means to use the standard input instead of a
named file, this is explicitly stated in this section. Unless otherwise stated, the use of multiple instances of '-' to
mean standard input in a single command produces unspecified results.
Unless otherwise stated, the standard utilities that accept operands shall process those operands in the order
specified in the command line.
Default Behavior: When this section is listed as "None.", it means that the implementation need not
support any operands.
STDIN
The STDIN section describes the standard input of the utility. This section is frequently merely a reference to the following
section, as many utilities treat standard input and input files in the same manner. Unless otherwise stated, all restrictions
described in the INPUT FILES section shall apply to this section as well.
Use of a terminal for standard input can cause any of the standard utilities that read standard input to stop when
used in the background. For this reason, applications should not use interactive features in scripts to be placed in the
background.
The specified standard input format of the standard utilities shall not depend on the existence or value of the
environment variables defined in this volume of POSIX.1-2024, except as provided by this volume of POSIX.1-2024.
Default Behavior: When this section is listed as "Not used.", it means that the standard input shall not
be read when the utility is used as described by this volume of POSIX.1-2024.
INPUT FILES
The INPUT FILES section describes the files, other than the standard input, used as input by the utility. It includes files named
as operands and option-arguments as well as other files that are referred to, such as start-up and initialization files, databases,
and so on. Commonly-used files are generally described in one place and cross-referenced by other utilities.
All utilities in this volume of POSIX.1-2024 shall be capable of processing input files using eight-bit
transparency.
When a standard utility reads a seekable input file and terminates without an error before it reaches end-of-file,
the utility shall ensure that the file offset in the open file description is properly positioned just past the last byte processed
by the utility. For files that are not seekable, the state of the file offset in the open file description for that file is
unspecified. A conforming application shall not assume that the following three commands are equivalent:
tail -n +2 file
(sed -n 1q; cat)  convention; unless otherwise stated, the utility need not be able to accumulate more than
{LINE_MAX} bytes from a set of multiple, continued input lines. Thus, for a conforming application the total of all the continued
lines in a set cannot exceed {LINE_MAX}. If a utility using the escaped  convention detects an end-of-file condition
immediately after an escaped , the results are unspecified.
Record formats are described in a notation similar to that used by the C-language function, printf(). See XBD 5. File Format
Notation for a description of this notation. The format description is intended to be sufficiently rigorous to allow other
applications to generate these input files. However, since s can legitimately be included in some of the fields
described by the standard utilities, particularly in locales other than the POSIX locale, this intent is not always realized.
Default Behavior: When this section is listed as "None.", it means that no input files are required to be
supplied when the utility is used as described by this volume of POSIX.1-2024.
ENVIRONMENT VARIABLES
The ENVIRONMENT VARIABLES section lists what variables affect the utility's execution.
The entire manner in which environment variables described in this volume of POSIX.1-2024 affect the behavior of
each utility is described in the ENVIRONMENT VARIABLES section for that utility, in conjunction with the global effects of the
LANG , LC_ALL , and [XSI]  NLSPATH  environment
variables described in XBD 8. Environment Variables. The existence or value
of environment variables described in this volume of POSIX.1-2024 shall not otherwise affect the specified behavior of the standard
utilities. Any effects of the existence or value of environment variables not described by this volume of POSIX.1-2024 upon the
standard utilities are unspecified.
For those standard utilities that use environment variables as a means for selecting a utility to execute (such as
CC in make), the string provided to the utility is subjected to the path search
described for PATH in XBD 8. Environment Variables.
All utilities in this volume of POSIX.1-2024 shall be capable of processing environment variable names and values
using eight-bit transparency.
Default Behavior: When this section is listed as "None.", it means that the behavior of the utility is not
directly affected by environment variables described by this volume of POSIX.1-2024 when the utility is used as described by this
volume of POSIX.1-2024.
ASYNCHRONOUS EVENTS
The ASYNCHRONOUS EVENTS section lists how the utility reacts to such events as signals and what signals are caught.
Default Behavior: When this section is listed as "Default.", or it refers to "the standard action" for
any signal, it means that the action taken as a result of the signal shall be as follows:
If the action inherited from the invoking process, according to the rules of inheritance of signal actions defined
in the System Interfaces volume of POSIX.1-2024, is for the signal to be ignored, the utility shall ignore the signal.
If the action inherited from the invoking process, according to the rules of inheritance of signal actions defined
in System Interfaces volume of POSIX.1-2024, is the default signal action, the result of the utility's execution shall be as if the
default signal action had been taken.
When the required action is for the signal to terminate the utility, the utility may catch the signal, perform some
additional processing (such as deleting temporary files), restore the default signal action, and resignal itself.
STDOUT
The STDOUT section completely describes the standard output of the utility. This section is frequently merely a reference to the
following section, OUTPUT FILES, because many utilities treat standard output and output files in the same manner.
Use of a terminal for standard output may cause any of the standard utilities that write standard output to stop
when used in the background. For this reason, applications should not use interactive features in scripts to be placed in the
background.
Record formats are described in a notation similar to that used by the C-language function, printf(). See XBD 5. File Format
Notation for a description of this notation.
The specified standard output of the standard utilities shall not depend on the existence or value of the
environment variables defined in this volume of POSIX.1-2024, except as provided by this volume of POSIX.1-2024.
Some of the standard utilities describe their output using the verb display, defined in XBD 3.107 Display. Output described in the STDOUT sections of such utilities may be
produced using means other than standard output. When standard output is directed to a terminal, the output described shall be
written directly to the terminal. Otherwise, the results are undefined.
Default Behavior: When this section is listed as "Not used.", it means that the standard output shall not
be written when the utility is used as described by this volume of POSIX.1-2024.
STDERR
The STDERR section describes the standard error output of the utility. Only those messages that are purposely sent by the utility
are described.
Use of a terminal for standard error may cause any of the standard utilities that write standard error output to
stop when used in the background. For this reason, applications should not use interactive features in scripts to be placed in the
background.
The format of diagnostic messages for most utilities is unspecified, but the language and cultural conventions of
diagnostic and informative messages whose format is unspecified by this volume of POSIX.1-2024 should be affected by the setting of
LC_MESSAGES and [XSI]  NLSPATH .
The specified standard error output of standard utilities shall not depend on the existence or value of the
environment variables defined in this volume of POSIX.1-2024, except as provided by this volume of POSIX.1-2024.
Default Behavior: When this section is listed as "The standard error shall be used only for diagnostic
messages.", it means that, unless otherwise stated, the diagnostic messages shall be sent to the standard error only when the exit
status indicates that an error occurred and the utility is used as described by this volume of POSIX.1-2024.
When this section is listed as "Not used.", it means that the standard error shall not be used when the utility
is used as described in this volume of POSIX.1-2024.
OUTPUT FILES
The OUTPUT FILES section completely describes the files created or modified by the utility. Temporary or system files that are
created for internal usage by this utility or other parts of the implementation (for example, spool, log, and audit files) are not
described in this, or any, section. The utilities creating such files and the names of such files are unspecified. If applications
are written to use temporary or intermediate files, they should use the TMPDIR environment variable, if it is set and
represents an accessible directory, to select the location of temporary files.
Implementations shall ensure that temporary files, when used by the standard utilities, are named so that different
utilities or multiple instances of the same utility can operate simultaneously without regard to their working directories, or any
other process characteristic other than process ID. There are two exceptions to this rule:
Resources for temporary files other than the name space (for example, disk space, available directory entries, or
number of processes allowed) are not guaranteed.
Certain standard utilities generate output files that are intended as input for other utilities (for example,
lex generates lex.yy.c), and these cannot have unique names. These cases are
explicitly identified in the descriptions of the respective utilities.
Any temporary file created by the implementation shall be removed by the implementation upon a utility's successful
exit, exit because of errors, or before termination by any of the SIGHUP, SIGINT, or SIGTERM signals, unless specified otherwise by
the utility description.
Receipt of the SIGQUIT signal should generally cause termination (unless in some debugging mode) that would bypass
any attempted recovery actions.
Record formats are described in a notation similar to that used by the C-language function, printf(); see XBD 5. File Format
Notation for a description of this notation.
Default Behavior: When this section is listed as "None.", it means that no files are created or modified
as a consequence of direct action on the part of the utility when the utility is used as described by this volume of POSIX.1-2024.
However, the utility may create or modify system files, such as log files, that are outside the utility's normal execution
environment.
EXTENDED DESCRIPTION
The EXTENDED DESCRIPTION section provides a place for describing the actions of very complicated utilities, such as text editors or
language processors, which typically have elaborate command languages.
Default Behavior: When this section is listed as "None.", no further description is necessary.
EXIT STATUS
The EXIT STATUS section describes the values the utility shall return to the calling program, or shell, and the conditions that
cause these values to be returned. Usually, utilities return zero for successful completion and values greater than zero for
various error conditions. If specific numeric values are listed in this section, the system shall use those values for the errors
described. In some cases, status values are listed more loosely, such as >0. A strictly conforming application shall not rely on
any specific value in the range shown and shall be prepared to receive any value in the range.
For example, a utility may list zero as a successful return, 1 as a failure for a specific reason, and >1 as
"an error occurred". In this case, unspecified conditions may cause a 2 or 3, or other value, to be returned. A conforming
application should be written so that it tests for successful exit status values (zero in this case), rather than relying upon the
single specific error value listed in this volume of POSIX.1-2024. In that way, it has maximum portability, even on implementations
with extensions.
Unspecified error conditions may be represented by specific values not listed in this volume of POSIX.1-2024.
Default Behavior: When the description of exit status 0 is "Successful completion", it means that exit
status 0 shall indicate that all of the actions the utility is required to perform were completed successfully.
CONSEQUENCES OF ERRORS
The CONSEQUENCES OF ERRORS section describes the effects on the environment, file systems, process state, and so on, when error
conditions occur. It does not describe error messages produced or exit status values used.
The many reasons for failure of a utility are generally not specified by the utility descriptions. Utilities may
terminate prematurely if they encounter: invalid usage of options, arguments, or environment variables; invalid usage of the
complex syntaxes expressed in EXTENDED DESCRIPTION sections; resource exhaustion; difficulties accessing, creating, reading, or
writing files; or difficulties associated with the privileges of the process.
The following shall apply to each utility, unless otherwise stated:
If the requested action cannot be performed on an operand representing a file, directory, user, process, and so
on, the utility shall issue a diagnostic message to standard error and continue processing the next operand in sequence, but the
final exit status shall be one that indicates an error occurred.
For a utility that recursively traverses a file hierarchy (such as find
or chown -R), if the requested action cannot be performed on a file or
directory encountered in the hierarchy, the utility shall issue a diagnostic message to standard error and continue processing the
remaining files in the hierarchy, but the final exit status shall be one that indicates an error occurred.
Note:
If the requested action is to write one or more pathnames in a format that has  as a terminator or separator,
and a pathname to be written contains any bytes that have the encoded value of a  character, this should be treated
as an action that cannot be performed. A future version of this standard may require that utilities treat this as an error.
If the requested action characterized by an option or option-argument cannot be performed, the utility shall issue
a diagnostic message to standard error and the exit status returned shall be one that indicates an error occurred.
When an unrecoverable error condition is encountered, the utility shall exit with an exit status that indicates an
error occurred.
A diagnostic message shall be written to standard error whenever an error condition occurs.
When a utility encounters an error condition several actions are possible, depending on the severity of the error
and the state of the utility. Included in the possible actions of various utilities are: deletion of temporary or intermediate work
files; deletion of incomplete files; validity checking of the file system or directory.
Default Behavior: When this section is listed as "Default.", it means that any changes to the environment,
file systems, process state, and so on are unspecified.
APPLICATION USAGE
This section is informative.
The APPLICATION USAGE section gives advice to the application programmer or user about the way the utility should
be used.
EXAMPLES
This section is informative.
The EXAMPLES section gives one or more examples of usage, where appropriate. In the event of conflict between an
example and a normative part of the specification, the normative material is to be taken as correct.
In all examples, quoting has been used, showing how sample commands (utility names combined with arguments) could
be passed correctly to a shell (see sh) or as a string to the system() function defined in the System Interfaces volume of POSIX.1-2024. Such quoting would
not be used if the utility is invoked using one of the exec functions defined in the System Interfaces volume of
POSIX.1-2024.
RATIONALE
This section is informative.
This section contains historical information concerning the contents of this volume of POSIX.1-2024 and why
features were included or discarded by the standard developers.
FUTURE DIRECTIONS
This section is informative.
The FUTURE DIRECTIONS section should be used as a guide to current thinking; there is not necessarily a commitment
to implement all of these future directions in their entirety.
SEE ALSO
This section is informative.
The SEE ALSO section lists related entries.
CHANGE HISTORY
This section is informative.
This section shows the derivation of the entry and any significant changes that have been made to it.
Certain of the standard utilities describe how they can invoke other utilities or applications, such as by passing
a command string to the command interpreter. The external influences (STDIN, ENVIRONMENT VARIABLES, and so on) and external effects
(STDOUT, CONSEQUENCES OF ERRORS, and so on) of such invoked utilities are not described in the section concerning the standard
utility that invokes them.
1.5 Considerations for Utilities in Support of Files of Arbitrary Size
The following utilities support files of any size up to the maximum that can be created by the implementation. This
support includes correct writing of file size-related values (such as file sizes and offsets, line numbers, and block counts) and
correct interpretation of command line arguments that contain such values.
basename
Return non-directory portion of pathname.
cat
Concatenate and print files.
cd
Change working directory.
chgrp
Change file group ownership.
chmod
Change file modes.
chown
Change file ownership.
cksum
Write file checksums and sizes.
cmp
Compare two files.
cp
Copy files.
dd
Convert and copy a file.
df
Report free disk space.
dirname
Return directory portion of pathname.
du
Estimate file space usage.
find
Find files.
ln
Link files.
ls
List directory contents.
mkdir
Make directories.
mv
Move files.
pathchk
Check pathnames.
pwd
Return working directory name.
rm
Remove directory entries.
rmdir
Remove directories.
sh
Shell, the standard command language interpreter.
test
Evaluate expression.
touch
Change file access and modification times.
ulimit
Set or report file size limit.
Exceptions to the requirement that utilities support files of any size up to the maximum are as follows:
Uses of files as command scripts, or for configuration or control, are exempt. For example, it is not required
that sh be able to read an arbitrarily large .profile.
Shell input and output redirection are exempt. For example, it is not required that the redirections sum
file succeed for an arbitrarily large existing file.
1.6 Built-In Utilities
Any of the standard utilities may be implemented as regular built-in utilities within the command language
interpreter. This is usually done to increase the performance of frequently used utilities or to achieve functionality that would
be more difficult in a separate environment. The intrinsic utilities described in 1.7 Intrinsic Utilities
below are frequently provided as regular built-ins.
However, all of the standard utilities other than:
The special built-ins described in 2.15 Special Built-In
Utilities
The intrinsic utilities named in Intrinsic Utilities, except for kill
shall be implemented, regardless of whether they are also implemented as regular built-ins, in a manner so that
they can be accessed via the exec family of functions as defined in the System Interfaces volume of POSIX.1-2024 and can be
invoked directly by those standard utilities that require it (env, find, nice, nohup, time, xargs).
1.7 Intrinsic Utilities
As described in 2.9.1.4 Command Search and
Execution, intrinsic utilities are not subject to a PATH search during command search and execution. The utilities
named in Intrinsic Utilities shall be intrinsic utilities.
Table: Intrinsic Utilities
alias
bg
cd
command
fc
fg
getopts
hash
jobs
kill
read
type
ulimit
umask
unalias
wait
Whether any additional utility is considered an intrinsic utility is implementation-defined. Because applications
are unable to override an intrinsic utility with a utility from PATH , implementations should not make any utility an
intrinsic utility beyond the utilities in Intrinsic Utilities.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/chown.html =====
chown
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
chown — change the file ownership
SYNOPSIS
chown [-h] owner[:group] file...
chown -R [-H|-L|-P] owner[:group] file...
DESCRIPTION
The chown utility shall set the user ID of the file named by each file operand to the user ID specified by the
owner operand.
For each file operand, or, if the -R option is used, each file encountered while walking the directory trees
specified by the file operands, the chown utility shall perform actions equivalent to the chown() function defined in the System Interfaces volume of POSIX.1-2024, called with the
following arguments:
The file operand shall be used as the path argument.
The user ID indicated by the owner portion of the first operand shall be used as the owner argument.
If the group portion of the first operand is given, the group ID indicated by it shall be used as the group
argument; otherwise, the group ownership shall not be changed.
Unless chown is invoked by a process with appropriate privileges, the set-user-ID and set-group-ID bits of a regular file
shall be cleared upon successful completion; the set-user-ID and set-group-ID bits of other file types may be cleared.
OPTIONS
The chown utility shall conform to XBD 12.2 Utility Syntax
Guidelines.
The following options shall be supported by the implementation:
-h
For each file operand that names a file of type symbolic link, chown shall attempt to set the user ID of the symbolic
link. If a group ID was specified, for each file operand that names a file of type symbolic link, chown shall attempt to set
the group ID of the symbolic link.
-H
If the -R option is specified and a symbolic link referencing a file of type directory is specified on the command line,
chown shall change the user ID (and group ID, if specified) of the directory referenced by the symbolic link and all files
in the file hierarchy below it.
-L
If the -R option is specified and a symbolic link referencing a file of type directory is specified on the command line
or encountered during the traversal of a file hierarchy, chown shall change the user ID (and group ID, if specified) of the
directory referenced by the symbolic link and all files in the file hierarchy below it.
-P
If the -R option is specified and a symbolic link is specified on the command line or encountered during the traversal
of a file hierarchy, chown shall change the owner ID (and group ID, if specified) of the symbolic link. The chown
utility shall not follow the symbolic link to any other part of the file hierarchy.
-R
Recursively change file user and group IDs. For each file operand that names a directory, chown shall change the
user ID (and group ID, if specified) of the directory and all files in the file hierarchy below it. Unless a -H, -L,
or -P option is specified, it is unspecified which of these options will be used as the default.
Specifying more than one of the mutually-exclusive options -H, -L, and -P shall not be considered an error.
The last option specified shall determine the behavior of the utility.
OPERANDS
The following operands shall be supported:
owner[:group]
A user ID and optional group ID to be assigned to file. The owner portion of this operand shall be a user name
from the user database or a numeric user ID. Either specifies a user ID which shall be given to each file named by one of the
file operands. If a numeric owner operand exists in the user database as a user name, the user ID number associated
with that user name shall be used as the user ID. Similarly, if the group portion of this operand is present, it shall be a
group name from the group database or a numeric group ID. Either specifies a group ID which shall be given to each file. If a
numeric group operand exists in the group database as a group name, the group ID number associated with that group name shall be
used as the group ID.
file
A pathname of a file whose user ID is to be modified.
STDIN
Not used.
INPUT FILES
None.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of chown:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
Default.
STDOUT
Not used.
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
The utility executed successfully and all requested changes were made.
>0
An error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
Only the owner of a file or the user with appropriate privileges may change the owner or group of a file.
Some implementations restrict the use of chown to a user with appropriate privileges.
EXAMPLES
None.
RATIONALE
The System V and BSD versions use different exit status codes. Some implementations used the exit status as a count of the
number of errors that occurred; this practice is unworkable since it can overflow the range of valid exit status values. These are
masked by specifying only 0 and >0 as exit values.
The functionality of chown is described substantially through references to functions in the System Interfaces volume of
POSIX.1-2024. In this way, there is no duplication of effort required for describing the interactions of permissions, multiple
groups, and so on.
The 4.3 BSD method of specifying both owner and group was included in this volume of POSIX.1-2024 because:
There are cases where the desired end condition could not be achieved using the chgrp and chown (that only changed the user ID) utilities. (If the current owner is not
a member of the desired group and the desired owner is not a member of the current group, the chown() function could fail unless both owner and group are changed at the same time.)
Even if they could be changed independently, in cases where both are being changed, there is a 100% performance penalty caused
by being forced to invoke both utilities.
The BSD syntax user[.group] was changed to user[:group] in this volume of POSIX.1-2024 because the
is a valid character in login names (as specified by the Base Definitions volume of POSIX.1-2024, login names
consist of characters in the portable filename character set). The  character was chosen as the replacement for the
character because it would never be allowed as a character in a user name or group name on historical
implementations.
The -R option is considered by some observers as an undesirable departure from the historical UNIX system tools approach;
since a tool, find, already exists to recurse over directories, there seemed to be no
good reason to require other tools to have to duplicate that functionality. However, the -R option was deemed an important
user convenience, is far more efficient than forking a separate process for each element of the directory hierarchy, and is in
widespread historical use.
FUTURE DIRECTIONS
None.
SEE ALSO
chgrp, chmod
XBD 8. Environment Variables, 12.2 Utility Syntax Guidelines
XSH chown()
CHANGE HISTORY
First released in Issue 2.
Issue 6
New options -h, -H, -L, and -P are added to align with the IEEE P1003.2b draft standard. These
options affect the processing of symbolic links.
The normative text is reworded to avoid use of the term "must" for application requirements.
IEEE PASC Interpretation 1003.2 #172 is applied, changing the CONSEQUENCES OF ERRORS section to "Default.".
The "otherwise, ..." text in item 3. of the DESCRIPTION is changed to "otherwise, the group ownership shall not be
changed".
IEEE Std 1003.1-2001/Cor 1-2002, item XCU/TC1/D6/17 is applied, changing the SYNOPSIS to make it clear that
-h and -R are optional.
Issue 7
SD5-XCU-ERN-9 is applied, removing the -R from the first line of the SYNOPSIS.
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
The description of the -h and -P options is revised.
Issue 8
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/vi.html =====
vi
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
vi — screen-oriented (visual) display editor
SYNOPSIS
[UP]  vi [-rR] [-c command] [-t
tagstring] [-w size] [file...]
DESCRIPTION
This utility shall be provided on systems that both support the User Portability Utilities option and define the
POSIX2_CHAR_TERM symbol. On other systems it is optional.
The vi (visual) utility is a screen-oriented text editor. Only the open and visual modes of the editor are described in
POSIX.1-2024; see the line editor ex for additional editing capabilities used in
vi. The user can switch back and forth between vi and ex and execute
ex commands from within vi.
This reference page uses the term edit buffer to describe the current working text. No specific implementation is implied
by this term. All editing changes are performed on the edit buffer, and no changes to it shall affect any file until an editor
command writes the file.
When using vi, the terminal screen acts as a window into the editing buffer. Changes made to the editing buffer shall be
reflected in the screen display; the position of the cursor on the screen shall indicate the position within the editing
buffer.
Certain terminals do not have all the capabilities necessary to support the complete vi definition. When these commands
cannot be supported on such terminals, this condition shall not produce an error message such as "not an editor command" or
report a syntax error. The implementation may either accept the commands and produce results on the screen that are the result of
an unsuccessful attempt to meet the requirements of this volume of POSIX.1-2024 or report an error describing the terminal-related
deficiency.
OPTIONS
The vi utility shall conform to XBD 12.2 Utility Syntax
Guidelines, except that '+' may be recognized as an option delimiter as well as '-'.
The following options shall be supported:
-c command
See the ex command description of the -c option.
-r
See the ex command description of the -r option.
-R
See the ex command description of the -R option.
-t tagstring
See the ex command description of the -t option.
-w size
See the ex command description of the -w option.
OPERANDS
See the OPERANDS section of the ex command for a description of the operands supported
by the vi command.
STDIN
If standard input is not a terminal device, the results are undefined. The standard input consists of a series of commands and
input text, as described in the EXTENDED DESCRIPTION section.
If a read from the standard input returns an error, or if the editor detects an end-of-file condition from the standard input,
it shall be equivalent to a SIGHUP asynchronous event.
INPUT FILES
See the INPUT FILES section of the ex command for a description of the input files
supported by the vi command.
ENVIRONMENT VARIABLES
See the ENVIRONMENT VARIABLES section of the ex command for the environment variables
that affect the execution of the vi command.
ASYNCHRONOUS EVENTS
See the ASYNCHRONOUS EVENTS section of the ex for the asynchronous events that affect
the execution of the vi command.
STDOUT
If standard output is not a terminal device, undefined results occur.
Standard output may be used for writing prompts to the user, for informational messages, and for writing lines from the
file.
STDERR
If standard output is not a terminal device, undefined results occur.
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
See the OUTPUT FILES section of the ex command for a description of the output files
supported by the vi command.
EXTENDED DESCRIPTION
If the terminal does not have the capabilities necessary to support an unspecified portion of the vi definition,
implementations shall start initially in ex mode or open mode. Otherwise, after
initialization, vi shall be in command mode; text input mode can be entered by one of several commands used to insert or
change text. In text input mode,  can be used to return to command mode; other uses of  are described later
in this section; see Terminate Command or Input Mode.
Initialization in ex and vi
See Initialization in ex and vi for a description of ex and vi initialization for the vi utility.
Command Descriptions in vi
The following symbols are used in this reference page to represent arguments to commands.
buffer
See the description of buffer in the EXTENDED DESCRIPTION section of the ex
utility; see Command Descriptions in ex.
In open and visual mode, when a command synopsis shows both [buffer] and [count] preceding the command name, they
can be specified in either order.
count
A positive integer used as an optional argument to most commands, either to give a repeat count or as a size. This argument is
optional and shall default to 1 unless otherwise specified.
The Synopsis lines for the vi commands -G, -L, -R, -],
%, &, ^, D, m, M, Q, u, U, and ZZ do not have count as
an optional argument. Regardless, it shall not be an error to specify a count to these commands, and any specified
count shall be ignored.
motion
An optional trailing argument used by the !, , c, d, and y commands, which
is used to indicate the region of text that shall be affected by the command. The motion can be either one of the command
characters repeated or one of several other vi commands (listed in the following table). Each of the applicable commands
specifies the region of text matched by repeating the command; each command that can be used as a motion command specifies the
region of text it affects.
Commands that take motion arguments operate on either lines or characters, depending on the circumstances. When operating
on lines, all lines that fall partially or wholly within the text region specified for the command shall be affected. When
operating on characters, only the exact characters in the specified text region shall be affected. Each motion command specifies
this individually.
When commands that may be motion commands are not used as motion commands, they shall set the current position to the current
line and column as specified.
The following commands shall be valid cursor motion commands:
(    -    j    H
)    $    k    L
[[   %    l    M
-H        ]]   _    n    N
-N        {    ;    t    T
-P        }    ?    w    W
^    b    B
+    e    E
|    f    F
/    h    G
Any count that is specified to a command that has an associated motion command shall be applied to the motion command. If
a count is applied to both the command and its associated motion command, the effect shall be multiplicative.
The following symbols are used in this section to specify locations in the edit buffer:
current character
The character that is currently indicated by the cursor.
end of a line
The point located between the last non- (if any) and the terminating  of a line. For an empty line,
this location coincides with the beginning of the line.
end of the edit buffer
The location corresponding to the end of the last line in the edit buffer.
The following symbols are used in this section to specify command actions:
bigword
In the POSIX locale, vi shall recognize four kinds of bigwords:
A maximal sequence of non- characters preceded and followed by  characters or the beginning or end of
a line or the edit buffer
One or more sequential blank lines
The first character in the edit buffer
The last non- in the edit buffer
word
In the POSIX locale, vi shall recognize five kinds of words:
A maximal sequence of letters, digits, and underscores, delimited at both ends by:
Characters other than letters, digits, or underscores
The beginning or end of a line
The beginning or end of the edit buffer
A maximal sequence of characters other than letters, digits, underscores, or  characters, delimited at both ends
by:
A letter, digit, underscore
characters
The beginning or end of a line
The beginning or end of the edit buffer
One or more sequential blank lines
The first character in the edit buffer
The last non- in the edit buffer
section boundary
A section boundary is one of the following:
A line whose first character is a
A line whose first character is an open curly brace ('{')
A line whose first character is a  and whose second and third characters match a two-character pair in the
sections edit option (see ex)
A line whose first character is a  and whose only other character matches the first character of a two-character
pair in the sections edit option, where the second character of the two-character pair is a
The first line of the edit buffer
The last line of the edit buffer if the last line of the edit buffer is empty or if it is a ]] or } command;
otherwise, the last non- of the last line of the edit buffer
paragraph boundary
A paragraph boundary is one of the following:
A section boundary
A line whose first character is a  and whose second and third characters match a two-character pair in the
paragraphs edit option (see ex)
A line whose first character is a  and whose only other character matches the first character of a two-character
pair in the paragraphs edit option, where the second character of the two-character pair is a
One or more sequential blank lines
remembered search direction
See the description of remembered search direction in ex.
sentence boundary
A sentence boundary is one of the following:
A paragraph boundary
The first non- that occurs after a paragraph boundary
The first non- that occurs after a  ('.'),  ('!'), or
('?'), followed by two  characters or the end of a line; any number of closing
parenthesis (')'), closing brackets (']'), double-quote ('"' ), or single-quote ()
characters can appear between the punctuation mark and the two  characters or end-of-line
In the remainder of the description of the vi utility, the term "buffer line" refers to a line in the edit buffer and
the term "display line" refers to the line or lines on the display screen used to display one buffer line. The term "current
line" refers to a specific "buffer line".
If there are display lines on the screen for which there are no corresponding buffer lines because they correspond to lines that
would be after the end of the file, they shall be displayed as a single  ('~') character, plus the
terminating .
The last line of the screen shall be used to report errors or display informational messages. It shall also be used to display
the input for "line-oriented commands" (/, ?, :, and !). When a line-oriented command is executed,
the editor shall enter text input mode on the last line on the screen, using the respective command characters as prompt
characters. (In the case of the ! command, the associated motion shall be entered by the user before the editor enters text
input mode.) The line entered by the user shall be terminated by a , a non--V-escaped
, or unescaped . It is unspecified if more characters than require a display width minus one
column number of screen columns can be entered.
If any command is executed that overwrites a portion of the screen other than the last line of the screen (for example, the
ex suspend or ! commands), other than the ex shell command, the user shall be prompted for a character before the screen is
refreshed and the edit session continued.
characters shall take up the number of columns on the screen set by the tabstop edit option (see ex), unless there are less than that number of columns before the display margin that will cause
the displayed line to be folded; in this case, they shall only take up the number of columns up to that boundary.
The cursor shall be placed on the current line and relative to the current column as specified by each command described in the
following sections.
In open mode, if the current line is not already displayed, then it shall be displayed.
In visual mode, if the current line is not displayed, then the lines that are displayed shall be expanded, scrolled, or redrawn
to cause an unspecified portion of the current line to be displayed. If the screen is redrawn, no more than the number of display
lines specified by the value of the window edit option shall be displayed (unless the current line cannot be completely
displayed in the number of display lines specified by the window edit option) and the current line shall be positioned as
close to the center of the displayed lines as possible (within the constraints imposed by the distance of the line from the
beginning or end of the edit buffer). If the current line is before the first line in the display and the screen is scrolled, an
unspecified portion of the current line shall be placed on the first line of the display. If the current line is after the last
line in the display and the screen is scrolled, an unspecified portion of the current line shall be placed on the last line of the
display.
In visual mode, if a line from the edit buffer (other than the current line) does not entirely fit into the lines at the bottom
of the display that are available for its presentation, the editor may choose not to display any portion of the line. The lines of
the display that do not contain text from the edit buffer for this reason shall each consist of a single '@'
character.
In visual mode, the editor may choose for unspecified reasons to not update lines in the display to correspond to the underlying
edit buffer text. The lines of the display that do not correctly correspond to text from the edit buffer for this reason shall
consist of a single '@' character (plus the terminating ), and the -R command shall cause
the editor to update the screen to correctly represent the edit buffer.
Open and visual mode commands that set the current column set it to a column position in the display, and not a character
position in the line. In this case, however, the column position in the display shall be calculated for an infinite width display;
for example, the column related to a character that is part of a line that has been folded onto additional screen lines is offset
from the display line column where the buffer line begins, not from the beginning of a particular display line.
The display cursor column in the display is based on the value of the current column, as follows, with each rule applied in
turn:
If the current column is after the last display line column used by the displayed line, the display cursor column shall be set
to the last display line column occupied by the last non- in the current line; otherwise, the display cursor column
shall be set to the current column.
If the character of which some portion is displayed in the display line column specified by the display cursor column requires
more than a single display line column:
If in text input mode, the display cursor column shall be adjusted to the first display line column in which any portion of that
character is displayed.
Otherwise, the display cursor column shall be adjusted to the last display line column in which any portion of that character is
displayed.
The current column shall not be changed by these adjustments to the display cursor column.
If an error occurs during the parsing or execution of a vi command:
The terminal shall be alerted. Execution of the vi command shall stop, and the cursor (for example, the current line and
column) shall not be further modified.
Unless otherwise specified by the following command sections, it is unspecified whether an informational message shall be
displayed.
Any partially entered vi command shall be discarded.
If the vi command resulted from a map expansion, all characters from that map expansion shall be discarded,
except as otherwise specified by the map command (see ex).
If the vi command resulted from the execution of a buffer, no further commands caused by the execution of the buffer
shall be executed.
Page Backwards
Synopsis:
[count] -B
If in open mode, the -B command shall behave identically to the z command. Otherwise, if the current line
is the first line of the edit buffer, it shall be an error.
If the window edit option is less than 3, display a screen where the last line of the display shall be some portion
of:
(current first line) -1
otherwise, display a screen where the first line of the display shall be some portion of:
(current first line) - count x ((window edit option) -2)
If this calculation would result in a line that is before the first line of the edit buffer, the first line of the display shall
display some portion of the first line of the edit buffer.
Current line: If no lines from the previous display remain on the screen, set to the last line of the display; otherwise,
set to (line - the number of new lines displayed on this screen).
Current column: Set to non-.
Scroll Forward
Synopsis:
[count] -D
If the current line is the last line of the edit buffer, it shall be an error.
If no count is specified, count shall default to the count associated with the previous -D
or -U command. If there was no previous -D or -U command, count shall default
to the value of the scroll edit option.
If in open mode, write lines starting with the line after the current line, until count lines or the last line of the
file have been written.
Current line: If the current line + count is past the last line of the edit buffer, set to the last line of the
edit buffer; otherwise, set to the current line + count.
Current column: Set to non-.
Scroll Forward by Line
Synopsis:
[count] -E
Display the line count lines after the last line currently displayed.
If the last line of the edit buffer is displayed, it shall be an error. If there is no line count lines after the last
line currently displayed, the last line of the display shall display some portion of the last line of the edit buffer.
Current line: Unchanged if the previous current character is displayed; otherwise, set to the first line displayed.
Current column: Unchanged.
Page Forward
Synopsis:
[count] -F
If in open mode, the -F command shall behave identically to the z command. Otherwise, if the current line
is the last line of the edit buffer, it shall be an error.
If the window edit option is less than 3, display a screen where the first line of the display shall be some portion
of:
(current last line) +1
otherwise, display a screen where the first line of the display shall be some portion of:
(current first line) + count x ((window edit option) -2)
If this calculation would result in a line that is after the last line of the edit buffer, the last line of the display shall
display some portion of the last line of the edit buffer.
Current line: If no lines from the previous display remain on the screen, set to the first line of the display;
otherwise, set to (line + the number of new lines displayed on this screen).
Current column: Set to non-.
Display Information
Synopsis:
-G
This command shall be equivalent to the ex file command.
Move Cursor Backwards
Synopsis:
[count] -H
[count] h
the current erase character (see stty)
If there are no characters before the current character on the current line, it shall be an error. If there are less than
count previous characters on the current line, count shall be adjusted to the number of previous characters on the
line.
If used as a motion command:
The text region shall be from the character before the starting cursor up to and including the countth character before
the starting cursor.
Any text copied to a buffer shall be in character mode.
If not used as a motion command:
Current line: Unchanged.
Current column: Set to (column - the number of columns occupied by count characters ending with the
previous current column).
Move Down
Synopsis:
[count]
[count] -J
[count] -M
[count] -N
[count] j
[count]
[count] +
If there are less than count lines after the current line in the edit buffer, it shall be an error.
If used as a motion command:
The text region shall include the starting line and the next count - 1 lines.
Any text copied to a buffer shall be in line mode.
If not used as a motion command:
Current line: Set to current line+ count.
Current column: Set to non- for the , -M, and + commands;
otherwise, unchanged.
Clear and Redisplay
Synopsis:
-L
If in open mode, clear the screen and redisplay the current line. Otherwise, clear and redisplay the screen.
Current line: Unchanged.
Current column: Unchanged.
Move Up
Synopsis:
[count] -P
[count] k
[count] -
If there are less than count lines before the current line in the edit buffer, it shall be an error.
If used as a motion command:
The text region shall include the starting line and the previous count lines.
Any text copied to a buffer shall be in line mode.
If not used as a motion command:
Current line: Set to current line - count.
Current column: Set to non- for the - command; otherwise, unchanged.
Redraw Screen
Synopsis:
-R
If any lines have been deleted from the display screen and flagged as deleted on the terminal using the @ convention (see
the beginning of the EXTENDED DESCRIPTION section), they shall be redisplayed to match the contents of the edit buffer.
It is unspecified whether lines flagged with @ because they do not fit on the terminal display shall be affected.
Current line: Unchanged.
Current column: Unchanged.
Scroll Backward
Synopsis:
[count] -U
If the current line is the first line of the edit buffer, it shall be an error.
If no count is specified, count shall default to the count associated with the previous -D
or -U command. If there was no previous -D or -U command, count shall default
to the value of the scroll edit option.
Current line: If count is greater than the current line, set to 1; otherwise, set to the current line -
count.
Current column: Set to non-.
Scroll Backward by Line
Synopsis:
[count] -Y
Display the line count lines before the first line currently displayed.
If the current line is the first line of the edit buffer, it shall be an error. If this calculation would result in a line that
is before the first line of the edit buffer, the first line of the display shall display some portion of the first line of the edit
buffer.
Current line: Unchanged if the previous current character is displayed; otherwise, set to the first line displayed.
Current column: Unchanged.
Edit the Alternate File
Synopsis:
-^
This command shall be equivalent to the ex edit command, with the alternate
pathname as its argument.
Terminate Command or Input Mode
Synopsis:
If a partial vi command (as defined by at least one, non-count character) has been entered, discard the
count and the command character(s).
Otherwise, if no command characters have been entered, and the  was the result of a map expansion, the terminal shall
be alerted and the  character shall be discarded, but it shall not be an error.
Otherwise, it shall be an error.
Current line: Unchanged.
Current column: Unchanged.
Search for tagstring
Synopsis:
-]
If the current character is not a word or , it shall be an error.
This command shall be equivalent to the ex tag command, with the argument to
that command defined as follows.
If the current character is a :
Skip all  characters after the cursor up to the end of the line.
If the end of the line is reached, it shall be an error.
Then, the argument to the ex tag command shall be the current character and all
subsequent characters, up to the first non-word character or the end of the line.
Move Cursor Forward
Synopsis:
[count]
[count] l  (ell)
If there are less than count non- characters after the cursor on the current line, count shall be
adjusted to the number of non- characters after the cursor on the line.
If used as a motion command:
If the current or countth character after the cursor is the last non- in the line, the text region shall
be comprised of the current character up to and including the last non- in the line. Otherwise, the text region
shall be from the current character up to, but not including, the countth character after the cursor.
Any text copied to a buffer shall be in character mode.
If not used as a motion command:
If there are no non- characters after the current character on the current line, it shall be an error.
Current line: Unchanged.
Current column: Set to the last column that displays any portion of the countth character after the current
character.
Replace Text with Results from Shell Command
Synopsis:
[count] ! motion shell-commands
If the motion command is the ! command repeated:
If the edit buffer is empty and no count was supplied, the command shall be the equivalent of the ex :read ! command, with the text input, and no text shall be copied to any
buffer.
Otherwise:
If there are less than count -1 lines after the current line in the edit buffer, it shall be an error.
The text region shall be from the current line up to and including the next count -1 lines.
Otherwise, the text region shall be the lines in which any character of the text region specified by the motion command
appear.
Any text copied to a buffer shall be in line mode.
This command shall be equivalent to the ex ! command for the specified
lines.
Move Cursor to End-of-Line
Synopsis:
[count] $
It shall be an error if there are less than (count -1) lines after the current line in the edit buffer.
If used as a motion command:
If count is 1:
It shall be an error if the line is empty.
Otherwise, the text region shall consist of all characters from the starting cursor to the last non- in the line,
inclusive, and any text copied to a buffer shall be in character mode.
Otherwise, if the starting cursor position is at or before the first non- in the line, the text region shall
consist of the current and the next count -1 lines, and any text saved to a buffer shall be in line mode.
Otherwise, the text region shall consist of all characters from the starting cursor to the last non- in the line
that is count -1 lines forward from the current line, and any text copied to a buffer shall be in character mode.
If not used as a motion command:
Current line: Set to the current line + count-1.
Current column: The current column is set to the last display line column of the last non- in the line, or
column position 1 if the line is empty.
The current column shall be adjusted to be on the last display line column of the last non- of the current line
as subsequent commands change the current line, until a command changes the current column.
Move to Matching Character
Synopsis:
%
If the character at the current position is not a parenthesis, bracket, or curly brace, search forward in the line to the first
one of those characters. If no such character is found, it shall be an error.
The matching character shall be the parenthesis, bracket, or curly brace matching the parenthesis, bracket, or curly brace,
respectively, that was at the current position or that was found on the current line.
Matching shall be determined as follows, for an open parenthesis:
Set a counter to 1.
Search forwards until a parenthesis is found or the end of the edit buffer is reached.
If the end of the edit buffer is reached, it shall be an error.
If an open parenthesis is found, increment the counter by 1.
If a close parenthesis is found, decrement the counter by 1.
If the counter is zero, the current character is the matching character.
Matching for a close parenthesis shall be equivalent, except that the search shall be backwards, from the starting character to
the beginning of the buffer, a close parenthesis shall increment the counter by 1, and an open parenthesis shall decrement the
counter by 1.
Matching for brackets and curly braces shall be equivalent, except that searching shall be done for open and close brackets or
open and close curly braces. It is implementation-defined whether other characters are searched for and matched as well.
If used as a motion command:
If the matching cursor was after the starting cursor in the edit buffer, and the starting cursor position was at or before the
first non- non- in the starting line, and the matching cursor position was at or after the last
non- non- in the matching line, the text region shall consist of the current line to the matching line,
inclusive, and any text copied to a buffer shall be in line mode.
If the matching cursor was before the starting cursor in the edit buffer, and the starting cursor position was at or after the
last non- non- in the starting line, and the matching cursor position was at or before the first
non- non- in the matching line, the text region shall consist of the current line to the matching line,
inclusive, and any text copied to a buffer shall be in line mode.
Otherwise, the text region shall consist of the starting character to the matching character, inclusive, and any text copied to
a buffer shall be in character mode.
If not used as a motion command:
Current line: Set to the line where the matching character is located.
Current column: Set to the last column where any portion of the matching character is displayed.
Repeat Substitution
Synopsis:
&
Repeat the previous substitution command. This command shall be equivalent to the ex
& command with the current line as its addresses, and without options, count, or flags.
Return to Previous Context at Beginning of Line
Synopsis:
' character
It shall be an error if there is no line in the edit buffer marked by character.
If used as a motion command:
If the starting cursor is after the marked cursor, then the locations of the starting cursor and the marked cursor in the edit
buffer shall be logically swapped.
The text region shall consist of the starting line up to and including the marked line, and any text copied to a buffer shall be
in line mode.
If not used as a motion command:
Current line: Set to the line referenced by the mark.
Current column: Set to non-.
Return to Previous Context
Synopsis:
` character
It shall be an error if the marked line is no longer in the edit buffer. If the marked line no longer contains a character in
the saved numbered character position, it shall be as if the marked position is the first non-.
If used as a motion command:
It shall be an error if the marked cursor references the same character in the edit buffer as the starting cursor.
If the starting cursor is after the marked cursor, then the locations of the starting cursor and the marked cursor in the edit
buffer shall be logically swapped.
If the starting line is empty or the starting cursor is at or before the first non- non- of the
starting line, and the marked cursor line is empty or the marked cursor references the first character of the marked cursor line,
the text region shall consist of all lines containing characters from the starting cursor to the line before the marked cursor
line, inclusive, and any text copied to a buffer shall be in line mode.
Otherwise, if the marked cursor line is empty or the marked cursor references a character at or before the first
non- non- of the marked cursor line, the region of text shall be from the starting cursor to the last
non- of the line before the marked cursor line, inclusive, and any text copied to a buffer shall be in character
mode.
Otherwise, the region of text shall be from the starting cursor (inclusive), to the marked cursor (exclusive), and any text
copied to a buffer shall be in character mode.
If not used as a motion command:
Current line: Set to the line referenced by the mark.
Current column: Set to the last column in which any portion of the character referenced by the mark is displayed.
Return to Previous Section
Synopsis:
[count] [[
Move the cursor backward through the edit buffer to the first character of the previous section boundary, count
times.
If used as a motion command:
If the starting cursor was at the first character of the starting line or the starting line was empty, and the first character
of the boundary was the first character of the boundary line, the text region shall consist of the current line up to and including
the line where the countth next boundary starts, and any text copied to a buffer shall be in line mode.
If the boundary was the last line of the edit buffer or the last non- of the last line of the edit buffer, the
text region shall consist of the last character in the edit buffer up to and including the starting character, and any text saved
to a buffer shall be in character mode.
Otherwise, the text region shall consist of the starting character up to but not including the first character in the
countth next boundary, and any text copied to a buffer shall be in character mode.
If not used as a motion command:
Current line: Set to the line where the countth next boundary in the edit buffer starts.
Current column: Set to the last column in which any portion of the first character of the countth next boundary is
displayed, or column position 1 if the line is empty.
Move to Next Section
Synopsis:
[count] ]]
Move the cursor forward through the edit buffer to the first character of the next section boundary, count times.
If used as a motion command:
If the starting cursor was at the first character of the starting line or the starting line was empty, and the first character
of the boundary was the first character of the boundary line, the text region shall consist of the current line up to and including
the line where the countth previous boundary starts, and any text copied to a buffer shall be in line mode.
If the boundary was the first line of the edit buffer, the text region shall consist of the first character in the edit buffer
up to but not including the starting character, and any text copied to a buffer shall be in character mode.
Otherwise, the text region shall consist of the first character in the countth previous section boundary up to but not
including the starting character, and any text copied to a buffer shall be in character mode.
If not used as a motion command:
Current line: Set to the line where the countth previous boundary in the edit buffer starts.
Current column: Set to the last column in which any portion of the first character of the countth previous
boundary is displayed, or column position 1 if the line is empty.
Move to First Non- Position on Current Line
Synopsis:
^
If used as a motion command:
If the line has no non- non- characters, or if the cursor is at the first non-
non- of the line, it shall be an error.
If the cursor is before the first non- non- of the line, the text region shall be comprised of the
current character, up to, but not including, the first non- non- of the line.
If the cursor is after the first non- non- of the line, the text region shall be from the character
before the starting cursor up to and including the first non- non- of the line.
Any text copied to a buffer shall be in character mode.
If not used as a motion command:
Current line: Unchanged.
Current column: Set to non-.
Current and Line Above
Synopsis:
[count] _
If there are less than count -1 lines after the current line in the edit buffer, it shall be an error.
If used as a motion command:
If count is less than 2, the text region shall be the current line.
Otherwise, the text region shall include the starting line and the next count -1 lines.
Any text copied to a buffer shall be in line mode.
If not used as a motion command:
Current line: Set to current line + count -1.
Current column: Set to non-.
Move Back to Beginning of Sentence
Synopsis:
[count] (
Move backward to the beginning of a sentence. This command shall be equivalent to the [[ command, with the exception that
sentence boundaries shall be used instead of section boundaries.
Move Forward to Beginning of Sentence
Synopsis:
[count] )
Move forward to the beginning of a sentence. This command shall be equivalent to the ]] command, with the exception that
sentence boundaries shall be used instead of section boundaries.
Move Back to Preceding Paragraph
Synopsis:
[count] {
Move back to the beginning of the preceding paragraph. This command shall be equivalent to the [[ command, with the
exception that paragraph boundaries shall be used instead of section boundaries.
Move Forward to Next Paragraph
Synopsis:
[count] }
Move forward to the beginning of the next paragraph. This command shall be equivalent to the ]] command, with the
exception that paragraph boundaries shall be used instead of section boundaries.
Move to Specific Column Position
Synopsis:
[count] |
For the purposes of this command, lines that are too long for the current display and that have been folded shall be treated as
having a single, 1-based, number of columns.
If there are less than count columns in which characters from the current line are displayed on the screen, count
shall be adjusted to be the last column in which any portion of the line is displayed on the screen.
If used as a motion command:
If the line is empty, or the cursor character is the same as the character on the countth column of the line, it shall be
an error.
If the cursor is before the countth column of the line, the text region shall be comprised of the current character, up
to but not including the character on the countth column of the line.
If the cursor is after the countth column of the line, the text region shall be from the character before the starting
cursor up to and including the character on the countth column of the line.
Any text copied to a buffer shall be in character mode.
If not used as a motion command:
Current line: Unchanged.
Current column: Set to the last column in which any portion of the character that is displayed in the count column
of the line is displayed.
Reverse Find Character
Synopsis:
[count] ,
If the last F, f, T, or t command was F, f, T, or t, this command shall
be equivalent to an f, F, t, or T command, respectively, with the specified count and the same
search character.
If there was no previous F, f, T, or t command, it shall be an error.
Repeat
Synopsis:
[count] .
Repeat the last !, , A, C, D, I, J, O, P,
R, S, X, Y, a, c, d, i, o, p, r, s, x,
y, or ~ command. It shall be an error if none of these commands have been executed. Commands (other than commands
that enter text input mode) executed as a result of map expansions, shall not change the value of the last repeatable command.
Repeated commands with associated motion commands shall repeat the motion command as well; however, any specified count
shall replace the count(s) that were originally specified to the repeated command or its associated motion command.
If the motion component of the repeated command is f, F, t, or T, the repeated command shall not set
the remembered search character for the ; and , commands.
If the repeated command is p or P, and the buffer associated with that command was a numeric buffer named with a
number less than 9, the buffer associated with the repeated command shall be set to be the buffer named by the name of the previous
buffer logically incremented by 1.
If the repeated character is a text input command, the input text associated with that command is repeated literally:
Input characters are neither macro or abbreviation-expanded.
Input characters are not interpreted in any special way with the exception that , , and
-T behave as described in Input Mode Commands in vi.
Current line: Set as described for the repeated command.
Current column: Set as described for the repeated command.
Find Regular Expression
Synopsis:
/
If the input line contains no non- characters, it shall be equivalent to a line containing only the last regular
expression encountered. The enhanced regular expressions supported by vi are described in Regular Expressions in ex.
Otherwise, the line shall be interpreted as one or more regular expressions, optionally followed by an address offset or a
vi z command.
If the regular expression is not the last regular expression on the line, or if a line offset or z command is specified,
the regular expression shall be terminated by an unescaped '/' character, which shall not be used as part of the regular
expression. If the regular expression is not the first regular expression on the line, it shall be preceded by zero or more
characters, a , zero or more  characters, and a leading '/' character, which
shall not be interpreted as part of the regular expression. It shall be an error to precede any regular expression with any
characters other than these.
Each search shall begin from the character after the first character of the last match (or, if it is the first search, after the
cursor). If the wrapscan edit option is set, the search shall continue to the character before the starting cursor
character; otherwise, to the end of the edit buffer. It shall be an error if any search fails to find a match, and an informational
message to this effect shall be displayed.
An optional address offset (see Addressing in ex) can be specified
after the last regular expression by including a trailing '/' character after the regular expression and specifying the
address offset. This offset shall be from the line containing the match for the last regular expression specified. It shall be an
error if the line offset would indicate a line address less than 1 or greater than the last line in the edit buffer. An address
offset of zero shall be supported. It shall be an error to follow the address offset with any other characters than
characters.
If not used as a motion command, an optional z command (see Redraw Window) can be
specified after the last regular expression by including a trailing '/' character after the regular expression, zero or
more  characters, a 'z', zero or more  characters, an optional new window edit option
value, zero or more  characters, and a location character. The effect shall be as if the z command was executed
after the / command. It shall be an error to follow the z command with any other characters than
characters.
The remembered search direction shall be set to forward.
If used as a motion command:
It shall be an error if the last match references the same character in the edit buffer as the starting cursor.
If any address offset is specified, the last match shall be adjusted by the specified offset as described previously.
If the starting cursor is after the last match, then the locations of the starting cursor and the last match in the edit buffer
shall be logically swapped.
If any address offset is specified, the text region shall consist of all lines containing characters from the starting cursor to
the last match line, inclusive, and any text copied to a buffer shall be in line mode.
Otherwise, if the starting line is empty or the starting cursor is at or before the first non- non-
of the starting line, and the last match line is empty or the last match starts at the first character of the last match line, the
text region shall consist of all lines containing characters from the starting cursor to the line before the last match line,
inclusive, and any text copied to a buffer shall be in line mode.
Otherwise, if the last match line is empty or the last match begins at a character at or before the first non-
non- of the last match line, the region of text shall be from the current cursor to the last non- of
the line before the last match line, inclusive, and any text copied to a buffer shall be in character mode.
Otherwise, the region of text shall be from the current cursor (inclusive), to the first character of the last match
(exclusive), and any text copied to a buffer shall be in character mode.
If not used as a motion command:
Current line: If a match is found, set to the last matched line plus the address offset, if any; otherwise,
unchanged.
Current column: Set to the last column on which any portion of the first character in the last matched string is
displayed, if a match is found; otherwise, unchanged.
Move to First Character in Line
Synopsis:
0  (zero)
Move to the first character on the current line. The character '0' shall not be interpreted as a command if it is
immediately preceded by a digit.
If used as a motion command:
If the cursor character is the first character in the line, it shall be an error.
The text region shall be from the character before the cursor character up to and including the first character in the line.
Any text copied to a buffer shall be in character mode.
If not used as a motion command:
Current line: Unchanged.
Current column: The last column in which any portion of the first character in the line is displayed, or if the line is
empty, unchanged.
Execute an ex Command
Synopsis:
:
Execute one or more ex commands.
If any portion of the screen other than the last line of the screen was overwritten by any ex command (except shell), vi shall display a message indicating that it is waiting
for an input from the user, and shall then read a character. This action may also be taken for other, unspecified reasons.
If the next character entered is a ':', another ex command shall be accepted
and executed. Any other character shall cause the screen to be refreshed and vi shall return to command mode.
Current line: As specified for the ex command.
Current column: As specified for the ex command.
Repeat Find
Synopsis:
[count] ;
This command shall be equivalent to the last F, f, T, or t command, with the specified count,
and with the same search character used for the last F, f, T, or t command. If there was no previous
F, f, T, or t command, it shall be an error.
Shift Left
Synopsis:
[count] .
Shift Right
Synopsis:
[count] > motion
If the motion command is the > command repeated:
If there are less than count -1 lines after the current line in the edit buffer, it shall be an error.
The text region shall be from the current line, up to and including the next count -1 lines.
Shift any line with characters in the text region specified by the count and motion command one shiftwidth (see the
ex shiftwidth option) away from the start of the line, as described by the
ex > command. The unshifted lines shall be copied into the unnamed buffer in
line mode.
Current line: If the motion was from the current cursor position toward the end of the edit buffer, unchanged. Otherwise,
set to the first line in the edit buffer that is part of the text region specified by the motion command.
Current column: Set to non-.
Scan Backwards for Regular Expression
Synopsis:
?
Scan backwards; the ? command shall be equivalent to the / command (see Find Regular
Expression) with the following exceptions:
The input prompt shall be a '?'.
Each search shall begin from the character before the first character of the last match (or, if it is the first search, the
character before the cursor character).
The search direction shall be from the cursor toward the beginning of the edit buffer, and the wrapscan edit option shall
affect whether the search wraps to the end of the edit buffer and continues.
The remembered search direction shall be set to backward.
Execute
Synopsis:
@buffer
If the buffer is specified as @, the last buffer executed shall be used. If no previous buffer has been executed,
it shall be an error.
Behave as if the contents of the named buffer were entered as standard input. After each line of a line-mode buffer, and all but
the last line of a character mode buffer, behave as if a  were entered as standard input.
If an error occurs during this process, an error message shall be written, and no more characters resulting from the execution
of this command shall be processed.
If a count is specified, behave as if that count were entered as user input before the characters from the @
buffer were entered.
Current line: As specified for the individual commands.
Current column: As specified for the individual commands.
Reverse Case
Synopsis:
[count] ~
Reverse the case of the current character and the next count -1 characters, such that lowercase characters that have
uppercase counterparts shall be changed to uppercase characters, and uppercase characters that have lowercase counterparts shall be
changed to lowercase characters, as prescribed by the current locale. No other characters shall be affected by this command.
If there are less than count -1 characters after the cursor in the edit buffer, count shall be adjusted to the
number of characters after the cursor in the edit buffer minus 1.
For the purposes of this command, the next character after the last non- on the line shall be the next character
in the edit buffer.
Current line: Set to the line including the (count-1)th character after the cursor.
Current column: Set to the last column in which any portion of the (count-1)th character after the cursor is
displayed.
Append
Synopsis:
[count] a
Enter text input mode after the current cursor position. No characters already in the edit buffer shall be affected by this
command. A count shall cause the input text to be appended count -1 more times to the end of the input.
Current line/column: As specified for the text input commands (see Input Mode Commands in
vi).
Append at End-of-Line
Synopsis:
[count] A
This command shall be equivalent to the vi command:
$ [ count ] a
(see Append).
Move Backward to Preceding Word
Synopsis:
[count] b
With the exception that words are used as the delimiter instead of bigwords, this command shall be equivalent to the B
command.
Move Backward to Preceding Bigword
Synopsis:
[count] B
If the edit buffer is empty or the cursor is on the first character of the edit buffer, it shall be an error. If less than
count bigwords begin between the cursor and the start of the edit buffer, count shall be adjusted to the number of
bigword beginnings between the cursor and the start of the edit buffer.
If used as a motion command:
The text region shall be from the first character of the countth previous bigword beginning up to but not including the
cursor character.
Any text copied to a buffer shall be in character mode.
If not used as a motion command:
Current line: Set to the line containing the current column.
Current column: Set to the last column upon which any part of the first character of the countth previous bigword
is displayed.
Change
Synopsis:
[buffer][count] c motion
If the motion command is the c command repeated:
The buffer text shall be in line mode.
If there are less than count -1 lines after the current line in the edit buffer, it shall be an error.
The text region shall be from the current line up to and including the next count -1 lines.
Otherwise, the buffer text mode and text region shall be as specified by the motion command.
The replaced text shall be copied into buffer, if specified, and into the unnamed buffer. If the text to be replaced
contains characters from more than a single line, or the buffer text is in line mode, the replaced text shall be copied into the
numeric buffers as well.
If the buffer text is in line mode:
Any lines that contain characters in the region shall be deleted, and the editor shall enter text input mode at the beginning of
a new line which shall replace the first line deleted.
If the autoindent edit option is set, autoindent characters equal to the autoindent characters on the first
line deleted shall be inserted as if entered by the user.
Otherwise, if characters from more than one line are in the region of text:
The text shall be deleted.
Any text remaining in the last line in the text region shall be appended to the first line in the region, and the last line in
the region shall be deleted.
The editor shall enter text input mode after the last character not deleted from the first line in the text region, if any;
otherwise, on the first column of the first line in the region.
Otherwise:
If the glyph for '$' is smaller than the region, the end of the region shall be marked with a '$'.
The editor shall enter text input mode, overwriting the region of text.
Current line/column: As specified for the text input commands (see Input Mode Commands in
vi).
Change to End-of-Line
Synopsis:
[buffer][count] C
This command shall be equivalent to the vi command:
[buffer][count] c$
See the c command.
Delete
Synopsis:
[buffer][count] d motion
If the motion command is the d command repeated:
The buffer text shall be in line mode.
If there are less than count -1 lines after the current line in the edit buffer, it shall be an error.
The text region shall be from the current line up to and including the next count -1 lines.
Otherwise, the buffer text mode and text region shall be as specified by the motion command.
If in open mode, and the current line is deleted, and the line remains on the display, an '@' character shall be
displayed as the first glyph of that line.
Delete the region of text into buffer, if specified, and into the unnamed buffer. If the text to be deleted contains
characters from more than a single line, or the buffer text is in line mode, the deleted text shall be copied into the numeric
buffers, as well.
Current line: Set to the first text region line that appears in the edit buffer, unless that line has been deleted, in
which case it shall be set to the last line in the edit buffer, or line 1 if the edit buffer is empty.
Current column:
If the line is empty, set to column position 1.
Otherwise, if the buffer text is in line mode or the motion was from the cursor toward the end of the edit buffer:
If a character from the current line is displayed in the current column, set to the last column that displays any portion of
that character.
Otherwise, set to the last column in which any portion of any character in the line is displayed.
Otherwise, if a character is displayed in the column that began the text region, set to the last column that displays any
portion of that character.
Otherwise, set to the last column in which any portion of any character in the line is displayed.
Delete to End-of-Line
Synopsis:
[buffer] D
Delete the text from the current position to the end of the current line; equivalent to the vi command:
[buffer] d$
Move to End-of-Word
Synopsis:
[count] e
With the exception that words are used instead of bigwords as the delimiter, this command shall be equivalent to the E
command.
Move to End-of-Bigword
Synopsis:
[count] E
If the edit buffer is empty it shall be an error. If less than count bigwords end between the cursor and the end of the
edit buffer, count shall be adjusted to the number of bigword endings between the cursor and the end of the edit buffer.
If used as a motion command:
The text region shall be from the last character of the countth next bigword up to and including the cursor
character.
Any text copied to a buffer shall be in character mode.
If not used as a motion command:
Current line: Set to the line containing the current column.
Current column: Set to the last column upon which any part of the last character of the countth next bigword is
displayed.
Find Character in Current Line (Forward)
Synopsis:
[count] f character
It shall be an error if count occurrences of the character do not occur after the cursor in the line.
If used as a motion command:
The text range shall be from the cursor character up to and including the countth occurrence of the specified character
after the cursor.
Any text copied to a buffer shall be in character mode.
If not used as a motion command:
Current line: Unchanged.
Current column: Set to the last column in which any portion of the countth occurrence of the specified character
after the cursor appears in the line.
Find Character in Current Line (Reverse)
Synopsis:
[count] F character
It shall be an error if count occurrences of the character do not occur before the cursor in the line.
If used as a motion command:
The text region shall be from the countth occurrence of the specified character before the cursor, up to, but not
including the cursor character.
Any text copied to a buffer shall be in character mode.
If not used as a motion command:
Current line: Unchanged.
Current column: Set to the last column in which any portion of the countth occurrence of the specified character
before the cursor appears in the line.
Move to Line
Synopsis:
[count] G
If count is not specified, it shall default to the last line of the edit buffer. If count is greater than the last
line of the edit buffer, it shall be an error.
If used as a motion command:
The text region shall be from the cursor line up to and including the specified line.
Any text copied to a buffer shall be in line mode.
If not used as a motion command:
Current line: Set to count if count is specified; otherwise, the last line.
Current column: Set to non-.
Move to Top of Screen
Synopsis:
[count] H
If the beginning of the line count greater than the first line of which any portion appears on the display does not
exist, it shall be an error.
If used as a motion command:
If in open mode, the text region shall be the current line.
Otherwise, the text region shall be from the starting line up to and including (the first line of the display + count
-1).
Any text copied to a buffer shall be in line mode.
If not used as a motion command:
If in open mode, this command shall set the current column to non- and do nothing else.
Otherwise, it shall set the current line and current column as follows.
Current line: Set to (the first line of the display + count -1).
Current column: Set to non-.
Insert Before Cursor
Synopsis:
[count] i
Enter text input mode before the current cursor position. No characters already in the edit buffer shall be affected by this
command. A count shall cause the input text to be appended count -1 more times to the end of the input.
Current line/column: As specified for the text input commands (see Input Mode Commands in
vi).
Insert at Beginning of Line
Synopsis:
[count] I
This command shall be equivalent to the vi command ^[count]i.
Join
Synopsis:
[count] J
If the current line is the last line in the edit buffer, it shall be an error.
This command shall be equivalent to the ex join command with no addresses, and
an ex command count value of 1 if count was not specified or if a
count of 1 was specified, and an ex command count value of count -1
for any other value of count, except that the current line and column shall be set as follows.
Current line: Unchanged.
Current column: The last column in which any portion of the character following the last character in the initial line is
displayed, or the last non- in the line if no characters were appended.
Move to Bottom of Screen
Synopsis:
[count] L
If the beginning of the line count less than the last line of which any portion appears on the display does not exist, it
shall be an error.
If used as a motion command:
If in open mode, the text region shall be the current line.
Otherwise, the text region shall include all lines from the starting cursor line to (the last line of the display -(count
-1)).
Any text copied to a buffer shall be in line mode.
If not used as a motion command:
If in open mode, this command shall set the current column to non- and do nothing else.
Otherwise, it shall set the current line and current column as follows.
Current line: Set to (the last line of the display -(count -1)).
Current column: Set to non-.
Mark Position
Synopsis:
m letter
This command shall be equivalent to the ex mark command with the specified
character as an argument.
Move to Middle of Screen
Synopsis:
M
The middle line of the display shall be calculated as follows:
(the top line of the display) + (((number of lines displayed) +1) /2) -1
If used as a motion command:
If in open mode, the text region shall be the current line.
Otherwise, the text region shall include all lines from the starting cursor line up to and including the middle line of the
display.
Any text copied to a buffer shall be in line mode.
If not used as a motion command:
If in open mode, this command shall set the current column to non- and do nothing else.
Otherwise, it shall set the current line and current column as follows.
Current line: Set to the middle line of the display.
Current column: Set to non-.
Repeat Regular Expression Find (Forward)
Synopsis:
n
If the remembered search direction was forward, the n command shall be equivalent to the vi / command with
no characters entered by the user. Otherwise, it shall be equivalent to the vi ? command with no characters entered
by the user.
If the n command is used as a motion command for the ! command, the editor shall not enter text input mode on the
last line on the screen, and shall behave as if the user entered a single '!' character as the text input.
Repeat Regular Expression Find (Reverse)
Synopsis:
N
Scan for the next match of the last pattern given to / or ?, but in the reverse direction; this is the reverse of
n.
If the remembered search direction was forward, the N command shall be equivalent to the vi ? command with
no characters entered by the user. Otherwise, it shall be equivalent to the vi / command with no characters entered
by the user. If the N command is used as a motion command for the ! command, the editor shall not enter text input
mode on the last line on the screen, and shall behave as if the user entered a single ! character as the text input.
Insert Empty Line Below
Synopsis:
o
Enter text input mode in a new line appended after the current line. A count shall cause the input text to be appended
count -1 more times to the end of the already added text, each time starting on a new, appended line.
Current line/column: As specified for the text input commands (see Input Mode Commands in
vi).
Insert Empty Line Above
Synopsis:
O
Enter text input mode in a new line inserted before the current line. A count shall cause the input text to be appended
count -1 more times to the end of the already added text, each time starting on a new, appended line.
Current line/column: As specified for the text input commands (see Input Mode Commands in
vi).
Put from Buffer Following
Synopsis:
[buffer] p
If no buffer is specified, the unnamed buffer shall be used.
If the buffer text is in line mode, the text shall be appended below the current line, and each line of the buffer shall become
a new line in the edit buffer. A count shall cause the buffer text to be appended count -1 more times to the end of
the already added text, each time starting on a new, appended line.
If the buffer text is in character mode, the text shall be appended into the current line after the cursor, and each line of the
buffer other than the first and last shall become a new line in the edit buffer. A count shall cause the buffer text to be
appended count -1 more times to the end of the already added text, each time starting after the last added character.
Current line: If the buffer text is in line mode, set the line to line +1; otherwise, unchanged.
Current column: If the buffer text is in line mode:
If there is a non- in the first line of the buffer, set to the last column on which any portion of the first
non- in the line is displayed.
If there is no non- in the first line of the buffer, set to the last column on which any portion of the last
non- in the first line of the buffer is displayed.
If the buffer text is in character mode:
If the text in the buffer is from more than a single line, then set to the last column on which any portion of the first
character from the buffer is displayed.
Otherwise, if the buffer is the unnamed buffer, set to the last column on which any portion of the last character from the
buffer is displayed.
Otherwise, set to the first column on which any portion of the first character from the buffer is displayed.
Put from Buffer Before
Synopsis:
[buffer] P
If no buffer is specified, the unnamed buffer shall be used.
If the buffer text is in line mode, the text shall be inserted above the current line, and each line of the buffer shall become
a new line in the edit buffer. A count shall cause the buffer text to be appended count -1 more times to the end of
the already added text, each time starting on a new, appended line.
If the buffer text is in character mode, the text shall be inserted into the current line before the cursor, and each line of
the buffer other than the first and last shall become a new line in the edit buffer. A count shall cause the buffer text to
be appended count -1 more times to the end of the already added text, each time starting after the last added character.
Current line: Unchanged.
Current column: If the buffer text is in line mode:
If there is a non- in the first line of the buffer, set to the last column on which any portion of that character
is displayed.
If there is no non- in the first line of the buffer, set to the last column on which any portion of the last
non- in the first line of the buffer is displayed.
If the buffer text is in character mode:
If the text in the buffer is from more than a single line, then set to the last column on which any portion of the first
character from the buffer is displayed.
Otherwise, if the buffer is the unnamed buffer, set to the last column on which any portion of the last character from the
buffer is displayed.
Otherwise, set to the first column on which any portion of the first character from the buffer is displayed.
Enter ex Mode
Synopsis:
Q
Leave visual or open mode and enter ex command mode.
Current line: Unchanged.
Current column: Unchanged.
Replace Character
Synopsis:
[count] r character
Replace the count characters at and after the cursor with the specified character. If there are less than count
non- characters at and after the cursor on the line, it shall be an error.
If character is -V, any next character other than the  shall be stripped of any special meaning
and used as a literal character.
If character is , no replacement shall be made and the current line and current column shall be unchanged.
If character is  or , count new lines shall be appended to the current line. All
but the last of these lines shall be empty. count characters at and after the cursor shall be discarded, and any remaining
characters after the cursor in the current line shall be moved to the last of the new lines. If the autoindent edit option
is set, they shall be preceded by the same number of autoindent characters found on the line from which the command was
executed.
Current line: Unchanged unless the replacement character is a  or , in which case
it shall be set to line + count.
Current column: Set to the last column position on which a portion of the last replaced character is displayed, or if the
replacement character caused new lines to be created, set to non-.
Replace Characters
Synopsis:
R
Enter text input mode at the current cursor position possibly replacing text on the current line. A count shall cause the
input text to be appended count -1 more times to the end of the input.
Current line/column: As specified for the text input commands (see Input Mode Commands in
vi).
Substitute Character
Synopsis:
[buffer][count] s
This command shall be equivalent to the vi command:
[buffer][count] c
Substitute Lines
Synopsis:
[buffer][count] S
This command shall be equivalent to the vi command:
[buffer][count] c_
Move Cursor to Before Character (Forward)
Synopsis:
[count] t character
It shall be an error if count occurrences of the character do not occur after the cursor in the line.
If used as a motion command:
The text region shall be from the cursor up to but not including the countth occurrence of the specified character after
the cursor.
Any text copied to a buffer shall be in character mode.
If not used as a motion command:
Current line: Unchanged.
Current column: Set to the last column in which any portion of the character before the countth occurrence of the
specified character after the cursor appears in the line.
Move Cursor to After Character (Reverse)
Synopsis:
[count] T character
It shall be an error if count occurrences of the character do not occur before the cursor in the line.
If used as a motion command:
If the character before the cursor is the specified character, it shall be an error.
The text region shall be from the character before the cursor up to but not including the countth occurrence of the
specified character before the cursor.
Any text copied to a buffer shall be in character mode.
If not used as a motion command:
Current line: Unchanged.
Current column: Set to the last column in which any portion of the character after the countth occurrence of the
specified character before the cursor appears in the line.
Undo
Synopsis:
u
This command shall be equivalent to the ex undo command except that the current
line and current column shall be set as follows:
Current line: Set to the first line added or changed if any; otherwise, move to the line preceding any deleted text if
one exists; otherwise, move to line 1.
Current column: If undoing an ex command, set to the first
non-.
Otherwise, if undoing a text input command:
If the command was a C, c, O, o, R, S, or s command, the current column shall
be set to the value it held when the text input command was entered.
Otherwise, set to the last column in which any portion of the first character after the deleted text is displayed, or, if no
non- characters follow the text deleted from this line, set to the last column in which any portion of the last
non- in the line is displayed, or 1 if the line is empty.
Otherwise, if a single line was modified (that is, not added or deleted) by the u command:
If text was added or changed, set to the last column in which any portion of the first character added or changed is
displayed.
If text was deleted, set to the last column in which any portion of the first character after the deleted text is displayed, or,
if no non- characters follow the deleted text, set to the last column in which any portion of the last
non- in the line is displayed, or 1 if the line is empty.
Otherwise, set to non-.
Undo Current Line
Synopsis:
U
Restore the current line to its state immediately before the most recent time that it became the current line.
Current line: Unchanged.
Current column: Set to the first column in the line in which any portion of the first character in the line is
displayed.
Move to Beginning of Word
Synopsis:
[count] w
With the exception that words are used as the delimiter instead of bigwords, this command shall be equivalent to the W
command.
Move to Beginning of Bigword
Synopsis:
[count] W
If the edit buffer is empty, it shall be an error. If there are less than count bigwords between the cursor and the end
of the edit buffer, count shall be adjusted to move the cursor to the last bigword in the edit buffer.
If used as a motion command:
If the associated command is c, count is 1, and the cursor is on a , the region of text shall be the
current character and no further action shall be taken.
If there are less than count bigwords between the cursor and the end of the edit buffer, then the command shall succeed,
and the region of text shall include the last character of the edit buffer.
If there are  characters or an end-of-line that precede the countth bigword, and the associated command is
c, the region of text shall be up to and including the last character before the preceding  characters or
end-of-line.
If there are  characters or an end-of-line that precede the bigword, and the associated command is d or
y, the region of text shall be up to and including the last  before the start of the bigword or
end-of-line.
Any text copied to a buffer shall be in character mode.
If not used as a motion command:
If the cursor is on the last character of the edit buffer, it shall be an error.
Current line: Set to the line containing the current column.
Current column: Set to the last column in which any part of the first character of the countth next bigword is
displayed.
Delete Character at Cursor
Synopsis:
[buffer][count] x
Delete the count characters at and after the current character into buffer, if specified, and into the unnamed
buffer.
If the line is empty, it shall be an error. If there are less than count non- characters at and after the
cursor on the current line, count shall be adjusted to the number of non- characters at and after the
cursor.
Current line: Unchanged.
Current column: If the line is empty, set to column position 1. Otherwise, if there were count or less
non- characters at and after the cursor on the current line, set to the last column that displays any part of the
last non- of the line. Otherwise, unchanged.
Delete Character Before Cursor
Synopsis:
[buffer][count] X
Delete the count characters before the current character into buffer, if specified, and into the unnamed
buffer.
If there are no characters before the current character on the current line, it shall be an error. If there are less than
count previous characters on the current line, count shall be adjusted to the number of previous characters on the
line.
Current line: Unchanged.
Current column: Set to (current column - the width of the deleted characters).
Yank
Synopsis:
[buffer][count] y motion
Copy (yank) the region of text into buffer, if specified, and into the unnamed buffer.
If the motion command is the y command repeated:
The buffer shall be in line mode.
If there are less than count -1 lines after the current line in the edit buffer, it shall be an error.
The text region shall be from the current line up to and including the next count -1 lines.
Otherwise, the buffer text mode and text region shall be as specified by the motion command.
Current line: If the motion was from the current cursor position toward the end of the edit buffer, unchanged. Otherwise,
set to the first line in the edit buffer that is part of the text region specified by the motion command.
Current column:
If the motion was from the current cursor position toward the end of the edit buffer, unchanged.
Otherwise, if the current line is empty, set to column position 1.
Otherwise, set to the last column that displays any part of the first character in the file that is part of the text region
specified by the motion command.
Yank Current Line
Synopsis:
[buffer][count] Y
This command shall be equivalent to the vi command:
[buffer][count] y_
Redraw Window
If in open mode, the z command shall have the Synopsis:
Synopsis:
[count] z
If count is not specified, it shall default to the window edit option -1. The z command shall be equivalent
to the ex z command, with a type character of = and a count of
count -2, except that the current line and current column shall be set as follows, and the window edit option shall
not be affected. If the calculation for the count argument would result in a negative number, the count argument to
the ex z command shall be zero. A blank line shall be written after the last line
is written.
Current line: Unchanged.
Current column: Unchanged.
If not in open mode, the z command shall have the following Synopsis:
Synopsis:
[line] z [count] character
If line is not specified, it shall default to the current line. If line is specified, but is greater than the
number of lines in the edit buffer, it shall default to the number of lines in the edit buffer.
If count is specified, the value of the window edit option shall be set to count (as described in the
ex window command), and the screen shall be redrawn.
line shall be placed as specified by the following characters:
,
Place the beginning of the line on the first line of the display.
.
Place the beginning of the line in the center of the display. The middle line of the display shall be calculated as described
for the M command.
-
Place an unspecified portion of the line on the last line of the display.
+
If line was specified, equivalent to the  case. If line was not specified, display a screen where
the first line of the display shall be (current last line) +1. If there are no lines after the last line in the display, it shall
be an error.
^
If line was specified, display a screen where the last line of the display shall contain an unspecified portion of the
first line of a display that had an unspecified portion of the specified line on the last line of the display. If this calculation
results in a line before the beginning of the edit buffer, display the first screen of the edit buffer.
Otherwise, display a screen where the last line of the display shall contain an unspecified portion of (current first line -1).
If this calculation results in a line before the beginning of the edit buffer, it shall be an error.
Current line: If line and the '^' character were specified:
If the first screen was displayed as a result of the command attempting to display lines before the beginning of the edit
buffer: if the first screen was already displayed, unchanged; otherwise, set to (current first line -1).
Otherwise, set to the last line of the display.
If line and the '+' character were specified, set to the first line of the display.
Otherwise, if line was specified, set to line.
Otherwise, unchanged.
Current column: Set to non-.
Exit
Synopsis:
ZZ
This command shall be equivalent to the ex xit command with no addresses,
trailing !, or filename (see the ex xit command).
Input Mode Commands in vi
In text input mode, the current line shall consist of zero or more of the following categories, plus the terminating
:
Characters preceding the text input entry point
Characters in this category shall not be modified during text input mode.
autoindent characters
autoindent characters shall be automatically inserted into each line that is created in text input mode, either as a
result of entering a  or  while in text input mode, or as an effect of the command itself;
for example, O or o (see the ex autoindent command), as if entered
by the user.
It shall be possible to erase autoindent characters with the -D command; it is unspecified whether they
can be erased by -H, -U, and -W characters. Erasing any autoindent character
turns the glyph into erase-columns and deletes the character from the edit buffer, but does not change its representation on the
screen.
Text input characters
Text input characters are the characters entered by the user. Erasing any text input character turns the glyph into
erase-columns and deletes the character from the edit buffer, but does not change its representation on the screen.
Each text input character entered by the user (that does not have a special meaning) shall be treated as follows:
The text input character shall be appended to the last character in the edit buffer from the first, second, or third
categories.
If there are no erase-columns on the screen, the text input command was the R command, and characters in the fifth
category from the original line follow the cursor, the next such character shall be deleted from the edit buffer. If the
slowopen edit option is not set, the corresponding glyph on the screen shall become erase-columns.
If there are erase-columns on the screen, as many columns as they occupy, or as are necessary, shall be overwritten to display
the text input character. (If only part of a multi-column glyph is overwritten, the remainder shall be left on the screen, and
continue to be treated as erase-columns; it is unspecified whether the remainder of the glyph is modified in any way.)
If additional display line columns are needed to display the text input character:
If the slowopen edit option is set, the text input characters shall be displayed on subsequent display line columns,
overwriting any characters displayed in those columns.
Otherwise, any characters currently displayed on or after the column on the display line where the text input character is to be
displayed shall be pushed ahead the number of display line columns necessary to display the rest of the text input character.
Erase-columns
Erase-columns are not logically part of the edit buffer, appearing only on the screen, and may be overwritten on the screen by
subsequent text input characters. When text input mode ends, all erase-columns shall no longer appear on the screen.
Erase-columns are initially the region of text specified by the c command (see Change);
however, erasing autoindent or text input characters causes the glyphs of the erased characters to be treated as
erase-columns.
Characters following the text region for the c command, or the text input entry point for all other commands
Characters in this category shall not be modified during text input mode, except as specified in category 3.b. for the R
text input command, or as  characters deleted when a  or  is entered.
It is unspecified whether it is an error to attempt to erase past the beginning of a line that was created by the entry of a
or  during text input mode. If it is not an error, the editor shall behave as if the erasing
character was entered immediately after the last text input character entered on the previous line, and all of the
non- characters on the current line shall be treated as erase-columns.
When text input mode is entered, or after a text input mode character is entered (except as specified for the special characters
below), the cursor shall be positioned as follows:
On the first column that displays any part of the first erase-column, if one exists
Otherwise, if the slowopen edit option is set, on the first display line column after the last character in the first,
second, or third categories, if one exists
Otherwise, the first column that displays any part of the first character in the fifth category, if one exists
Otherwise, the display line column after the last character in the first, second, or third categories, if one exists
Otherwise, on column position 1
The characters that are updated on the screen during text input mode are unspecified, other than that the last text input
character shall always be updated, and, if the slowopen edit option is not set, the current cursor character shall always be
updated.
The following specifications are for command characters entered during text input mode.
NUL
Synopsis:
NUL
If the first character of the text input is a NUL, the most recently input text shall be input as if entered by the user, and
then text input mode shall be exited. The text shall be input literally; that is, characters are neither macro or abbreviation
expanded, nor are any characters interpreted in any special manner. It is unspecified whether implementations shall support more
than 256 bytes of remembered input text.
-D
Synopsis:
-D
The -D character shall have no special meaning when in text input mode for a line-oriented command (see Command Descriptions in vi).
This command need not be supported on block-mode terminals.
If the cursor does not follow an autoindent character, or an autoindent character and a '0' or
'^' character:
If the cursor is in column position 1, the -D character shall be discarded and no further action taken.
Otherwise, the -D character shall have no special meaning.
If the last input character was a '0', the cursor shall be moved to column position 1.
Otherwise, if the last input character was a '^', the cursor shall be moved to column position 1. In addition, the
autoindent level for the next input line shall be derived from the same line from which the autoindent level for the
current input line was derived.
Otherwise, the cursor shall be moved back to the column after the previous shiftwidth (see the ex shiftwidth command) boundary.
All of the glyphs on columns between the starting cursor position and (inclusively) the ending cursor position shall become
erase-columns as described in Input Mode Commands in vi.
Current line: Unchanged.
Current column: Set to 1 if the -D was preceded by a '^' or '0'; otherwise, set to
(column -1) -((column -2) % shiftwidth).
-H
Synopsis:
-H
If in text input mode for a line-oriented command, and there are no characters to erase, text input mode shall be terminated, no
further action shall be done for this command, and the current line and column shall be unchanged.
If there are characters other than autoindent characters that have been input on the current line before the cursor, the
cursor shall move back one character.
Otherwise, if there are autoindent characters on the current line before the cursor, it is implementation-defined whether
the -H command is an error or if the cursor moves back one autoindent character.
Otherwise, if the cursor is in column position 1 and there are previous lines that have been input, it is implementation-defined
whether the -H command is an error or if it is equivalent to entering -H after the last input
character on the previous input line.
Otherwise, it shall be an error.
All of the glyphs on columns between the starting cursor position and (inclusively) the ending cursor position shall become
erase-columns as described in Input Mode Commands in vi.
The current erase character (see stty) shall cause an equivalent action to the
-H command, unless the previously inserted character was a , in which case it shall be as if the
literal current erase character had been inserted instead of the .
Current line: Unchanged, unless previously input lines are erased, in which case it shall be set to line -1.
Current column: Set to the first column that displays any portion of the character backed up over.
Synopsis:
-J
-M
If input was part of a line-oriented command, text input mode shall be terminated and the command shall continue execution with
the input provided.
Otherwise, terminate the current line. If there are no characters other than autoindent characters on the line, all
characters on the line shall be discarded. Otherwise, it is unspecified whether the autoindent characters in the line are
modified by entering these characters.
Continue text input mode on a new line appended after the current line. If the slowopen edit option is set, the lines on
the screen below the current line shall not be pushed down, but the first of them shall be cleared and shall appear to be
overwritten. Otherwise, the lines of the screen below the current line shall be pushed down.
If the autoindent edit option is set, an appropriate number of autoindent characters shall be added as a prefix to
the line as described by the ex autoindent edit option.
All columns after the cursor that are erase-columns (as described in Input Mode Commands in vi)
shall be discarded.
If the autoindent edit option is set, all  characters immediately following the cursor shall be
discarded.
All remaining characters after the cursor shall be transferred to the new line, positioned after any autoindent
characters.
Current line: Set to current line +1.
Current column: Set to the first column that displays any portion of the first character after the autoindent
characters on the new line, if any, or the first column position after the last autoindent character, if any, or column
position 1.
-T
Synopsis:
-T
The -T character shall have no special meaning when in text input mode for a line-oriented command (see Command Descriptions in vi).
This command need not be supported on block-mode terminals.
Behave as if the user entered the minimum number of  characters necessary to move the cursor forward to the column
position after the next shiftwidth (see the ex shiftwidth command)
boundary.
Current line: Unchanged.
Current column: Set to column + shiftwidth - ((column -1) % shiftwidth).
-U
Synopsis:
-U
If there are characters other than autoindent characters that have been input on the current line before the cursor, the
cursor shall move to the first character input after the autoindent characters.
Otherwise, if there are autoindent characters on the current line before the cursor, it is implementation-defined whether
the -U command is an error or if the cursor moves to the first column position on the line.
Otherwise, if the cursor is in column position 1 and there are previous lines that have been input, it is implementation-defined
whether the -U command is an error or if it is equivalent to entering -U after the last input
character on the previous input line.
Otherwise, it shall be an error.
All of the glyphs on columns between the starting cursor position and (inclusively) the ending cursor position shall become
erase-columns as described in Input Mode Commands in vi.
The current kill character (see stty) shall cause an equivalent action to the
-U command, unless the previously inserted character was a , in which case it shall be as if the
literal current kill character had been inserted instead of the .
Current line: Unchanged, unless previously input lines are erased, in which case it shall be set to line -1.
Current column: Set to the first column that displays any portion of the last character backed up over.
-V
Synopsis:
-V
-Q
Allow the entry of any subsequent character, other than -J or the , as a literal character,
removing any special meaning that it may have to the editor in text input mode. If a -V or -Q is
entered before a -J or , the -V or -Q character shall be discarded, and
the -J or  shall behave as described in the  command character during input mode.
For purposes of the display only, the editor shall behave as if a '^' character was entered, and the cursor shall be
positioned as if overwriting the '^' character. When a subsequent character is entered, the editor shall behave as if that
character was entered instead of the original -V or -Q character.
Current line: Unchanged.
Current column: Unchanged.
-W
Synopsis:
-W
If there are characters other than autoindent characters that have been input on the current line before the cursor, the
cursor shall move back over the last word preceding the cursor (including any  characters between the end of the last
word and the current cursor); the cursor shall not move to before the first character after the end of any autoindent
characters.
Otherwise, if there are autoindent characters on the current line before the cursor, it is implementation-defined whether
the -W command is an error or if the cursor moves to the first column position on the line.
Otherwise, if the cursor is in column position 1 and there are previous lines that have been input, it is implementation-defined
whether the -W command is an error or if it is equivalent to entering -W after the last input
character on the previous input line.
Otherwise, it shall be an error.
All of the glyphs on columns between the starting cursor position and (inclusively) the ending cursor position shall become
erase-columns as described in Input Mode Commands in vi.
Current line: Unchanged, unless previously input lines are erased, in which case it shall be set to line -1.
Current column: Set to the first column that displays any portion of the last character backed up over.
Synopsis:
If input was part of a line-oriented command:
If interrupt was entered, text input mode shall be terminated and the editor shall return to command mode. The terminal
shall be alerted.
If  was entered, text input mode shall be terminated and the command shall continue execution with the input
provided.
Otherwise, terminate text input mode and return to command mode.
Any autoindent characters entered on newly created lines that have no other non- characters shall be
deleted.
Any leading autoindent and  characters on newly created lines shall be rewritten to be the minimum number of
characters possible.
The screen shall be redisplayed as necessary to match the contents of the edit buffer.
Current line: Unchanged.
Current column:
If there are text input characters on the current line, the column shall be set to the last column where any portion of the last
text input character is displayed.
Otherwise, if a character is displayed in the current column, unchanged.
Otherwise, set to column position 1.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
When an unrecoverable error is encountered it shall be equivalent to a SIGHUP asynchronous event.
Otherwise, when an error is encountered, the editor shall behave as specified in Command
Descriptions in vi.
The following sections are informative.
APPLICATION USAGE
None.
EXAMPLES
None.
RATIONALE
See the RATIONALE for ex for more information on vi. Major portions of the
vi utility specification point to ex to avoid inadvertent divergence. While
ex and vi have historically been implemented as a single utility, this is not
required by POSIX.1-2024.
It is recognized that portions of vi would be difficult, if not impossible, to implement satisfactorily on a block-mode
terminal, or a terminal without any form of cursor addressing, thus it is not a mandatory requirement that such features should
work on all terminals. It is the intention, however, that a vi implementation should provide the full set of capabilities on
all terminals capable of supporting them.
Historically, vi exited immediately if the standard input was not a terminal. POSIX.1-2024 permits, but does not require,
this behavior. An end-of-file condition is not equivalent to an end-of-file character. A common end-of-file character,
-D, is historically a vi command.
The text in the STDOUT section reflects the usage of the verb display in this section; some implementations of vi
use standard output to write to the terminal, but POSIX.1-2024 does not require that to be the case.
Historically, implementations reverted to open mode if the terminal was incapable of supporting full visual mode. POSIX.1-2024
requires this behavior. Historically, the open mode of vi behaved roughly equivalently to the visual mode, with the
exception that only a single line from the edit buffer (one "buffer line") was kept current at any time. This line was normally
displayed on the next-to-last line of a terminal with cursor addressing (and the last line performed its normal visual functions
for line-oriented commands and messages). In addition, some few commands behaved differently in open mode than in visual mode.
POSIX.1-2024 requires conformance to historical practice.
Historically, ex and vi implementations have expected text to proceed in the
usual European/Latin order of left to right, top to bottom. There is no requirement in POSIX.1-2024 that this be the case. The
specification was deliberately written using words like "before", "after", "first", and "last" in order to permit
implementations to support the natural text order of the language.
Historically, lines past the end of the edit buffer were marked with single  ('~') characters; that is, if
the one-based display was 20 lines in length, and the last line of the file was on line one, then lines 2-20 would contain only a
single '~' character.
Historically, the vi editor attempted to display only complete lines at the bottom of the screen (it did display partial
lines at the top of the screen). If a line was too long to fit in its entirety at the bottom of the screen, the screen lines where
the line would have been displayed were displayed as single '@' characters, instead of displaying part of the line.
POSIX.1-2024 permits, but does not require, this behavior. Implementations are encouraged to attempt always to display a complete
line at the bottom of the screen when doing scrolling or screen positioning by buffer lines.
Historically, lines marked with '@' were also used to minimize output to dumb terminals over slow lines; that is,
changes local to the cursor were updated, but changes to lines on the screen that were not close to the cursor were simply marked
with an '@' sign instead of being updated to match the current text. POSIX.1-2024 permits, but does not require this
feature because it is used ever less frequently as terminals become smarter and connections are faster.
Initialization in ex and vi
Historically, vi always had a line in the edit buffer, even if the edit buffer was "empty". For example:
The ex command = executed from visual mode wrote "1" when the buffer was
empty.
Writes from visual mode of an empty edit buffer wrote files of a single character (a ), while writes from
ex mode of an empty edit buffer wrote empty files.
Put and read commands into an empty edit buffer left an empty line at the top of the edit buffer.
For consistency, POSIX.1-2024 does not permit any of these behaviors.
Historically, vi did not always return the terminal to its original modes; for example, ICRNL was modified if it was not
originally set. POSIX.1-2024 does not permit this behavior.
Command Descriptions in vi
Motion commands are among the most complicated aspects of vi to describe. With some exceptions, the text region and
buffer type effect of a motion command on a vi command are described on a case-by-case basis. The descriptions of text
regions in POSIX.1-2024 are not intended to imply direction; that is, an inclusive region from line n to line n+5 is
identical to a region from line n+5 to line n. This is of more than academic interest—movements to marks can be in
either direction, and, if the wrapscan option is set, so can movements to search points. Historically, lines are always
stored into buffers in text order; that is, from the start of the edit buffer to the end. POSIX.1-2024 requires conformance to
historical practice.
Historically, command counts were applied to any associated motion, and were multiplicative to any supplied motion count. For
example, 2cw is the same as c2w, and 2c3w is the same as c6w. POSIX.1-2024 requires this behavior.
Historically, vi commands that used bigwords, words, paragraphs, and sentences as objects treated groups of empty lines, or
lines that contained only  characters, inconsistently. Some commands treated them as a single entity, while others
treated each line separately. For example, the w, W, and B commands treated groups of empty lines as
individual words; that is, the command would move the cursor to each new empty line. The e and E commands treated
groups of empty lines as a single word; that is, the first use would move past the group of lines. The b command would just
beep at the user, or if done from the start of the line as a motion command, fail in unexpected ways. If the lines contained only
(or ended with)  characters, the w and W commands would just beep at the user, the E and e
commands would treat the group as a single word, and the B and b commands would treat the lines as individual words.
For consistency and simplicity of specification, POSIX.1-2024 requires that all vi commands treat groups of empty or blank
lines as a single entity, and that movement through lines ending with  characters be consistent with other
movements.
Historically, vi documentation indicated that any number of double-quotes were skipped after punctuation marks at
sentence boundaries; however, implementations only skipped single-quotes. POSIX.1-2024 requires both to be skipped.
Historically, the first and last characters in the edit buffer were word boundaries. This historical practice is required by
POSIX.1-2024.
Historically, vi attempted to update the minimum number of columns on the screen possible, which could lead to misleading
information being displayed. POSIX.1-2024 makes no requirements other than that the current character being entered is displayed
correctly, leaving all other decisions in this area up to the implementation.
Historically, lines were arbitrarily folded between columns of any characters that required multiple column positions on the
screen, with the exception of tabs, which terminated at the right-hand margin. POSIX.1-2024 permits the former and requires the
latter. Implementations that do not arbitrarily break lines between columns of characters that occupy multiple column positions
should not permit the cursor to rest on a column that does not contain any part of a character.
The historical vi had a problem in that all movements were by buffer lines, not by display or screen lines. This is often
the right thing to do; for example, single line movements, such as j or k, should work on buffer lines. Commands like
dj, or j., where . is a change command, only make sense for buffer lines. It is not, however, the right thing
to do for screen motion or scrolling commands like -D, -F, and H. If the window is fairly
small, using buffer lines in these cases can result in completely random motion; for example, 1-D can
result in a completely changed screen, without any overlap. This is clearly not what the user wanted. The problem is even worse in
the case of the H, L, and M commands—as they position the cursor at the first non- of the line,
they may all refer to the same location in large lines, and will result in no movement at all.
In addition, if the line is larger than the screen, using buffer lines can make it impossible to display parts of the line—there
are not any commands that do not display the beginning of the line in historical vi, and if both the beginning and end of
the line cannot be on the screen at the same time, the user suffers. Finally, the page and half-page scrolling commands
historically moved to the first non- in the new line. If the line is approximately the same size as the screen, this
is inadequate because the cursor before and after a -D command will refer to the same location on the screen.
Implementations of ex and vi exist that do not have these problems because the
relevant commands (-B, -D, -F, -U, -Y,
-E, H, L, and M) operate on display (screen) lines, not (edit) buffer lines.
POSIX.1-2024 does not permit this behavior by default because the standard developers believed that users would find it too
confusing. However, historical practice has been relaxed. For example, ex and vi
historically attempted, albeit sometimes unsuccessfully, to never put part of a line on the last lines of a screen; for example, if
a line would not fit in its entirety, no part of the line was displayed, and the screen lines corresponding to the line contained
single '@' characters. This behavior is permitted, but not required by POSIX.1-2024, so that it is possible for
implementations to support long lines in small screens more reasonably without changing the commands to be oriented to the display
(instead of oriented to the buffer). POSIX.1-2024 also permits implementations to refuse to edit any edit buffer containing a line
that will not fit on the screen in its entirety.
The display area (for example, the value of the window edit option) has historically been "grown", or expanded, to
display new text when local movements are done in displays where the number of lines displayed is less than the maximum possible.
Expansion has historically been the first choice, when the target line is less than the maximum possible expansion value away.
Scrolling has historically been the next choice, done when the target line is less than half a display away, and otherwise, the
screen was redrawn. There were exceptions, however, in that ex commands generally always
caused the screen to be redrawn. POSIX.1-2024 does not specify a standard behavior because there may be external issues, such as
connection speed, the number of characters necessary to redraw as opposed to scroll, or terminal capabilities that implementations
will have to accommodate.
The current line in POSIX.1-2024 maps one-to-one to a buffer line in the file. The current column does not. There are two
different column values that are described by POSIX.1-2024. The first is the current column value as set by many of the vi
commands. This value is remembered for the lifetime of the editor. The second column value is the actual position on the screen
where the cursor rests. The two are not always the same. For example, when the cursor is backed by a multi-column character, the
actual cursor position on the screen has historically been the last column of the character in command mode, and the first column
of the character in input mode.
Commands that set the current line, but that do not set the current cursor value (for example, j and k) attempt to
get as close as possible to the remembered column position, so that the cursor tends to restrict itself to a vertical column as the
user moves around in the edit buffer. POSIX.1-2024 requires conformance to historical practice, requiring that the display location
of the cursor on the display line be adjusted from the current column value as necessary to support this historical behavior.
Historically, only a single line (and for some terminals, a single line minus 1 column) of characters could be entered by the
user for the line-oriented commands; that is, :, !, /, or ?. POSIX.1-2024 permits, but does not
require, this limitation.
Historically, "soft" errors in vi caused the terminal to be alerted, but no error message was displayed. As a general
rule, no error message was displayed for errors in command execution in vi, when the error resulted from the user attempting
an invalid or impossible action, or when a searched-for object was not found. Examples of soft errors included h at the left
margin, -B or [[ at the beginning of the file, 2G at the end of the file, and so on. In addition,
errors such as %, ]], }, ), N, n, f, F, t, and T failing to
find the searched-for object were soft as well. Less consistently, / and ? displayed an error message if the pattern
was not found, /, ?, N, and n displayed an error message if no previous regular expression had been
specified, and ; did not display an error message if no previous f, F, t, or T command had
occurred. Also, behavior in this area might reasonably be based on a runtime evaluation of the speed of a network connection.
Finally, some implementations have provided error messages for soft errors in order to assist naive users, based on the value of a
verbose edit option. POSIX.1-2024 does not list specific errors for which an error message shall be displayed. Implementations
should conform to historical practice in the absence of any strong reason to diverge.
Page Backwards
The -B and -F commands historically considered it an error to attempt to page past the beginning
or end of the file, whereas the -D and -U commands simply moved to the beginning or end of the file.
For consistency, POSIX.1-2024 requires the latter behavior for all four commands. All four commands still consider it an error if
the current line is at the beginning (-B, -U) or end (-F, -D) of the
file. Historically, the -B and -F commands skip two lines in order to include overlapping lines when
a single command is entered. This makes less sense in the presence of a count, as there will be, by definition, no
overlapping lines. The actual calculation used by historical implementations of the vi editor for -B was:
((current first line) - count x (window edit option)) +2
and for -F was:
((current first line) + count x (window edit option)) -2
This calculation does not work well when intermixing commands with and without counts; for example, 3-F is
not equivalent to entering the -F command three times, and is not reversible by entering the -B
command three times. For consistency with other vi commands that take counts, POSIX.1-2024 requires a different
calculation.
Scroll Forward
The 4BSD and System V implementations of vi differed on the initial value used by the scroll command. 4BSD
used:
((window edit option) +1) /2
while System V used the value of the scroll edit option. The System V version is specified by POSIX.1-2024 because the
standard developers believed that it was more intuitive and permitted the user a method of setting the scroll value initially
without also setting the number of lines that are displayed.
Scroll Forward by Line
Historically, the -E and -Y commands considered it an error if the last and first lines,
respectively, were already on the screen. POSIX.1-2024 requires conformance to historical practice. Historically, the
-E and -Y commands had no effect in open mode. For simplicity and consistency of specification,
POSIX.1-2024 requires that they behave as usual, albeit with a single line screen.
Clear and Redisplay
The historical -L command refreshed the screen exactly as it was supposed to be currently displayed, replacing
any '@' characters for lines that had been deleted but not updated on the screen with refreshed '@' characters.
The intent of the -L command is to refresh when the screen has been accidentally overwritten; for example, by a
write command from another user, or modem noise.
Redraw Screen
The historical -R command redisplayed only when necessary to update lines that had been deleted but not updated
on the screen and that were flagged with '@' characters. There is no requirement that the screen be in any way refreshed
if no lines of this form are currently displayed. POSIX.1-2024 permits implementations to extend this command to refresh lines on
the screen flagged with '@' characters because they are too long to be displayed in the current framework; however, the
current line and column need not be modified.
Search for tagstring
Historically, the first non- at or after the cursor was the first character, and all subsequent characters that
were word characters, up to the end of the line, were included. For example, with the cursor on the leading  or on the
'#' character in the text "#bar@", the tag was "#bar". On the character 'b' it was
"bar", and on the 'a' it was "ar". POSIX.1-2024 requires this behavior.
Replace Text with Results from Shell Command
Historically, the , and ! commands considered most cursor motions other than line-oriented
motions an error; for example, the command >/foo succeeded, while the command >l failed, even though
the text region described by the two commands might be identical. For consistency, all three commands only consider entire lines
and not partial lines, and the region is defined as any line that contains a character that was specified by the motion.
Move to Matching Character
Other matching characters have been left implementation-defined in order to allow extensions such as matching '' for searching HTML, or #ifdef, #else, and #endif for searching C source.
Repeat Substitution
POSIX.1-2024 requires that any c and g flags specified to the previous substitute command be ignored; however, the
r flag may still apply, if supported by the implementation.
Return to Previous (Context or Section)
The [[, ]], (, ), {, and } commands are all affected by "section boundaries", but in
some historical implementations not all of the commands recognize the same section boundaries. This is a bug, not a feature, and a
unique section-boundary algorithm was not described for each command. One special case that is preserved is that the sentence
command moves to the end of the last line of the edit buffer while the other commands go to the beginning, in order to preserve the
traditional character cut semantics of the sentence command. Historically, vi section boundaries at the beginning and end of
the edit buffer were the first non- on the first and last lines of the edit buffer if one exists; otherwise, the last
character of the first and last lines of the edit buffer if one exists. To increase consistency with other section locations, this
has been simplified by POSIX.1-2024 to the first character of the first and last lines of the edit buffer, or the first and the
last lines of the edit buffer if they are empty.
Sentence boundaries were problematic in the historical vi. They were not only the boundaries as defined for the section
and paragraph commands, but they were the first non- that occurred after those boundaries, as well. Historically, the
vi section commands were documented as taking an optional window size as a count preceding the command. This was not
implemented in historical versions, so POSIX.1-2024 requires that the count repeat the command, for consistency with other
vi commands.
Repeat
Historically, mapped commands other than text input commands could not be repeated using the period command. POSIX.1-2024
requires conformance to historical practice.
The restrictions on the interpretation of special characters (for example, -H) in the repetition of text input
mode commands is intended to match historical practice. For example, given the input sequence:
iab-H-H-Hdef
the user should be informed of an error when the sequence is first entered, but not during a command repetition. The character
-T is specifically exempted from this restriction. Historical implementations of vi ignored -T
characters that were input in the original command during command repetition. POSIX.1-2024 prohibits this behavior.
Find Regular Expression
Historically, commands did not affect the line searched to or from if the motion command was a search (/, ?,
N, n) and the final position was the start/end of the line. There were some special cases and vi was not
consistent. POSIX.1-2024 does not permit this behavior, for consistency. Historical implementations permitted but were unable to
handle searches as motion commands that wrapped (that is, due to the edit option wrapscan) to the original location.
POSIX.1-2024 requires that this behavior be treated as an error.
Historically, the syntax "/RE/0" was used to force the command to cut text in line mode. POSIX.1-2024 requires
conformance to historical practice.
Historically, in open mode, a z specified to a search command redisplayed the current line instead of displaying the
current screen with the current line highlighted. For consistency and simplicity of specification, POSIX.1-2024 does not permit
this behavior.
Historically, trailing z commands were permitted and ignored if entered as part of a search used as a motion command. For
consistency and simplicity of specification, POSIX.1-2024 does not permit this behavior.
Execute an ex Command
Historically, vi implementations restricted the commands that could be entered on the colon command line (for example,
append and change), and some other commands were known to cause them to fail catastrophically. For consistency,
POSIX.1-2024 does not permit these restrictions. When executing an ex command by entering
:, it is not possible to enter a  as part of the command because it is considered the end of the command. A
different approach is to enter ex command mode by using the vi Q command
(and later resuming visual mode with the ex vi command). In ex command mode, the single-line limitation does not exist. So, for example, the following is
valid:
Q
s/break here/break\
here/
vi
POSIX.1-2024 requires that, if the ex command overwrites any part of the screen that
would be erased by a refresh, vi pauses for a character from the user. Historically, this character could be any character;
for example, a character input by the user before the message appeared, or even a mapped character. This is probably a bug, but
implementations that have tried to be more rigorous by requiring that the user enter a specific character, or that the user enter a
character after the message was displayed, have been forced by user indignation back into historical behavior. POSIX.1-2024
requires conformance to historical practice.
Shift Left (Right)
Refer to the Rationale for the ! and / commands. Historically, the  commands sometimes
moved the cursor to the first non- (for example if the command was repeated or with _ as the motion command),
and sometimes left it unchanged. POSIX.1-2024 does not permit this inconsistency, requiring instead that the cursor always move to
the first non-. Historically, the  commands did not support buffer arguments, although some
implementations allow the specification of an optional buffer. This behavior is neither required nor disallowed by
POSIX.1-2024.
Execute
Historically, buffers could execute other buffers, and loops, infinite and otherwise, were possible. POSIX.1-2024 requires
conformance to historical practice. The *buffer syntax of ex is not required in
vi, because it is not historical practice and has been used in some vi implementations to support additional
scripting languages.
Reverse Case
Historically, the ~ command ignored any associated count, and acted only on the characters in the current line.
For consistency with other vi commands, POSIX.1-2024 requires that an associated count act on the next count
characters, and that the command move to subsequent lines if warranted by count, to make it possible to modify large pieces
of text in a reasonably efficient manner. There exist vi implementations that optionally require an associated motion
command for the ~ command. Implementations supporting this functionality are encouraged to base it on the tildedop
edit option and handle the text regions and cursor positioning identically to the yank command.
Append
Historically, counts specified to the A, a, I, and i commands repeated the input of the first
line count times, and did not repeat the subsequent lines of the input text. POSIX.1-2024 requires that the entire text
input be repeated count times.
Move Backward to Preceding Word
Historically, vi became confused if word commands were used as motion commands in empty files. POSIX.1-2024 requires that
this be an error. Historical implementations of vi had a large number of bugs in the word movement commands, and they varied
greatly in behavior in the presence of empty lines, "words" made up of a single character, and lines containing only
characters. For consistency and simplicity of specification, POSIX.1-2024 does not permit this behavior.
Change to End-of-Line
Some historical implementations of the C command did not behave as described by POSIX.1-2024 when the $ key was
remapped because they were implemented by pushing the $ key onto the input queue and reprocessing it. POSIX.1-2024 does not
permit this behavior. Historically, the C, S, and s commands did not copy replaced text into the numeric
buffers. For consistency and simplicity of specification, POSIX.1-2024 requires that they behave like their respective c
commands in all respects.
Delete
Historically, lines in open mode that were deleted were scrolled up, and an @ glyph written over the beginning of the
line. In the case of terminals that are incapable of the necessary cursor motions, the editor erased the deleted line from the
screen. POSIX.1-2024 requires conformance to historical practice; that is, if the terminal cannot display the '@'
character, the line cannot remain on the screen.
Delete to End-of-Line
Some historical implementations of the D command did not behave as described by POSIX.1-2024 when the $ key was
remapped because they were implemented by pushing the $ key onto the input queue and reprocessing it. POSIX.1-2024 does not
permit this behavior.
Join
An historical oddity of vi is that the commands J, 1J, and 2J are all equivalent. POSIX.1-2024
requires conformance to historical practice. The vi J command is specified in terms of the ex join command with an ex command count
value. The address correction for a count that is past the end of the edit buffer is necessary for historical compatibility
for both ex and vi.
Mark Position
Historical practice is that only lowercase letters, plus backquote and single-quote, could be used to mark a cursor position.
POSIX.1-2024 requires conformance to historical practice, but encourages implementations to support other characters as marks as
well.
Repeat Regular Expression Find (Forward and Reverse)
Historically, the N and n commands could not be used as motion components for the c command. With the
exception of the cN command, which worked if the search crossed a line boundary, the text region would be discarded, and the
user would not be in text input mode. For consistency and simplicity of specification, POSIX.1-2024 does not permit this
behavior.
Insert Empty Line (Below and Above)
Historically, counts to the O and o commands were used as the number of physical lines to open, if the terminal
was dumb and the slowopen option was not set. This was intended to minimize traffic over slow connections and repainting for
dumb terminals. POSIX.1-2024 does not permit this behavior, requiring that a count to the open command behave as for other
text input commands. This change to historical practice was made for consistency, and because a superset of the functionality is
provided by the slowopen edit option.
Put from Buffer (Following and Before)
Historically, counts to the p and P commands were ignored if the buffer was a line mode buffer, but were
(mostly) implemented as described in POSIX.1-2024 if the buffer was a character mode buffer. Because implementations exist that do
not have this limitation, and because pasting lines multiple times is generally useful, POSIX.1-2024 requires that count be
supported for all p and P commands.
Historical implementations of vi were widely known to have major problems in the p and P commands,
particularly when unusual regions of text were copied into the edit buffer. The standard developers viewed these as bugs, and they
are not permitted for consistency and simplicity of specification.
Historically, a P or p command (or an ex put command executed
from open or visual mode) executed in an empty file, left an empty line as the first line of the file. For consistency and
simplicity of specification, POSIX.1-2024 does not permit this behavior.
Replace Character
Historically, the r command did not correctly handle the erase and word erase characters as arguments, nor
did it handle an associated count greater than 1 with a  argument, for which it replaced count
characters with a single . POSIX.1-2024 does not permit these inconsistencies.
Historically, the r command permitted the -V escaping of entered characters, such as  and the
; however, it required two leading -V characters instead of one. POSIX.1-2024 requires that
this be changed for consistency with the other text input commands of vi.
Historically, it is an error to enter the r command if there are less than count characters at or after the cursor
in the line. While a reasonable and unambiguous extension would be to permit the r command on empty lines, it would require
that too large a count be adjusted to match the number of characters at or after the cursor for consistency, which is
sufficiently different from historical practice to be avoided. POSIX.1-2024 requires conformance to historical practice.
Replace Characters
Historically, if there were autoindent characters in the line on which the R command was run, and
autoindent was set, the first  would be properly indented and no characters would be replaced by the
. Each additional  would replace n characters, where n was the number of characters
that were needed to indent the rest of the line to the proper indentation level. This behavior is a bug and is not permitted by
POSIX.1-2024.
Undo
Historical practice for cursor positioning after undoing commands was mixed. In most cases, when undoing commands that affected
a single line, the cursor was moved to the start of added or changed text, or immediately after deleted text. However, if the user
had moved from the line being changed, the column was either set to the first non-, returned to the origin of the
command, or remained unchanged. When undoing commands that affected multiple lines or entire lines, the cursor was moved to the
first character in the first line restored. As an example of how inconsistent this was, a search, followed by an o text
input command, followed by an undo would return the cursor to the location where the o command was entered, but a
cw command followed by an o command followed by an undo would return the cursor to the first non-
of the line. POSIX.1-2024 requires the most useful of these behaviors, and discards the least useful, in the interest of
consistency and simplicity of specification.
Yank
Historically, the yank command did not move to the end of the motion if the motion was in the forward direction. It moved
to the end of the motion if the motion was in the backward direction, except for the _ command, or for the G and
' commands when the end of the motion was on the current line. This was further complicated by the fact that for a number of
motion commands, the yank command moved the cursor but did not update the screen; for example, a subsequent command would
move the cursor from the end of the motion, even though the cursor on the screen had not reflected the cursor movement for the
yank command. POSIX.1-2024 requires that all yank commands associated with backward motions move the cursor to the
end of the motion for consistency, and specifically, to make ' commands as motions consistent with search patterns as
motions.
Yank Current Line
Some historical implementations of the Y command did not behave as described by POSIX.1-2024 when the '_' key
was remapped because they were implemented by pushing the '_' key onto the input queue and reprocessing it. POSIX.1-2024
does not permit this behavior.
Redraw Window
Historically, the z command always redrew the screen. This is permitted but not required by POSIX.1-2024, because of the
frequent use of the z command in macros such as map n nz. for screen positioning, instead of its use to change the
screen size. The standard developers believed that expanding or scrolling the screen offered a better interface for users. The
ability to redraw the screen is preserved if the optional new window size is specified, and in the -L and
-R commands.
The semantics of z^ are confusing at best. Historical practice is that the screen before the screen that ended with the
specified line is displayed. POSIX.1-2024 requires conformance to historical practice.
Historically, the z command would not display a partial line at the top or bottom of the screen. If the partial line
would normally have been displayed at the bottom of the screen, the command worked, but the partial line was replaced with
'@' characters. If the partial line would normally have been displayed at the top of the screen, the command would fail.
For consistency and simplicity of specification, POSIX.1-2024 does not permit this behavior.
Historically, the z command with a line specification of 1 ignored the command. For consistency and simplicity of
specification, POSIX.1-2024 does not permit this behavior.
Historically, the z command did not set the cursor column to the first non- for the character if the first
screen was to be displayed, and was already displayed. For consistency and simplicity of specification, POSIX.1-2024 does not
permit this behavior.
Input Mode Commands in vi
Historical implementations of vi did not permit the user to erase more than a single line of input, or to use normal
erase characters such as line erase, worderase, and erase to erase autoindent characters. As there
exist implementations of vi that do not have these limitations, both behaviors are permitted, but only historical practice
is required. In the case of these extensions, vi is required to pause at the autoindent and previous line
boundaries.
Historical implementations of vi updated only the portion of the screen where the current cursor character was displayed.
For example, consider the vi input keystrokes:
iabcd0C
Historically, the  would overwrite the characters "abcd" when it was displayed. Other implementations
replace only the 'a' character with the , and then push the rest of the characters ahead of the cursor. Both
implementations have problems. The historical implementation is probably visually nicer for the above example; however, for the
keystrokes:
iabcd0R
the historical implementation results in the string "bcd" disappearing and then magically reappearing when the
character is entered. POSIX.1-2024 requires the former behavior when overwriting erase-columns—that is, overwriting
characters that are no longer logically part of the edit buffer—and the latter behavior otherwise.
Historical implementations of vi discarded the -D and -T characters when they were entered
at places where their command functionality was not appropriate. POSIX.1-2024 requires that the -T functionality
always be available, and that -D be treated as any other key when not operating on autoindent characters.
NUL
Some historical implementations of vi limited the number of characters entered using the NUL input character to 256
bytes. POSIX.1-2024 permits this limitation; however, implementations are encouraged to remove this limit.
-D
See also Rationale for the input mode command . The hidden assumptions in the -D command (and in
the vi autoindent specification in general) is that  characters take up a single column on the screen
and that  characters are comprised of an integral number of  characters.
Implementations are permitted to rewrite autoindent characters in the line when , ,
-D, and -T are entered, or when the shift commands are used, because historical
implementations have both done so and found it necessary to do so. For example, a -D when the cursor is preceded by
a single , with tabstop set to 8, and shiftwidth set to 3, will result in the  being replaced
by several  characters.
-T
See also the Rationale for the input mode command . Historically, -T only worked if no
non- characters had yet been input in the current input line. In addition, the characters inserted by
-T were treated as autoindent characters, and could not be erased using normal user erase characters. Because
implementations exist that do not have these limitations, and as moving to a column boundary is generally useful, POSIX.1-2024
requires that both limitations be removed.
-V
Historically, vi used ^V, regardless of the value of the literal-next character of the terminal. POSIX.1-2024
requires conformance to historical practice.
The uses described for -V can also be accomplished with -Q, which is useful on terminals that use
-V for the down-arrow function. However, most historical implementations use -Q for the
termios START character, so the editor will generally not receive the -Q unless stty ixon mode is set
to off. (In addition, some historical implementations of vi explicitly set ixon mode to on, so it was difficult for
the user to set it to off.) Any of the command characters described in POSIX.1-2024 can be made ineffective by their selection as
termios control characters, using the stty utility or other methods described in
the System Interfaces volume of POSIX.1-2024.
Historically, SIGINT alerted the terminal when used to end input mode. This behavior is permitted, but not required, by
POSIX.1-2024.
FUTURE DIRECTIONS
If this utility is directed to create a new directory entry that contains any bytes that have the encoded value of a
character, implementations are encouraged to treat this as an error. A future version of this standard may require
implementations to treat this as an error.
SEE ALSO
ed, ex, stty
XBD 12.2 Utility Syntax Guidelines
CHANGE HISTORY
First released in Issue 2.
Issue 5
The FUTURE DIRECTIONS section is added.
Issue 6
This utility is marked as part of the User Portability Utilities option.
The APPLICATION USAGE section is added.
The obsolescent SYNOPSIS is removed.
The following new requirements on POSIX implementations derive from alignment with the Single UNIX Specification:
The reindent command description is added.
The vi utility has been extensively rewritten for alignment with the IEEE P1003.2b draft standard.
IEEE PASC Interpretations 1003.2 #57, #62, #63, #64, #78, and #188 are applied.
IEEE PASC Interpretation 1003.2 #207 is applied, clarifying the description of the R command in a manner similar to the
descriptions of other text input mode commands such as i, o, and O.
The -l option is removed.
IEEE Std 1003.1-2001/Cor 1-2002, item XCU/TC1/D6/41 is applied, adding [count] to the Synopsis for
[[.
IEEE Std 1003.1-2001/Cor 1-2002, item XCU/TC1/D6/42 is applied, adding [count] to the Synopsis for
]].
Issue 7
Austin Group Interpretation 1003.1-2001 #027 is applied, clarifying that '+' may be recognized as an option delimiter
in the OPTIONS section.
Austin Group Interpretation 1003.1-2001 #087 is applied, updating the Put from Buffer Before (P) command description to
address multi-line requirements.
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
POSIX.1-2008, Technical Corrigendum 2, XCU/TC2-2008/0202 [812] is applied.
Issue 8
Austin Group Defect 251 is applied, encouraging implementations to disallow the creation of filenames containing any bytes that
have the encoded value of a  character.
Austin Group Defect 1310 is applied, changing the CONSEQUENCES OF ERRORS section.
Austin Group Defect 1676 is applied, changing the typeface of some bold text in the RATIONALE section.
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/paste.html =====
paste
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
paste — merge corresponding or subsequent lines of files
SYNOPSIS
paste [-s] [-d list] file...
DESCRIPTION
The paste utility shall concatenate the corresponding lines of the given input files, and write the resulting lines to
standard output.
The default operation of paste shall concatenate the corresponding lines of the input files. The  of every
line except the line from the last input file shall be replaced with a .
If an end-of-file condition is detected on one or more input files, but not all input files, paste shall behave as though
empty lines were read from the files on which end-of-file was detected, unless the -s option is specified.
OPTIONS
The paste utility shall conform to XBD 12.2 Utility Syntax
Guidelines.
The following options shall be supported:
-d list
Unless a  character appears in list, each character in list is an element specifying a delimiter
character. If a  character appears in list, the  character and one or more characters
following it are an element specifying a delimiter character as described below. These elements specify one or more delimiters to
use, instead of the default , to replace the  of the input lines. The elements in list shall be
used circularly; that is, when the list is exhausted the first element from the list is reused. When the -s option is
specified:
The last  in a file shall not be modified.
The delimiter shall be reset to the first element of list after each file operand is processed.
When the -s option is not specified:
The  characters in the file specified by the last file operand shall not be modified.
The delimiter shall be reset to the first element of list each time a line is processed from each file.
If a  character appears in list, it and the character following it shall be used to represent the
following delimiter characters:
\n
.
\t
.
\\
character.
\0
Empty string (not a null character). If '\0' is immediately followed by the character 'x', the character
'X', or any character defined by the LC_CTYPE digit keyword (see XBD 7. Locale), the results are unspecified.
If any other characters follow the , the results are unspecified.
-s
Concatenate all of the lines from each input file into one line of output per file, in command line order. The
of every line except the last line in each input file shall be replaced with a , unless otherwise specified by the
-d option. If an input file is empty, the output line corresponding to that file shall consist of only a
character.
OPERANDS
The following operand shall be supported:
file
A pathname of an input file. If '-' is specified for one or more of the files, the standard input shall be
used; the standard input shall be read one line at a time, circularly, for each instance of '-'. Implementations shall
support pasting of at least 12 file operands.
STDIN
The standard input shall be used only if one or more file operands is '-'. See the INPUT FILES section.
INPUT FILES
The input files shall be text files, except that line lengths shall be unlimited.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of paste:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments and input files).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
Default.
STDOUT
Concatenated lines of input files shall be separated by the  (or other characters under the control of the -d
option) and terminated by a .
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
If one or more input files cannot be opened when the -s option is not specified, a diagnostic message shall be written to
standard error, but no output is written to standard output. If the -s option is specified, the paste utility shall
provide the default behavior described in 1.4 Utility Description
Defaults.
The following sections are informative.
APPLICATION USAGE
When the escape sequences of the list option-argument are used in a shell script, they must be quoted; otherwise, the
shell treats the  as a special character.
Conforming applications should only use the specific -escaped delimiters presented in this volume of
POSIX.1-2024. Historical implementations treat '\x', where 'x' is not in this list, as 'x', but future
implementations are free to expand this list to recognize other common escapes similar to those accepted by printf and other standard utilities.
Most of the standard utilities work on text files. The cut utility can be used to
turn files with arbitrary line lengths into a set of text files containing the same data. The paste utility can be used to
create (or recreate) files with arbitrary line lengths. For example, if file contains long lines:
cut -b 1-500 -n file > file1
cut -b 501- -n file > file2
creates file1 (a text file) with lines no longer than 500 bytes (plus the ) and file2 that contains
the remainder of the data from file. Note that file2 is not a text file if there are lines in file that are
longer than 500 + {LINE_MAX} bytes. The original file can be recreated from file1 and file2 using the command:
paste -d "\0" file1 file2 > file
The commands:
paste -d "\0" ...
paste -d "" ...
are not necessarily equivalent; the latter is not specified by this volume of POSIX.1-2024 and may result in an error. The
construct '\0' is used to mean "no separator" because historical versions of paste did not follow the syntax
guidelines, and the command:
paste -d"" ...
could not be handled properly by getopt().
EXAMPLES
Write out a directory in four columns:
ls | paste - - - -
Combine pairs of lines from a file into single lines:
paste -s -d "\t\n" file
RATIONALE
None.
FUTURE DIRECTIONS
None.
SEE ALSO
1.4 Utility Description Defaults, cut, grep, pr
XBD 7. Locale, 8.
Environment Variables, 12.2 Utility Syntax Guidelines
CHANGE HISTORY
First released in Issue 2.
Issue 6
The normative text is reworded to avoid use of the term "must" for application requirements.
Issue 7
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
POSIX.1-2008, Technical Corrigendum 2, XCU/TC2-2008/0149 [973] is applied.
Issue 8
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/toc.html =====
Shell & Utilities: Table of contents
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
Shell & Utilities: Table of Contents
1. Introduction
1.1 Relationship to Other Documents
1.1.1 System Interfaces
1.1.1.1 Process Attributes
1.1.1.2 Concurrent Execution of Processes
1.1.1.3 File Access Permissions
1.1.1.4 File Read, Write, and Creation
1.1.1.5 File Removal
1.1.1.6 File Time Values
1.1.1.7 File Contents
1.1.1.8 Pathname Resolution
1.1.1.9 Changing the Current Working Directory
1.1.1.10 Establish the Locale
1.1.1.11 Actions Equivalent to Functions
1.1.2 Concepts Derived from the ISO C Standard
1.1.2.1 Arithmetic Precision and Operations
1.1.2.2 Mathematical Functions
1.2 Utility Limits
1.3 Grammar Conventions
1.4 Utility Description Defaults
1.5 Considerations for Utilities in Support of Files of Arbitrary Size
1.6 Built-In Utilities
1.7 Intrinsic Utilities
2. Shell Command Language
2.1 Shell Introduction
2.2 Quoting
2.2.1 Escape Character (Backslash)
2.2.2 Single-Quotes
2.2.3 Double-Quotes
2.2.4 Dollar-Single-Quotes
2.3 Token Recognition
2.3.1 Alias Substitution
2.4 Reserved Words
2.5 Parameters and Variables
2.5.1 Positional Parameters
2.5.2 Special Parameters
2.5.3 Shell Variables
2.6 Word Expansions
2.6.1 Tilde Expansion
2.6.2 Parameter Expansion
Examples
2.6.3 Command Substitution
2.6.4 Arithmetic Expansion
Examples
2.6.5 Field Splitting
2.6.6 Pathname Expansion
2.6.7 Quote Removal
2.7 Redirection
2.7.1 Redirecting Input
2.7.2 Redirecting Output
2.7.3 Appending Redirected Output
2.7.4 Here-Document
Examples
2.7.5 Duplicating an Input File Descriptor
2.7.6 Duplicating an Output File Descriptor
2.7.7 Open File Descriptors for Reading and Writing
2.8 Exit Status and Errors
2.8.1 Consequences of Shell Errors
2.8.2 Exit Status for Commands
2.9 Shell Commands
2.9.1 Simple Commands
2.9.1.1 Order of Processing
2.9.1.2 Variable Assignments
2.9.1.3 Commands with no Command Name
2.9.1.4 Command Search and Execution
2.9.1.5 Standard File Descriptors
2.9.1.6 Non-built-in Utility Execution
2.9.2 Pipelines
Exit Status
2.9.3 Lists
Examples
2.9.3.1 Asynchronous AND-OR Lists
Exit Status
2.9.3.2 Sequential AND-OR Lists
Exit Status
2.9.3.3 AND Lists
Exit Status
2.9.3.4 OR Lists
Exit Status
2.9.4 Compound Commands
2.9.4.1 Grouping Commands
Exit Status
2.9.4.2 The for Loop
Exit Status
2.9.4.3 Case Conditional Construct
Exit Status
2.9.4.4 The if Conditional Construct
Exit Status
2.9.4.5 The while Loop
Exit Status
2.9.4.6 The until Loop
Exit Status
2.9.5 Function Definition Command
Exit Status
2.10 Shell Grammar
2.10.1 Shell Grammar Lexical Conventions
2.10.2 Shell Grammar Rules
2.11 Job Control
2.12 Signals and Error Handling
2.13 Shell Execution Environment
2.14 Pattern Matching Notation
2.14.1 Patterns Matching a Single Character
2.14.2 Patterns Matching Multiple Characters
2.14.3 Patterns Used for Filename Expansion
2.15 Special Built-In Utilities
break
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
colon
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
continue
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
dot
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
eval
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
exec
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
exit
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
export
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
readonly
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
return
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
set
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
shift
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
times
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
trap
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
unset
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
3. Utilities
admin
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 8
alias
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
ar
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
asa
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
at
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
awk
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Overall Program Structure
Expressions in awk
Variables and Special Variables
Regular Expressions
Patterns
Special Patterns
Expression Patterns
Pattern Ranges
Actions
Output Statements
Functions
Arithmetic Functions
String Functions
Input/Output and General Functions
User-Defined Functions
Grammar
Lexical Conventions
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
basename
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
batch
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
bc
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Grammar
Lexical Conventions in bc
Operations in bc
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
bg
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
c17
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Standard Libraries
External Symbols
Header Search
Programming Environments
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
cal
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
cat
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
cd
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
cflow
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
chgrp
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
chmod
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Grammar for chmod
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
chown
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
cksum
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
cmp
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
comm
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
command
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
compress
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
cp
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
crontab
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
csplit
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
ctags
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
cut
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
cxref
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
date
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 8
dd
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
delta
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
System Date and Time
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
df
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
diff
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
Diff Directory Comparison Format
Diff Binary Output Format
Diff Default Output Format
Diff -e Output Format
Diff -f Output Format
Diff -c or -C Output Format
Diff -u or -U Output Format
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
dirname
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
du
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
echo
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
ed
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Regular Expressions in ed
Addresses in ed
Commands in ed
Append Command
Change Command
Delete Command
Edit Command
Edit Without Checking Command
Filename Command
Global Command
Interactive Global Command
Help Command
Help-Mode Command
Insert Command
Join Command
Mark Command
List Command
Move Command
Number Command
Print Command
Prompt Command
Quit Command
Quit Without Checking Command
Read Command
Substitute Command
Copy Command
Undo Command
Global Non-Matched Command
Interactive Global Not-Matched Command
Write Command
Line Number Command
Shell Escape Command
Null Command
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
env
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
ex
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Initialization in ex and vi
Addressing in ex
Command Line Parsing in ex
Input Editing in ex
Scroll
-V
-W
Command Descriptions in ex
Abbreviate
Append
Arguments
Change
Change Directory
Copy
Delete
Edit
File
Global
Insert
Join
List
Map
Mark
Move
Number
Open
Preserve
Print
Put
Quit
Read
Recover
Rewind
Set
Shell
Source
Substitute
Suspend
Tag
Unabbreviate
Undo
Unmap
Version
Visual
Write
Write and Exit
Yank
Adjust Window
Escape
Shift Left
Shift Right
-D
Write Line Number
Execute
Regular Expressions in ex
Replacement Strings in ex
Edit Options in ex
autoindent, ai
autoprint, ap
autowrite, aw
beautify, bf
directory, dir
edcompatible, ed
errorbells, eb
exrc
ignorecase, ic
list
magic
mesg
number, nu
paragraphs, para
prompt
readonly
redraw
remap
report
scroll, scr
sections
shell, sh
shiftwidth, sw
showmatch, sm
showmode
slowopen
tabstop, ts
taglength, tl
tags
term
terse
warn
window
wrapmargin, wm
wrapscan, ws
writeany, wa
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
Options
Standard Input
Input Files
Asynchronous Events
Standard Error
Initialization in ex and vi
Addressing
Command Line Parsing in ex
Input Editing in ex
eof
Command Descriptions in ex
Abbreviate
Append
Change
Change Directory
Copy
Delete
Edit
File
Global
Insert
Join
List
Map
Mark
Open
Preserve
Print
Put
Read
Recover
Rewind
Substitute
Set
Tag
Undo
Version
Write
Adjust Window
Escape
Shift Left and Shift Right
-D
Write Line Number
Execute
Regular Expressions in ex
Edit Options in ex
autoindent, ai
autoprint, ap
autowrite, aw
ignorecase, ic
paragraphs, para
readonly
report
showmatch, sm
showmode
slowopen
tags
term
terse
window
wrapmargin, wm
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
expand
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
expr
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Matching Expression
Identification as Integer or String
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
false
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 8
fc
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
fg
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 8
file
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
find
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
fold
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
fuser
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
gencat
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
get
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
System Date and Time
Identification Keywords
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
getconf
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
getopts
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
gettext
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
grep
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
hash
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
head
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
iconv
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
id
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
ipcrm
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
ipcs
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
jobs
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
join
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
kill
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
lex
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Definitions in lex
Rules in lex
User Subroutines in lex
Regular Expressions in lex
Actions in lex
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
link
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 8
ln
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
locale
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
localedef
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
logger
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
logname
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 8
lp
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
ls
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
m4
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
mailx
NAME
SYNOPSIS
Send Mode
Receive Mode
DESCRIPTION
Send Mode
Receive Mode
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Start-Up in mailx
Internal Variables in mailx
Commands in mailx
Declare Aliases
Declare Alternatives
Change Current Directory
Copy Messages
Delete Messages
Discard Header Fields
Delete Messages and Display
Echo a String
Edit Messages
Exit
Change Folder
Display List of Folders
Follow Up Specified Messages
Display Header Summary for Specified Messages
Display Header Summaries
Help
Hold Messages
Execute Commands Conditionally
List Available Commands
Mail a Message
Direct Messages to mbox
Process Next Specified Message
Pipe Message
Display Message with Header
Display Message
Quit
Reply to a Message or a Message List
Retain Header Fields
Save Messages
Set Variables
Invoke a Shell
Display Message Size
Read mailx Commands From a File
Display Beginning of Messages
Touch Messages
Delete Aliases
Undelete Messages
Unset Variables
Edit Message with Full-Screen Editor
Write Messages to a File
Scroll Header Display
Invoke Shell Command
Null Command
Display Current Message Number
Command Escapes in mailx
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
make
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Makefile Syntax
Include Lines
Makefile Execution
Target Rules
Macros
Inference Rules
Libraries
Internal Macros
Default Rules
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
man
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 7
Issue 8
mesg
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
mkdir
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 7
Issue 8
mkfifo
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 8
more
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Help
Scroll Forward One Screenful
Scroll Backward One Screenful
Scroll Forward One Line
Scroll Backward One Line
Scroll Forward One Half Screenful
Skip Forward One Line
Scroll Backward One Half Screenful
Go to Beginning of File
Go to End-of-File
Refresh the Screen
Discard and Refresh
Mark Position
Return to Mark
Return to Previous Position
Search Forward for Pattern
Search Backward for Pattern
Repeat Search
Repeat Search in Reverse
Examine New File
Examine Next File
Examine Previous File
Go to Tag
Invoke Editor
Display Position
Quit
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
msgfmt
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
mv
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
newgrp
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
ngettext
NAME
SYNOPSIS
DESCRIPTION
nice
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
nl
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
nm
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
nohup
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
od
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
paste
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
patch
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Patch File Format
Filename Determination
Patch Application
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
pathchk
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
pax
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
List Mode Format Specifications
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
pax Interchange Format
pax Header Block
pax Extended Header
pax Extended Header Keyword Precedence
pax Extended Header File Times
ustar Interchange Format
cpio Interchange Format
cpio Header
cpio Filename
cpio File Data
cpio Special Entries
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
pax Interchange Format
pax Archive Character Set Encoding/Decoding
ustar Interchange Format
cpio Interchange Format
cpio Header
cpio Filename
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
pr
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
printf
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
prs
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
Data Keywords
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
ps
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
pwd
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
read
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
readlink
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
realpath
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
renice
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
rm
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
rmdel
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 8
rmdir
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 8
sact
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 8
sccs
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
sed
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Addresses in sed
Regular Expressions in sed
Editing Commands in sed
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
sh
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Command History List
Command Line Editing
Command Line Editing (vi-mode)
vi Line Editing Insert Mode
vi Line Editing Command Mode
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
sleep
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 8
sort
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
split
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
strings
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
strip
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
stty
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
Control Modes
Input Modes
Output Modes
Local Modes
Special Control Character Assignments
Combination Modes
Terminal Window Size
Informational Queries
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
tabs
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
tail
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
talk
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 8
tee
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
test
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
time
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
timeout
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
touch
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
tput
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
tr
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
true
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 8
tsort
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
tty
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 8
type
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 8
ulimit
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
umask
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
unalias
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
uname
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 8
uncompress
NAME
SYNOPSIS
DESCRIPTION
unexpand
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
unget
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
uniq
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
unlink
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 8
uucp
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
uudecode
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
uuencode
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
uuencode Base64 Algorithm
uuencode Historical Algorithm
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
uustat
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
uux
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
val
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
vi
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Initialization in ex and vi
Command Descriptions in vi
Page Backwards
Scroll Forward
Scroll Forward by Line
Page Forward
Display Information
Move Cursor Backwards
Move Down
Clear and Redisplay
Move Up
Redraw Screen
Scroll Backward
Scroll Backward by Line
Edit the Alternate File
Terminate Command or Input Mode
Search for tagstring
Move Cursor Forward
Replace Text with Results from Shell Command
Move Cursor to End-of-Line
Move to Matching Character
Repeat Substitution
Return to Previous Context at Beginning of Line
Return to Previous Context
Return to Previous Section
Move to Next Section
Move to First Non- Position on Current Line
Current and Line Above
Move Back to Beginning of Sentence
Move Forward to Beginning of Sentence
Move Back to Preceding Paragraph
Move Forward to Next Paragraph
Move to Specific Column Position
Reverse Find Character
Repeat
Find Regular Expression
Move to First Character in Line
Execute an ex Command
Repeat Find
Shift Left
Shift Right
Scan Backwards for Regular Expression
Execute
Reverse Case
Append
Append at End-of-Line
Move Backward to Preceding Word
Move Backward to Preceding Bigword
Change
Change to End-of-Line
Delete
Delete to End-of-Line
Move to End-of-Word
Move to End-of-Bigword
Find Character in Current Line (Forward)
Find Character in Current Line (Reverse)
Move to Line
Move to Top of Screen
Insert Before Cursor
Insert at Beginning of Line
Join
Move to Bottom of Screen
Mark Position
Move to Middle of Screen
Repeat Regular Expression Find (Forward)
Repeat Regular Expression Find (Reverse)
Insert Empty Line Below
Insert Empty Line Above
Put from Buffer Following
Put from Buffer Before
Enter ex Mode
Replace Character
Replace Characters
Substitute Character
Substitute Lines
Move Cursor to Before Character (Forward)
Move Cursor to After Character (Reverse)
Undo
Undo Current Line
Move to Beginning of Word
Move to Beginning of Bigword
Delete Character at Cursor
Delete Character Before Cursor
Yank
Yank Current Line
Redraw Window
Exit
Input Mode Commands in vi
NUL
-D
-H
-T
-U
-V
-W
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
Initialization in ex and vi
Command Descriptions in vi
Page Backwards
Scroll Forward
Scroll Forward by Line
Clear and Redisplay
Redraw Screen
Search for tagstring
Replace Text with Results from Shell Command
Move to Matching Character
Repeat Substitution
Return to Previous (Context or Section)
Repeat
Find Regular Expression
Execute an ex Command
Shift Left (Right)
Execute
Reverse Case
Append
Move Backward to Preceding Word
Change to End-of-Line
Delete
Delete to End-of-Line
Join
Mark Position
Repeat Regular Expression Find (Forward and Reverse)
Insert Empty Line (Below and Above)
Put from Buffer (Following and Before)
Replace Character
Replace Characters
Undo
Yank
Yank Current Line
Redraw Window
Input Mode Commands in vi
NUL
-D
-T
-V
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
wait
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 8
wc
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
what
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 8
who
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
write
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
xargs
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
xgettext
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
yacc
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
Code File
Header File
Description File
EXTENDED DESCRIPTION
Input Language
Lexical Structure of the Grammar
Declarations Section
Grammar Rules in yacc
Programs Section
Input Grammar
Conflicts
Error Handling
Interface to the Lexical Analyzer
Completing the Program
Yacc Library
Debugging the Parser
Algorithms
Limits
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
zcat
NAME
SYNOPSIS
DESCRIPTION
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index |
XBD |
XSH |
XCU |
XRAT ]
===== susv5-html/utilities/xargs.html =====
xargs
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
xargs — construct argument lists and invoke utility
SYNOPSIS
[XSI] xargs [-prtx] [-E
eofstr|-0] [-I replstr|-L
number|-n number]
[-s size] [utility
[argument...]]
DESCRIPTION
The xargs utility shall construct a command line consisting of the utility and argument operands specified
followed by as many arguments read in sequence from standard input as fit in length and number constraints specified by the
options. The xargs utility shall then invoke the constructed command line and wait for its completion. This sequence shall
be repeated until one of the following occurs:
An end-of-file condition is detected on standard input.
An argument consisting of just the logical end-of-file string (see the -E eofstr option) is found on standard
input after double-quote processing,  processing, and -escape processing (see next paragraph).
All arguments up to but not including the argument consisting of just the logical end-of-file string shall be used as arguments in
constructed command lines.
An invocation of a constructed command line returns an exit status of 255.
If the -0 option is not specified, the application shall ensure that arguments in the standard input are delimited by
unquoted  characters, unescaped  characters, or  characters, and quoting characters shall
be interpreted as follows:
A string of zero or more non-double-quote ('"' ) non- characters can be quoted by enclosing them in
double-quotes.
A string of zero or more non- ('\'') non- characters can be quoted by enclosing them
in  characters.
Any unquoted character can be escaped by preceding it with a .
Multiple adjacent delimiter characters shall be treated as a single delimiter. If the standard input is not empty and does not
end with a , the behavior is undefined (because the requirement in STDIN that the input is a text file is not met in
that case).
If the -0 option is specified, the application shall ensure that arguments in the standard input are delimited by null
bytes. If multiple adjacent null bytes occur in the input, each null byte shall be treated as a delimiter. If the standard input is
not empty and does not end with a null byte, xargs should ignore the trailing non-null bytes (as this can signal incomplete
data) but may use them as the last argument passed to utility.
The utility named by utility shall be executed zero or more times until the end-of-file is reached or the logical end-of
file string is found. If no arguments are supplied on standard input, the utility named by utility shall be executed zero
times if the -r option is specified and shall be executed exactly once if the -r option is not specified. The results
are unspecified if the utility named by utility attempts to read from its standard input.
The generated command line length shall be the sum of the size in bytes of the utility name and each argument treated as
strings, including a null byte terminator for each of these strings. The xargs utility shall limit the command line length
such that when the command line is invoked, the combined argument and environment lists (see the exec family of functions in
the System Interfaces volume of POSIX.1-2024) shall not exceed {ARG_MAX}-2048 bytes. Within this constraint, if neither the
-n nor the -s option is specified, the default command line length shall be at least {LINE_MAX}.
OPTIONS
The xargs utility shall conform to XBD 12.2 Utility Syntax
Guidelines.
The following options shall be supported:
-E eofstr
Use eofstr as the logical end-of-file string. If neither -E nor -0 is specified, it is unspecified whether
the logical end-of-file string is the  character ('_') or the end-of-file string capability is disabled.
When eofstr is the null string, the logical end-of-file string capability shall be disabled and
characters shall be taken literally.
-I replstr
[XSI]
Insert mode: invoke utility for each argument from standard input. If -0 is not specified, arguments in the standard
input shall be delimited only by unescaped  characters, not by  characters, and any unquoted unescaped
characters at the beginning of each line shall be ignored. The resulting argument shall be inserted in
arguments in place of each occurrence of replstr. At least five arguments in arguments can each contain one or
more instances of replstr. Each of these constructed arguments cannot grow larger than an implementation-defined limit
greater than or equal to 255 bytes. Option -x shall be forced on.
-L number
[XSI]
Invoke utility for each set of number arguments from standard input. The last invocation of utility shall be
with fewer arguments if fewer than number remain. If the -0 option is not specified, each line in the standard input
shall be treated as containing one argument except that empty lines shall be ignored and a line ending with a trailing unescaped
shall signal continuation to the next non-empty line, inclusive; such continuation shall result in removal of all
trailing unescaped  characters and all  characters that immediately follow them from the argument.
-n number
Invoke utility using as many standard input arguments as possible, up to number (a positive decimal integer)
arguments maximum. Fewer arguments shall be used if:
The command line length accumulated exceeds the size specified by the -s option (or {LINE_MAX} if there is no -s
option).
The last iteration has fewer than number, but not zero, operands remaining.
-p
Prompt mode: the user is asked whether to execute utility at each invocation. Trace mode (-t) is turned on to
write the command instance to be executed, followed by a prompt to standard error. An affirmative response read from
/dev/tty shall execute the command; otherwise, that particular invocation of utility shall be skipped.
-r
Do not execute the utility named by utility if no arguments are supplied on standard input.
-s size
Invoke utility using as many standard input arguments as possible yielding a command line length less than size
(a positive decimal integer) bytes. Fewer arguments shall be used if:
The total number of arguments exceeds that specified by the -n option.
[XSI]
The total number of arguments exceeds that specified by the -L option.
End-of-file is encountered on standard input before size bytes are accumulated.
Values of size up to at least {LINE_MAX} bytes shall be supported, provided that the constraints specified in the
DESCRIPTION are met. It shall not be considered an error if a value larger than that supported by the implementation or exceeding
the constraints specified in the DESCRIPTION is given; xargs shall use the largest value it supports within the
constraints.
-t
Enable trace mode. Each generated command line shall be written to standard error just prior to invocation.
-x
Terminate if a constructed command line will not fit in the implied or specified size (see the -s option above).
-0
Use a null byte as the input argument delimiter and do not treat any other input bytes as special.
If the mutually exclusive -0 and -E eofstr options are both specified, the behavior is unspecified, except
that if eofstr is the null string the behavior shall be the same as if -0 was specified without -E
eofstr.
OPERANDS
The following operands shall be supported:
utility
The name of the utility to be invoked, found by search path using the PATH environment variable, described in XBD
8. Environment Variables. If utility is omitted, the default shall
be the echo utility. If the utility operand names any of the special built-in
utilities in 2.15 Special Built-In Utilities, the results are
undefined.
argument
An initial option or operand for the invocation of utility.
STDIN
If the -0 option is not specified, the standard input shall be a text file and the results are unspecified if an
end-of-file condition is detected immediately following an escaped .
If the -0 option is specified, the standard input need not be a text file, and xargs shall process the input as
bytes, not characters.
INPUT FILES
The file /dev/tty shall be used to read responses required by the -p option.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of xargs:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_COLLATE
Determine the locale for the behavior of ranges, equivalence classes, and multi-character collating elements used in the extended
regular expression defined for the yesexpr locale keyword in the LC_MESSAGES category.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments and input files) and the behavior of character classes used in the extended regular
expression defined for the yesexpr locale keyword in the LC_MESSAGES category.
LC_MESSAGES
Determine the locale used to process affirmative responses, and the locale used to affect the format and contents of diagnostic
messages and prompts written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
PATH
Determine the location of utility, as described in XBD 8. Environment
Variables.
ASYNCHRONOUS EVENTS
Default.
STDOUT
Not used.
STDERR
The standard error shall be used for diagnostic messages and the -t and -p options. If the -t option is
specified, the utility and its constructed argument list shall be written to standard error, as it will be invoked, prior to
invocation. If -p is specified, a prompt of the following format shall be written (in the POSIX locale):
"?..."
at the end of the line of the output from -t.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
1-125
A command line meeting the specified requirements could not be assembled, one or more of the invocations of utility
returned a non-zero exit status, or some other error occurred.
126
The utility specified by utility was found but could not be invoked.
127
The utility specified by utility could not be found.
CONSEQUENCES OF ERRORS
If a command line meeting the specified requirements cannot be assembled, the utility cannot be invoked, an invocation of the
utility is terminated by a signal, or an invocation of the utility exits with exit status 255, the xargs utility shall write
a diagnostic message and exit without processing any remaining input.
The following sections are informative.
APPLICATION USAGE
The 255 exit status allows a utility being used by xargs to tell xargs to terminate if it knows no further
invocations using the current data stream will succeed. Thus, utility should explicitly exit with an appropriate value to avoid accidentally returning with 255.
Note that since input is parsed as lines (if -0 is not specified), with  characters separating arguments and
, , and double-quote characters used for quoting, if xargs is used to bundle the output
of commands like find dir -print or ls into commands to be executed, unexpected results are likely if any filenames contain
, , or quoting characters. This can be solved by using the -print0 primary of find together with the xargs -0 option, or by using find to call a script that converts each file found into a quoted string that is then piped to
xargs, but in most cases it is preferable just to have find do the argument
aggregation itself by using -exec with a '+' terminator instead of ';'. Note that the quoting rules used
by xargs are not the same as in the shell. They were not made consistent here because existing applications depend on the
current rules. An easy (but inefficient) method that can be used to transform input consisting of one argument per line into a
quoted form that xargs interprets correctly is to precede each non- character with a . More
efficient alternatives are shown in Example 2 and Example 5 below.
On implementations with a large value for {ARG_MAX}, xargs may produce command lines longer than {LINE_MAX}. For
invocation of utilities, this is not a problem. If xargs is being used to create a text file, users should explicitly set
the maximum command line length with the -s option.
The command, env, nice, nohup, time, timeout, and xargs utilities have
been specified to use exit code 127 if a utility to be invoked cannot be found, so that applications can distinguish "failure to
find a utility" from "invoked utility exited with an error indication". The value 127 was chosen because it is not commonly used
for other meanings; most utilities use small values for "normal error conditions" and the values above 128 can be confused with
termination due to receipt of a signal. The value 126 was chosen in a similar manner to indicate that the utility could be found,
but not invoked. Some scripts produce meaningful error messages differentiating the 126 and 127 cases. The distinction between exit
codes 126 and 127 is based on KornShell practice that uses 127 when all attempts to exec the utility fail with [ENOENT], and
uses 126 when any attempt to exec the utility fails for any other reason.
EXAMPLES
The following command combines the output of the parenthesized commands (minus the  characters) onto one line,
which is then appended to the file log. It assumes that the expansion of "$0 $*" does not include any
or  characters.
(logname; date; printf "'%s'\n" "$0 $*") | xargs -E "" >>log
The following command invokes diff with successive pairs of arguments originally
typed as command line arguments.
printf "%s\0" "$@" | xargs -0 -n 2 -x diff --
In the following command, the user is asked which regular files below the current directory are to be archived.
find . -type f -print0 | xargs -0 -p -L 1 ar -r arch
The following command invokes command1 one or more times with multiple arguments, stopping if an invocation of
command1 has a non-zero exit status.
xargs -E "" sh -c 'command1 "$@" || exit 255' sh  as the logical end-of-file string.
To correct this misunderstanding, the -E eofstr option was adopted from the X/Open Portability Guide. Users should
note that the description of the -E option matches historical documentation of the -e option (which was not adopted
because it did not support the Utility Syntax Guidelines), by saying that if eofstr is the null string, logical end-of-file
processing is disabled. Historical implementations of xargs actually did not disable logical end-of-file processing; they
treated a null argument found in the input as a logical end-of-file string. (A null string argument could be generated using
single or double-quotes ('"' or ""). Since this behavior was not documented historically, it is considered to be
a bug.
The -I, -L, and -n options are mutually-exclusive. Some implementations use the last one specified if more
than one is given on a command line; other implementations treat combinations of the options in different ways.
FUTURE DIRECTIONS
A future version of this standard may require that, when the -0 option is specified, if the standard input is not empty
and does not end with a null byte, xargs ignores the trailing non-null bytes.
SEE ALSO
2. Shell Command Language, diff, echo, find
XBD 8. Environment Variables, 12.2 Utility Syntax Guidelines
XSH exec
CHANGE HISTORY
First released in Issue 2.
Issue 5
A second FUTURE DIRECTION is added.
Issue 6
The obsolescent -e, -i, and -l options are removed.
The following new requirements on POSIX implementations derive from alignment with the Single UNIX Specification:
The -p option is added.
In the INPUT FILES section, the file /dev/tty is used to read responses required by the -p option.
The STDERR section is updated to describe the -p option.
The description of the -E option is aligned with the ISO POSIX-2:1993 standard.
The normative text is reworded to avoid use of the term "must" for application requirements.
Issue 7
Austin Group Interpretation 1003.1-2001 #123 is applied, changing the description of the xargs -I option.
Austin Group Interpretation 1003.1-2001 #126 is applied, changing the description of the LC_MESSAGES environment
variable.
SD5-XCU-ERN-68 is applied.
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
SD5-XCU-ERN-128 is applied, clarifying the DESCRIPTION of the logical end-of-file string.
SD5-XCU-ERN-132 is applied, updating the EXAMPLES section.
POSIX.1-2008, Technical Corrigendum 1, XCU/TC1-2008/0149 [342] is applied.
POSIX.1-2008, Technical Corrigendum 2, XCU/TC2-2008/0203 [499] is applied.
Issue 8
Austin Group Defect 243 is applied, adding the -r and -0 options.
Austin Group Defect 248 is applied, changing the EXAMPLES section.
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
Austin Group Defect 1586 is applied, adding the timeout utility.
Austin Group Defect 1594 is applied, changing the APPLICATION USAGE section.
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/lex.html =====
lex
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
lex — generate programs for lexical tasks (DEVELOPMENT)
SYNOPSIS
[CD]  lex [-t] [-n|-v] [file...]
DESCRIPTION
The lex utility shall generate C programs to be used in lexical processing of character input, and that can be used as an
interface to yacc. The C programs shall be generated from lex source code and
conform to the ISO C standard, without depending on any undefined, unspecified, or implementation-defined behavior, except in
cases where the code is copied directly from the supplied source, or in cases that are documented by the implementation. Usually,
the lex utility shall write the program it generates to the file lex.yy.c; the state of this file is unspecified if
lex exits with a non-zero exit status. See the EXTENDED DESCRIPTION section for a complete description of the lex
input language.
OPTIONS
The lex utility shall conform to XBD 12.2 Utility Syntax
Guidelines, except for Guideline 9.
The following options shall be supported:
-n
Suppress the summary of statistics usually written with the -v option. If no table sizes are specified in the lex
source code and the -v option is not specified, then -n is implied.
-t
Write the resulting program to standard output instead of lex.yy.c.
-v
Write a summary of lex statistics to the standard output. (See the discussion of lex table sizes in Definitions in lex.) If the -t option is specified and -n is not specified, this report shall
be written to standard error. If table sizes are specified in the lex source code, and if the -n option is not
specified, the -v option may be enabled.
OPERANDS
The following operand shall be supported:
file
A pathname of an input file. If more than one such file is specified, all files shall be concatenated to produce a
single lex program. If no file operands are specified, or if a file operand is '-', the standard
input shall be used.
STDIN
The standard input shall be used if no file operands are specified, or if a file operand is '-'. See
INPUT FILES.
INPUT FILES
The input files shall be text files containing lex source code, as described in the EXTENDED DESCRIPTION section.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of lex:
LANG
Provide a default value for the internationalization variables that are unset or null.
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_COLLATE
Determine the locale for the behavior of ranges, equivalence classes, and multi-character collating elements within regular
expressions.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments and input files), and the behavior of character classes within regular
expressions.
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
If the values (if any) of the LANG , LC_COLLATE , LC_CTYPE , and LC_ALL variables result in the
locale in effect for the LC_CTYPE or LC_COLLATE category not being the POSIX locale, the behavior is unspecified.
(See XBD 8.2 Internationalization Variables for the precedence of
internationalization variables used to determine the values of locale categories.)
ASYNCHRONOUS EVENTS
Default.
STDOUT
If the -t option is specified, the text file of C source code output of lex shall be written to standard
output.
If the -t option is not specified:
Implementation-defined informational, error, and warning messages concerning the contents of lex source code input shall
be written to either the standard output or standard error.
If the -v option is specified and the -n option is not specified, lex statistics shall also be written to
either the standard output or standard error, in an implementation-defined format. These statistics may also be generated if table
sizes are specified with a '%' operator in the Definitions section, as long as the -n option is not
specified.
STDERR
If the -t option is specified, implementation-defined informational, error, and warning messages concerning the contents
of lex source code input shall be written to the standard error.
If the -t option is not specified:
Implementation-defined informational, error, and warning messages concerning the contents of lex source code input shall
be written to either the standard output or standard error.
If the -v option is specified and the -n option is not specified, lex statistics shall also be written to
either the standard output or standard error, in an implementation-defined format. These statistics may also be generated if table
sizes are specified with a '%' operator in the Definitions section, as long as the -n option is not
specified.
OUTPUT FILES
A text file containing C source code shall be written to lex.yy.c, or to the standard output if the -t option is
present.
EXTENDED DESCRIPTION
Each input file shall contain lex source code, which is a table of regular expressions with corresponding actions in the
form of C program fragments.
When lex.yy.c is compiled and linked with the lex library (using the -l l operand with c17), the resulting program shall read character input from the standard input and shall
partition it into strings that match the given expressions.
When an expression is matched, these actions shall occur:
The input string that was matched shall be left in yytext as a null-terminated string; yytext shall either be an
external character array or a pointer to a character string. As explained in Definitions in lex,
the type can be explicitly selected using the %array or %pointer declarations, but the default is
implementation-defined.
The external int yyleng shall be set to the length of the matching string.
The expression's corresponding program fragment, or action, shall be executed.
During pattern matching, lex shall search the set of patterns for the single longest possible match. Among rules that
match the same number of characters, the rule given first shall be chosen.
The general format of lex source shall be:
Definitions
%%
Rules
%%
UserSubroutines
The first "%%" is required to mark the beginning of the rules (regular expressions and actions); the second
"%%" is required only if user subroutines follow.
Any line in the Definitions section beginning with a  shall be assumed to be a C program fragment and shall
be copied to the external definition area of the lex.yy.c file. Similarly, anything in the Definitions section
included between delimiter lines containing only "%{" and "%}" shall also be copied unchanged to the external
definition area of the lex.yy.c file.
Any such input (beginning with a  or within "%{" and "%}" delimiter lines) appearing at the
beginning of the Rules section before any rules are specified shall be written to lex.yy.c after the declarations of
variables for the yylex() function and before the first line of code in yylex(). Thus, user variables local to
yylex() can be declared here, as well as application code to execute upon entry to yylex().
The action taken by lex when encountering any input beginning with a  or within "%{" and
"%}" delimiter lines appearing in the Rules section but coming after one or more rules is undefined. The presence
of such input may result in an erroneous definition of the yylex() function.
C-language code in the input shall not contain C-language trigraphs. The C-language code within "%{" and "%}"
delimiter lines shall not contain any lines consisting only of "%}", or only of "%%".
Definitions in lex
Definitions appear before the first "%%" delimiter. Any line in this section not contained between "%{"
and "%}" lines and not beginning with a  shall be assumed to define a lex substitution string. The
format of these lines shall be:
name substitute
If a name does not meet the requirements for identifiers in the ISO C standard, the result is undefined. The string
substitute shall replace the string {name} when it is used in a rule. The name string shall be recognized in
this context only when the braces are provided and when it does not appear within a bracket expression or within double-quotes.
In the Definitions section, any line beginning with a  ('%') character and followed by an
alphanumeric word beginning with either 's' or 'S' shall define a set of start conditions. Any line beginning
with a '%' followed by a word beginning with either 'x' or 'X' shall define a set of exclusive start
conditions. When the generated scanner is in a %s state, patterns with no state specified shall be also active; in a
%x state, such patterns shall not be active. The rest of the line, after the first word, shall be considered to be one or
more -separated names of start conditions. Start condition names shall be constructed in the same way as definition
names. Start conditions can be used to restrict the matching of regular expressions to one or more states as described in Regular Expressions in lex.
Implementations shall accept either of the following two mutually-exclusive declarations in the Definitions section:
%array
Declare the type of yytext to be a null-terminated character array.
%pointer
Declare the type of yytext to be a pointer to a null-terminated character string.
The default type of yytext is implementation-defined. If an application refers to yytext outside of the scanner
source file (that is, via an extern), the application shall include the appropriate %array or %pointer
declaration in the scanner source file.
Implementations shall accept declarations in the Definitions section for setting certain internal table sizes. The
declarations are shown in the following table.
Table: Table Size Declarations in lex
Declaration
Description
Minimum Value
%p n
Number of positions
2500
%n n
Number of states
500
%a n
Number of transitions
2000
%e n
Number of parse tree nodes
1000
%k n
Number of packed character classes
1000
%o n
Size of the output array
3000
In the table, n represents a positive decimal integer, preceded by one or more  characters. The
exact meaning of these table size numbers is implementation-defined. The implementation shall document how these numbers affect the
lex utility and how they are related to any output that may be generated by the implementation should limitations be
encountered during the execution of lex. It shall be possible to determine from this output which of the table size values
needs to be modified to permit lex to successfully generate tables for the input language. The values in the column Minimum
Value represent the lowest values conforming implementations shall provide.
Rules in lex
The rules in lex source files are a table in which the left column contains regular expressions and the
right column contains actions (C program fragments) to be executed when the expressions are recognized.
ERE action
ERE action
...
The extended regular expression (ERE) portion of a row shall be separated from action by one or more
characters. A regular expression containing  characters shall be recognized under one of the following
conditions:
The entire expression appears within double-quotes.
The  characters appear within double-quotes or square brackets.
Each  is preceded by a  character.
User Subroutines in lex
Anything in the user subroutines section shall be copied to lex.yy.c following yylex().
Regular Expressions in lex
The lex utility shall support the set of extended regular expressions (see XBD 9.4 Extended Regular Expressions), with the following additions and exceptions
to the syntax:
"..."
Any string enclosed in double-quotes shall represent the characters within the double-quotes as themselves, except that
-escapes (which appear in the following table) shall be recognized. Any -escape sequence shall be
terminated by the closing quote. For example, "\01""1" represents a single string: the octal value 1 followed by
the character '1'.
r, r
The regular expression r shall be matched only when the program is in one of the start conditions indicated by state,
state1, and so on; see Actions in lex. (As an exception to the typographical conventions of
the rest of this volume of POSIX.1-2024, in this case  does not represent a metavariable, but the literal
angle-bracket characters surrounding a symbol.) The start condition shall be recognized as such only at the beginning of a regular
expression.
r/x
The regular expression r shall be matched only if it is followed by an occurrence of regular expression x
(x is the instance of trailing context, further defined below). The token returned in yytext shall only match
r. If the trailing portion of r matches the beginning of x, the result is unspecified. The r expression
cannot include further trailing context or the '$' (match-end-of-line) operator; x cannot include the '^'
(match-beginning-of-line) operator, nor trailing context, nor the '$' operator. That is, only one occurrence of trailing
context is allowed in a lex regular expression, and the '^' operator only can be used at the beginning of such an
expression.
{name}
When name is one of the substitution symbols from the Definitions section, the string, including the enclosing
braces, shall be replaced by the substitute value. The substitute value shall be treated in the extended regular
expression as if it were enclosed in parentheses. No substitution shall occur if {name} occurs within a bracket expression
or within double-quotes.
Within an ERE, a  character shall be considered to begin an escape sequence as specified in the
table in XBD 5. File Format Notation ('\\', '\a',
'\b', '\f', '\n', '\r', '\t', '\v'). In addition, the escape sequences in the
following table shall be recognized.
A literal  cannot occur within an ERE; the escape sequence '\n' can be used to represent a
. A  shall not be matched by a period operator.
Table: Escape Sequences in lex
Escape Sequence
Description
Meaning
\digits
A  character followed by the longest sequence of one, two, or three octal-digit characters
(01234567). If all of the digits are 0 (that is, representation of the NUL character), the behavior is undefined.
The character whose encoding is represented by the one, two, or three-digit octal integer. Multi-byte characters
require multiple, concatenated escape sequences of this type, including the leading  for each byte.
\xdigits
A  character followed by the longest sequence of hexadecimal-digit characters
(01234567abcdefABCDEF). If all of the digits are 0 (that is, representation of the NUL character), the behavior is undefined.
The character whose encoding is represented by the hexadecimal integer.
\c
A  character followed by any character not described in this table or in the table in XBD 5. File Format Notation ('\\', '\a', '\b', '\f',
'\n', '\r', '\t', '\v').
The character 'c', unchanged.
Note:
If a '\x' sequence needs to be immediately followed by a hexadecimal digit character, a sequence such as
"\x1""1" can be used, which represents a character containing the value 1, followed by the character
'1'.
The order of precedence given to extended regular expressions for lex differs from that specified in XBD
9.4 Extended Regular Expressions. The order of precedence for lex
shall be as shown in the following table, from high to low.
Note:
The escaped characters entry is not meant to imply that these are operators, but they are included in the table to show their
relationships to the true operators. The start condition, trailing context, and anchoring notations have been omitted from the
table because of the placement restrictions described in this section; they can only appear at the beginning or ending of an
ERE.
Table: ERE Precedence in lex
Extended Regular Expression
Precedence
collation-related bracket symbols
[= =] [: :] [. .]
escaped characters
\
bracket expression
[ ]
quoting
"..."
grouping
( )
definition
{name}
single-character RE duplication
* + ?
concatenation
interval expression
{m,n}
alternation
|
The ERE anchoring operators '^' and '$' do not appear in the table. With lex regular
expressions, these operators are restricted in their use: the '^' operator can only be used at the beginning of an entire
regular expression, and the '$' operator only at the end. The operators apply to the entire regular expression. Thus, for
example, the pattern "(^abc)|(def$)" is undefined; it can instead be written as two separate rules, one with the regular
expression "^abc" and one with "def$", which share a common action via the special '|' action (see
below). If the pattern were written "^abc|def$", it would match either "abc" or "def" on a line by
itself.
Unlike the general ERE rules, embedded anchoring is not allowed by most historical lex implementations. An
example of embedded anchoring would be for patterns such as "(^| )foo( |$)" to match "foo" when it
exists as a complete word. This functionality can be obtained using existing lex features:
^foo/[ \n]      |
" foo"/[ \n]    /* Found foo as a separate word. */
Note also that '$' is a form of trailing context (it is equivalent to "/\n") and as such cannot
be used with regular expressions containing another instance of the operator (see the preceding discussion of trailing
context).
The additional regular expressions trailing-context operator '/' can be used as an ordinary character if
presented within double-quotes, "/"; preceded by a , "\/"; or within a bracket expression,
"[/]". The start-condition '' operators shall be special only in a start condition at the
beginning of a regular expression; elsewhere in the regular expression they shall be treated as ordinary characters.
Actions in lex
The action to be taken when an ERE is matched can be a C program fragment or the special actions described below;
the program fragment can contain one or more C statements, and can also include special actions. The empty C statement ';'
shall be a valid action; any string in the lex.yy.c input that matches the pattern portion of such a rule is effectively
ignored or skipped. However, the absence of an action shall not be valid, and the action lex takes in such a condition is
undefined.
The specification for an action, including C statements and special actions, can extend across several lines if
enclosed in braces:
ERE  { program statement
program statement }
The program statements shall not contain unbalanced curly brace preprocessing tokens.
The default action when a string in the input to a lex.yy.c program is not matched by any expression shall
be to copy the string to the output. Because the default behavior of a program generated by lex is to read the input and
copy it to the output, a minimal lex source program that has just "%%" shall generate a C program that simply
copies the input to the output unchanged.
Four special actions shall be available:
|   ECHO;   REJECT;   BEGIN
|
The action '|' means that the action for the next rule is the action for this rule. Unlike the other three actions,
'|' cannot be enclosed in braces or be -terminated; the application shall ensure that it is specified
alone, with no other actions.
ECHO;
Write the contents of the string yytext on the output.
REJECT;
Usually only a single expression is matched by a given string in the input. REJECT means "continue to the next
expression that matches the current input", and shall cause whatever rule was the second choice after the current rule to be
executed for the same input. Thus, multiple rules can be matched and executed for one input string or overlapping input strings.
For example, given the regular expressions "xyz" and "xy" and the input "xyz", usually only the regular
expression "xyz" would match. The next attempted match would start after z. If the last action in the
"xyz" rule is REJECT, both this rule and the "xy" rule would be executed. The REJECT action may be
implemented in such a fashion that flow of control does not continue after it, as if it were equivalent to a goto to another
part of yylex(). The use of REJECT may result in somewhat larger and slower scanners.
BEGIN
The action:
BEGIN newstate;
switches the state (start condition) to newstate. If the string newstate has not been declared
previously as a start condition in the Definitions section, the results are unspecified. The initial state is indicated by
the digit '0' or the token INITIAL.
The functions or macros described below are accessible to user code included in the lex input. It is
unspecified whether they appear in the C code output of lex, or are accessible only through the -l l operand to
c17 (the lex library).
int yylex(void)
Performs lexical analysis on the input; this is the primary function generated by the lex utility. The function shall return
zero when the end of input is reached; otherwise, it shall return non-zero values (tokens) determined by the actions that are
selected.
int yymore(void)
When called, indicates that when the next input string is recognized, it is to be appended to the current value of yytext
rather than replacing it; the value in yyleng shall be adjusted accordingly.
int yyless(int n)
Retains n initial characters in yytext, NUL-terminated, and treats the remaining characters as if they had not been
read; the value in yyleng shall be adjusted accordingly.
int input(void)
Returns the next character from the input, or zero on end-of-file. It shall obtain input from the stream pointer yyin,
although possibly via an intermediate buffer. Thus, once scanning has begun, the effect of altering the value of yyin is
undefined. The character read shall be removed from the input stream of the scanner without any processing by the scanner.
int unput(int c)
Returns the character 'c' to the input; yytext and yyleng are undefined until the next expression is
matched. The result of using unput() for more characters than have been input is unspecified.
The following functions shall appear only in the lex library accessible through the -l l
operand; they can therefore be redefined by a conforming application:
int yywrap(void)
Called by yylex() at end-of-file; the default yywrap() shall always return 1. If the application requires
yylex() to continue processing with another source of input, then the application can include a function yywrap(),
which associates another file with the external variable FILE * yyin and shall return a value of zero.
int main(int argc, char *argv[])
Calls yylex() to perform lexical analysis, then exits. The user code can contain main() to perform
application-specific operations, calling yylex() as applicable.
Except for input(), unput(), and main(), all external and static names generated by lex
shall begin with the prefix yy or YY.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
Conforming applications are warned that in the Rules section, an ERE without an action is not acceptable, but need not be
detected as erroneous by lex. This may result in compilation or runtime errors.
The purpose of input() is to take characters off the input stream and discard them as far as the lexical
analysis is concerned. A common use is to discard the body of a comment once the beginning of a comment is recognized.
The lex utility is not fully internationalized in its treatment of regular expressions in the lex
source code or generated lexical analyzer. It would seem desirable to have the lexical analyzer interpret the regular expressions
given in the lex source according to the environment specified when the lexical analyzer is executed, but this is not
possible with the current lex technology. Furthermore, the very nature of the lexical analyzers produced by lex must
be closely tied to the lexical requirements of the input language being described, which is frequently locale-specific anyway. (For
example, writing an analyzer that is used for French text is not automatically useful for processing other languages.)
EXAMPLES
The following is an example of a lex program that implements a rudimentary scanner for a Pascal-like syntax:
%{
/* Need this for the call to atof() below. */
#include
/* Need this for printf(), fopen(), and stdin below. */
#include
%}
DIGIT    [0-9]
ID       [a-z][a-z0-9]*
%%
{DIGIT}+ {
printf("An integer: %s (%d)\n", yytext,
atoi(yytext));
}
{DIGIT}+"."{DIGIT}*        {
printf("A float: %s (%g)\n", yytext,
atof(yytext));
}
if|then|begin|end|procedure|function        {
printf("A keyword: %s\n", yytext);
}
{ID}    printf("An identifier: %s\n", yytext);
"+"|"-"|"*"|"/"        printf("An operator: %s\n", yytext);
"{"[^}\n]*"}"    /* Eat up one-line comments. */
[ \t\n]+        /* Eat up white space. */
.  printf("Unrecognized character: %s\n", yytext);
%%
int main(int argc, char *argv[])
{
++argv, --argc;  /* Skip over program name. */
if (argc > 0)
yyin = fopen(argv[0], "r");
else
yyin = stdin;
yylex();
}
RATIONALE
Even though references to the C language are retained in this description, lex may be generalized to other languages, as
was done at one time for EFL, the Extended FORTRAN Language. Since the lex input specification is essentially
language-independent, versions of this utility could be written to produce Ada, Modula-2, or Pascal code, and there are known
historical implementations that do so.
The current description of lex bypasses the issue of dealing with internationalized EREs in the lex
source code or generated lexical analyzer. If it follows the model used by awk (the
source code is assumed to be presented in the POSIX locale, but input and output are in the locale specified by the environment
variables), then the tables in the lexical analyzer produced by lex would interpret EREs specified in the lex source
in terms of the environment variables specified when lex was executed. The desired effect would be to have the lexical
analyzer interpret the EREs given in the lex source according to the environment specified when the lexical analyzer is
executed, but this is not possible with the current lex technology.
The description of octal and hexadecimal-digit escape sequences agrees with the ISO C standard use of escape
sequences.
Earlier versions of this standard allowed for implementations with bytes other than eight bits, but this has been
modified in this version.
There is no detailed output format specification. The observed behavior of lex under four different
historical implementations was that none of these implementations consistently reported the line numbers for error and warning
messages. Furthermore, there was a desire that lex be allowed to output additional diagnostic messages. Leaving message
formats unspecified avoids these formatting questions and problems with internationalization.
Although the %x specifier for exclusive start conditions is not historical practice, it is believed
to be a minor change to historical implementations and greatly enhances the usability of lex programs since it permits an
application to obtain the expected functionality with fewer statements.
The %array and %pointer declarations were added as a compromise between historical systems. The
System V-based lex copies the matched text to a yytext array. The flex program, supported in BSD and GNU
systems, uses a pointer. In the latter case, significant performance improvements are available for some scanners. Most historical
programs should require no change in porting from one system to another because the string being referenced is null-terminated in
both cases. (The method used by flex in its case is to null-terminate the token in place by remembering the character that
used to come right after the token and replacing it before continuing on to the next scan.) Multi-file programs with external
references to yytext outside the scanner source file should continue to operate on their historical systems, but would
require one of the new declarations to be considered strictly portable.
The description of EREs avoids unnecessary duplication of ERE details because their meanings within a lex
ERE are the same as that for the ERE in this volume of POSIX.1-2024.
The reason for the undefined condition associated with text beginning with a  or within "%{"
and "%}" delimiter lines appearing in the Rules section is historical practice. Both the BSD and System V
lex copy the indented (or enclosed) input in the Rules section (except at the beginning) to unreachable areas of the
yylex() function (the code is written directly after a break
statement). In some cases, the System V lex generates an error message or a syntax error, depending on the form of indented
input.
The intention in breaking the list of functions into those that may appear in lex.yy.c versus those
that only appear in libl.a is that only those functions in libl.a can be reliably redefined by a conforming
application.
The descriptions of standard output and standard error are somewhat complicated because historical lex
implementations chose to issue diagnostic messages to standard output (unless -t was given). POSIX.1-2024 allows this
behavior, but leaves an opening for the more expected behavior of using standard error for diagnostics. Also, the System V behavior
of writing the statistics when any table sizes are given is allowed, while BSD-derived systems can avoid it. The programmer can
always precisely obtain the desired results by using either the -t or -n options.
The OPERANDS section does not mention the use of - as a synonym for standard input; not all historical
implementations support such usage for any of the file operands.
A description of the translation table was deleted from early proposals because of its relatively low usage
in historical applications.
The change to the definition of the input() function that allows buffering of input presents the opportunity
for major performance gains in some applications.
The following examples clarify the differences between lex regular expressions and regular expressions
appearing elsewhere in this volume of POSIX.1-2024. For regular expressions of the form "r/x", the string matching
r is always returned; confusion may arise when the beginning of x matches the trailing portion of r. For
example, given the regular expression "a*b/cc" and the input "aaabcc", yytext would contain the string
"aaab" on this match. But given the regular expression "x*/xy" and the input "xxxy", the token
xxx, not xx, is returned by some implementations because xxx matches "x*".
In the rule "ab*/bc", the "b*" at the end of r extends r's match into the beginning
of the trailing context, so the result is unspecified. If this rule were "ab/bc", however, the rule matches the text
"ab" when it is followed by the text "bc". In this latter case, the matching of r cannot extend into the
beginning of x, so the result is specified.
FUTURE DIRECTIONS
None.
SEE ALSO
c17, ed, yacc
XBD 5. File Format Notation, 8. Environment Variables, 9. Regular
Expressions, 12.2 Utility Syntax Guidelines
CHANGE HISTORY
First released in Issue 2.
Issue 6
This utility is marked as part of the C-Language Development Utilities option.
The obsolescent -c option is removed.
The normative text is reworded to avoid use of the term "must" for application requirements.
IEEE Std 1003.1-2001/Cor 2-2004, item XCU/TC2/D6/14 is applied, removing text describing behavior on
systems with bytes consisting of more than eight bits.
Issue 7
Austin Group Interpretation 1003.1-2001 #190 is applied, clarifying the requirements for generated code to conform to the
ISO C standard.
Austin Group Interpretation 1003.1-2001 #191 is applied, clarifying the handling of C-language trigraphs and curly
brace preprocessing tokens.
SD5-XCU-ERN-6 is applied, clarifying that Guideline 9 of the Utility Syntax Guidelines does not apply.
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
Issue 8
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
Austin Group Defect 1453 is applied, changing the ENVIRONMENT VARIABLES section.
Austin Group Defect 1517 is applied, removing a reference to the -c option from the RATIONALE section.
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/split.html =====
split
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
split — split a file into pieces
SYNOPSIS
split [-l line_count] [-a suffix_length] [file
[name]]
split -b n[k|m] [-a suffix_length] [file
[name]]
DESCRIPTION
The split utility shall read an input file and write zero or more output files. The default size of each output file
shall be 1000 lines. The size of the output files can be modified by specification of the -b or -l options. Each
output file shall be created with a unique suffix. The suffix shall consist of exactly suffix_length lowercase letters from
the POSIX locale. The letters of the suffix shall be used as if they were a base-26 digit system, with the first suffix to be
created consisting of all 'a' characters, the second with a 'b' replacing the last 'a', and so on, until
a name of all 'z' characters is created. By default, the names of the output files shall be 'x', followed by a
two-character suffix from the character set as described above, starting with "aa", "ab", "ac", and so
on, and continuing until the suffix "zz", for a maximum of 676 files.
If the number of files required exceeds the maximum allowed by the suffix length provided, such that the last allowable file
would be larger than the requested size, the split utility shall fail after creating the last file with a valid suffix;
split shall not delete the files it created with valid suffixes. If the file limit is not exceeded, the last file created
shall contain the remainder of the input file, and may be smaller than the requested size. If the input is an empty file, no output
file shall be created and this shall not be considered to be an error.
OPTIONS
The split utility shall conform to XBD 12.2 Utility Syntax
Guidelines.
The following options shall be supported:
-a suffix_length
Use suffix_length letters to form the suffix portion of the filenames of the split file. If -a is not specified, the
default suffix length shall be two. If the sum of the name operand and the suffix_length option-argument would create
a filename exceeding {NAME_MAX} bytes, an error shall result; split shall exit with a diagnostic message and no files shall
be created.
-b n
Split a file into pieces n bytes in size.
-b nk
Split a file into pieces n*1024 bytes in size.
-b nm
Split a file into pieces n*1048576 bytes in size.
-l line_count
Specify the number of lines in each resulting file piece. The line_count argument is an unsigned decimal integer. The
default is 1000. If the input does not end with a , the partial line shall be included in the last output file.
OPERANDS
The following operands shall be supported:
file
The pathname of the ordinary file to be split. If no input file is given or file is '-', the standard input
shall be used.
name
The prefix to be used for each of the files resulting from the split operation. If no name argument is given,
'x' shall be used as the prefix of the output files. The combined length of the basename of prefix and
suffix_length cannot exceed {NAME_MAX} bytes. See the OPTIONS section.
STDIN
See the INPUT FILES section.
INPUT FILES
Any file can be used as input.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of split:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments and input files).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
Default.
STDOUT
Not used.
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
The output files contain portions of the original input file; otherwise, unchanged.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
None.
EXAMPLES
In the following examples foo is a text file that contains 5000 lines.
Create five files, xaa, xab, xac, xad, and xae:
split foo
Create five files, but the suffixed portion of the created files consists of three letters, xaaa, xaab,
xaac, xaad, and xaae:
split -a 3 foo
Create three files with four-letter suffixes and a supplied prefix, bar_aaaa, bar_aaab, and bar_aaac:
split -a 4 -l 2000 foo bar_
Create as many files as are necessary to contain at most 20*1024 bytes, each with the default prefix of x and a
five-letter suffix:
split -a 5 -b 20k foo
RATIONALE
The -b option was added to provide a mechanism for splitting files other than by lines. While most uses of the -b
option are for transmitting files over networks, some believed it would have additional uses.
The -a option was added to overcome the limitation of being able to create only 676 files.
Consideration was given to deleting this utility, using the rationale that the functionality provided by this utility is
available via the csplit utility (see csplit). Upon reconsideration of the purpose of the User Portability Utilities option, it
was decided to retain both this utility and the csplit utility because users use both
utilities and have historical expectations of their behavior. Furthermore, the splitting on byte boundaries in split cannot
be duplicated with the historical csplit.
The text "split shall not delete the files it created with valid suffixes" would
normally be assumed, but since the related utility, csplit, does delete files under
some circumstances, the historical behavior of split is made explicit to avoid misinterpretation.
Earlier versions of this standard allowed a -line_count option. This form is no longer specified by POSIX.1-2024
but may be present in some implementations.
FUTURE DIRECTIONS
If this utility is directed to create a new directory entry that contains any bytes that have the encoded value of a
character, implementations are encouraged to treat this as an error. A future version of this standard may require
implementations to treat this as an error.
SEE ALSO
csplit
XBD 8. Environment Variables, 12.2 Utility Syntax Guidelines
CHANGE HISTORY
First released in Issue 2.
Issue 6
This utility is marked as part of the User Portability Utilities option.
The APPLICATION USAGE section is added.
The obsolescent SYNOPSIS is removed.
Issue 7
Austin Group Interpretation 1003.1-2001 #027 is applied.
The split utility is moved from the User Portability Utilities option to the Base. User Portability Utilities is now an
option for interactive utilities.
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
POSIX.1-2008, Technical Corrigendum 2, XCU/TC2-2008/0188 [731] is applied.
Issue 8
Austin Group Defect 251 is applied, encouraging implementations to disallow the creation of filenames containing any bytes that
have the encoded value of a  character.
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/alias.html =====
alias
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
alias — define or display aliases
SYNOPSIS
alias [alias-name[=string]...]
DESCRIPTION
The alias utility shall create or redefine alias definitions or write the values of existing alias definitions to
standard output. An alias definition provides a string value that shall replace a command name when it is encountered. For
information on valid string values, and the processing involved, see 2.3.1
Alias Substitution.
An alias definition shall affect the current shell execution environment and the execution environments of the subshells of the
current shell. When used as specified by this volume of POSIX.1-2024, the alias definition shall not affect the parent process of
the current shell nor any utility environment invoked by the shell; see 2.13
Shell Execution Environment.
OPTIONS
None.
OPERANDS
The following operands shall be supported:
alias-name
Write the alias definition to standard output.
alias-name=string
Assign the value of string to the alias alias-name.
If no operands are given, all alias definitions shall be written to standard output.
STDIN
Not used.
INPUT FILES
None.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of alias:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
Default.
STDOUT
The format for displaying aliases (when no operands or only name operands are specified) shall be:
"%s=%s\n", name, value
The value string shall be written with appropriate quoting so that it is suitable for reinput to the shell. See the
description of shell quoting in 2.2 Quoting.
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
One of the name operands specified did not have an alias definition, or an error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
This utility is required to be intrinsic. See 1.7 Intrinsic Utilities
for details.
Care should be taken to avoid alias values that end with a character that could be treated as part of an operator token, as it
is unspecified whether the character that follows the alias name in the input can be used as part of the same token (see 2.3.1 Alias Substitution). For example, with:
$ alias foo='echo 0'
$ foo>&2
the shell can either pass the argument '0' to echo and redirect fd 1 to fd 2,
or pass no arguments to echo and redirect fd 0 to fd 2. Changing it to:
$ alias foo='echo "0"'
avoids this problem. The alternative of adding a  after the '0' would also avoid the problem, but in addition
it would alter the way the alias works, as described in 2.3.1 Alias
Substitution.
Likewise, given:
$ alias foo='some_command &'
$ foo&
the shell may combine the two '&' characters into an && (and) operator. Since the alias cannot pass
arguments to some_command and thus can be expected to be invoked without arguments, adding a  after the
'&' would be an acceptable way to prevent this. Alternatively, the alias could be specified as a grouping command:
$ alias foo='{ some_command & }'
Problems can occur for tokens other than operators as well, if the alias is used in unusual ways. For example, with:
$ alias foo='echo $'
$ foo((123))
some shells combine the '$' and the "((123))" to form an arithmetic expansion, but others do not (resulting in a
syntax error).
EXAMPLES
Create a short alias for a commonly used ls command:
alias lf="ls -CF"
Create a simple "redo" command to repeat previous entries in the command history file:
alias r='fc -s'
Use 1K units for du:
alias du=du\ -k
Set up nohup so that it can deal with an argument that is itself an alias name:
alias nohup="nohup "
Add the -F option to interactive uses of ls, even when executed as
xargs ls or xargs -0 ls:
alias ls='ls -F'
alias xargs='xargs '
alias -- -0='-0 '
find . [...] -print | xargs ls      # breaks on filenames with \n
# (two aliases expanded)
find . [...] -print0 | xargs -0 ls  # minimizes \n issues (three
# aliases expanded)
RATIONALE
The alias description is based on historical KornShell implementations. Known differences exist between that and the C
shell. The KornShell version was adopted to be consistent with all the other KornShell features in this volume of POSIX.1-2024,
such as command line editing.
Since alias affects the current shell execution environment, it is generally provided as a shell regular built-in.
Historical versions of the KornShell have allowed aliases to be exported to scripts that are invoked by the same shell. This is
triggered by the alias -x flag; it is allowed by this volume of POSIX.1-2024 only when an explicit extension such as
-x is used. The standard developers considered that aliases were of use primarily to interactive users and that they should
normally not affect shell scripts called by those users; functions are available to such scripts.
Historical versions of the KornShell had not written aliases in a quoted manner suitable for reentry to the shell, but this
volume of POSIX.1-2024 has made this a requirement for all similar output. Therefore, consistency was chosen over this detail of
historical practice.
FUTURE DIRECTIONS
None.
SEE ALSO
2.9.5 Function Definition Command
XBD 8. Environment Variables
CHANGE HISTORY
First released in Issue 4.
Issue 6
This utility is marked as part of the User Portability Utilities option.
The APPLICATION USAGE section is added.
Issue 7
The alias utility is moved from the User Portability Utilities option to the Base. User Portability Utilities is now an
option for interactive utilities.
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
The first example is changed to remove the creation of an alias for a standard utility that alters its behavior to be
non-conforming.
Issue 8
Austin Group Defect 854 is applied, adding a note to the APPLICATION USAGE section that this utility is required to be
intrinsic.
Austin Group Defect 953 is applied, clarifying that the details of how alias replacement is performed are in the
cross-referenced section ( 2.3.1 Alias Substitution) and updating
the APPLICATION USAGE section.
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
Austin Group Defect 1630 is applied, adding a new item in EXAMPLES.
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/strip.html =====
strip
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
strip — remove unnecessary information from strippable files (DEVELOPMENT)
SYNOPSIS
[SD]  strip file...
DESCRIPTION
A strippable file is defined as a relocatable, object, or executable file. [XSI]   On
XSI-conformant systems, a strippable file can also be an archive of object or relocatable files.
The strip utility shall remove from strippable files named by the file operands any information the implementor
deems unnecessary for execution of those files. The nature of that information is unspecified. The effect of strip on object
and executable files shall be similar to the use of the -s option to c17.
[XSI]
The effect of strip on an archive of object files shall be similar to the use of the -s option to c17 for each object file in the archive.
OPTIONS
None.
OPERANDS
The following operand shall be supported:
file
A pathname referring to a strippable file.
STDIN
Not used.
INPUT FILES
The input files shall be in the form of strippable files successfully produced by any compiler defined by this volume of
POSIX.1-2024 [XSI]   or produced by creating or updating an archive of such files using the ar utility.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of strip:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
Default.
STDOUT
Not used.
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
The strip utility shall produce strippable files of unspecified format.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
None.
EXAMPLES
None.
RATIONALE
Historically, this utility has been used to remove the symbol table from a strippable file. It was included since it is known
that the amount of symbolic information can amount to several megabytes; the ability to remove it in a portable manner was deemed
important, especially for smaller systems.
The behavior of strip on object and executable files is said to be the same as the -s option to a compiler. While
the end result is essentially the same, it is not required to be identical.
XSI-conformant systems support use of strip on archive files containing object files or relocatable files.
FUTURE DIRECTIONS
None.
SEE ALSO
ar, c17
XBD 8. Environment Variables
CHANGE HISTORY
First released in Issue 2.
Issue 6
This utility is marked as part of the Software Development Utilities option.
Issue 7
Austin Group Interpretation 1003.1-2001 #103 is applied.
Issue 8
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
Austin Group Defect 1330 is applied, removing obsolescent interfaces.
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/trap.html =====
Shell Command Language
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
Please enable javascript in your browser to automatically redirect to the target page, otherwise select the link below.
2.15 Special Built-In Utilities
break
colon
continue
dot
eval
exec
exit
export
readonly
return
set
shift
times
trap
unset
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
===== susv5-html/utilities/chgrp.html =====
chgrp
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
chgrp — change the file group ownership
SYNOPSIS
chgrp [-h] group file...
chgrp -R [-H|-L|-P] group file...
DESCRIPTION
The chgrp utility shall set the group ID of the file named by each file operand to the group ID specified by the
group operand.
For each file operand, or, if the -R option is used, each file encountered while walking the directory trees
specified by the file operands, the chgrp utility shall perform actions equivalent to the chown() function defined in the System Interfaces volume of POSIX.1-2024, called with the
following arguments:
The file operand shall be used as the path argument.
The user ID of the file shall be used as the owner argument.
The specified group ID shall be used as the group argument.
Unless chgrp is invoked by a process with appropriate privileges, the set-user-ID and set-group-ID bits of a regular file
shall be cleared upon successful completion; the set-user-ID and set-group-ID bits of other file types may be cleared.
OPTIONS
The chgrp utility shall conform to XBD 12.2 Utility Syntax
Guidelines.
The following options shall be supported by the implementation:
-h
For each file operand that names a file of type symbolic link, chgrp shall attempt to set the group ID of the
symbolic link instead of the file referenced by the symbolic link.
-H
If the -R option is specified and a symbolic link referencing a file of type directory is specified on the command line,
chgrp shall change the group of the directory referenced by the symbolic link and all files in the file hierarchy below
it.
-L
If the -R option is specified and a symbolic link referencing a file of type directory is specified on the command line
or encountered during the traversal of a file hierarchy, chgrp shall change the group of the directory referenced by the
symbolic link and all files in the file hierarchy below it.
-P
If the -R option is specified and a symbolic link is specified on the command line or encountered during the traversal
of a file hierarchy, chgrp shall change the group ID of the symbolic link. The chgrp utility shall not follow the
symbolic link to any other part of the file hierarchy.
-R
Recursively change file group IDs. For each file operand that names a directory, chgrp shall change the group of
the directory and all files in the file hierarchy below it. Unless a -H, -L, or -P option is specified, it is
unspecified which of these options will be used as the default.
Specifying more than one of the mutually-exclusive options -H, -L, and -P shall not be considered an error.
The last option specified shall determine the behavior of the utility.
OPERANDS
The following operands shall be supported:
group
A group name from the group database or a numeric group ID. Either specifies a group ID to be given to each file named by one
of the file operands. If a numeric group operand exists in the group database as a group name, the group ID number
associated with that group name is used as the group ID.
file
A pathname of a file whose group ID is to be modified.
STDIN
Not used.
INPUT FILES
None.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of chgrp:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
Default.
STDOUT
Not used.
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
The utility executed successfully and all requested changes were made.
>0
An error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
Only the owner of a file or the user with appropriate privileges may change the owner or group of a file.
Some implementations restrict the use of chgrp to a user with appropriate privileges when the group specified is
not the effective group ID or one of the supplementary group IDs of the calling process.
EXAMPLES
None.
RATIONALE
The System V and BSD versions use different exit status codes. Some implementations used the exit status as a count of the
number of errors that occurred; this practice is unworkable since it can overflow the range of valid exit status values. The
standard developers chose to mask these by specifying only 0 and >0 as exit values.
The functionality of chgrp is described substantially through references to chown(). In this way, there is no duplication of effort required for describing the
interactions of permissions, multiple groups, and so on.
FUTURE DIRECTIONS
None.
SEE ALSO
chmod, chown
XBD 8. Environment Variables, 12.2 Utility Syntax Guidelines
XSH chown()
CHANGE HISTORY
First released in Issue 2.
Issue 6
New options -H, -L, and -P are added to align with the IEEE P1003.2b draft standard. These options
affect the processing of symbolic links.
IEEE PASC Interpretation 1003.2 #172 is applied, changing the CONSEQUENCES OF ERRORS section to "Default.".
IEEE Std 1003.1-2001/Cor 1-2002, item XCU/TC1/D6/15 is applied, changing the SYNOPSIS to make it clear that
-h and -R are optional.
Issue 7
SD5-XCU-ERN-8 is applied, removing the -R from the first line of the SYNOPSIS.
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
POSIX.1-2008, Technical Corrigendum 1, XCU/TC1-2008/0080 [237,341] is applied.
Issue 8
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/mailx.html =====
mailx
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
mailx — process messages
SYNOPSIS
Send Mode
mailx [-E] [-s subject] address...
Receive Mode
[UP]
mailx -e
mailx [-HiNn] [-F] [-u user]
mailx -f [-HiNn] [-F] [file]
DESCRIPTION
The mailx utility provides a message sending and receiving facility. It has two major modes, selected by the options
used: Send Mode and Receive Mode.
On systems that do not support the User Portability Utilities option, an application using mailx shall have the ability
to send messages in an unspecified manner (Send Mode). Unless the first character of one or more lines is
('~'), all characters in the input message shall appear in the delivered message, but additional characters may be
inserted in the message before it is retrieved.
[UP]  On
systems supporting the User Portability Utilities option, mail-receiving capabilities and other interactive features, Receive Mode,
described below, also shall be enabled.
Send Mode
Send Mode can be used by applications or users to send messages from the text in standard input. The message shall be passed to
the mail delivery software. The mail delivery software shall process passed messages according to the rules of IETF RFC 5322.
Receive Mode
[UP]
Receive Mode is more oriented towards interactive users. Mail can be read and sent in this interactive mode.
When reading mail, mailx provides commands to facilitate saving, deleting, and responding to messages. When sending mail,
mailx allows editing, reviewing, and other modification of the message as it is entered.
Incoming mail shall be stored in one or more unspecified locations for each user, collectively called the system mailbox
for that user. When mailx is invoked in Receive Mode, the system mailbox shall be the default place to find new mail. As
messages are read, they shall be marked to be moved to a secondary file for storage, unless specific action is taken. This
secondary file is called the mbox and is normally located in the directory referred to by the HOME environment
variable (see MBOX in the ENVIRONMENT VARIABLES section for a description of this file). Messages shall remain in this file
until explicitly removed. When the -f option is used to read mail messages from secondary files, messages shall be retained
in those files unless specifically removed. All three of these locations—system mailbox, mbox, and secondary file—are
referred to in this section as simply "mailboxes", unless more specific identification is required.
OPTIONS
The mailx utility shall conform to XBD 12.2 Utility Syntax
Guidelines.
The following options shall be supported. (Only the -E and -s subject options are required on all systems.
The other options are required only on systems supporting the User Portability Utilities option.)
-E
Discard messages with an empty message body.
-e
[UP]
Test for the presence of mail in the system mailbox. The mailx utility shall write nothing and exit with a successful return
code if there is mail to read.
-f
[UP]
Read messages from the file named by the file operand instead of the system mailbox. (See also folder.) If no
file operand is specified, read messages from mbox instead of the system mailbox.
-F
[UP]
Record the message in a file named after the first recipient. The name is the login-name portion of the address found first in the
To field in the message header. Overrides the record variable, if set (see Internal
Variables in mailx).
-H
[UP]
Write a header summary only.
-i
[UP]
Ignore interrupts. (See also ignore.)
-n
[UP]  Do
not initialize from the system default start-up file. See the EXTENDED DESCRIPTION section.
-N
[UP]  Do
not write an initial header summary.
-s subject
Set the Subject header field to subject. All characters in the subject string shall appear in the
delivered message. The results are unspecified if subject is longer than {LINE_MAX} - 10 bytes or contains a
.
-u user
[UP]
Read the system mailbox of the login name user. This shall only be successful if the invoking user has appropriate
privileges to read the system mailbox of that user.
OPERANDS
The following operands shall be supported:
address
Addressee of message. When -n is specified and no user start-up files are accessed (see the EXTENDED DESCRIPTION
section), the user or application shall ensure this is an address to pass to the mail delivery system. Any system or user start-up
files may enable aliases (see alias under Commands in mailx) that may modify the form of
address before it is passed to the mail delivery system.
file
[UP]  A
pathname of a file to be read instead of the system mailbox when -f is specified. The meaning of the file operand
shall be affected by the contents of the folder internal variable; see Internal Variables in
mailx.
STDIN
When mailx is invoked in Send Mode (the first synopsis line), standard input shall be the message to be delivered to the
specified addresses. [UP]   When in Receive Mode, user commands shall be accepted from stdin.   If the User Portability Utilities option is not supported, standard
input lines beginning with a  ('~') character produce unspecified results.
[UP]  If
the User Portability Utilities option is supported, then in both Send and Receive Modes, standard input lines beginning with the
escape character (usually  ('~')) shall affect processing as described in Command
Escapes in mailx.
INPUT FILES
When mailx is used as described by this volume of POSIX.1-2024, the file operand (see the -f option) and
the mbox shall be text files containing mail messages, formatted as described in the OUTPUT FILES section. The nature of the
system mailbox is unspecified; it need not be a file.
ENVIRONMENT VARIABLES
[UP]
Some of the functionality described in this section shall be provided on implementations that support the User Portability
Utilities option as described in the text, and is not further shaded for this option.
The following environment variables shall affect the execution of mailx:
DEAD
Determine the pathname of the file in which to save partial messages in case of interrupts or delivery errors. The default
shall be dead.letter in the directory named by the HOME variable. The behavior of mailx in saving partial
messages is unspecified if the User Portability Utilities option is not supported and DEAD is not defined with the value
/dev/null.
EDITOR
Determine the name of a utility to invoke when the edit (see Commands in mailx) or
~e (see Command Escapes in mailx) command is used. The default editor is unspecified.
[XSI]
On XSI-conformant systems it is ed.  The effects of this variable are unspecified if the User Portability Utilities option is not
supported.
HOME
Determine the pathname of the user's home directory.
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments and input files) and the handling of case-insensitive address and header field name
comparisons.
LC_TIME
This variable may determine the format and contents of the date and time strings written by mailx. This volume of
POSIX.1-2024 specifies the effects of this variable only for systems supporting the User Portability Utilities option.
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error and
informative messages written to standard output.
LISTER
Determine a string representing the command for writing the contents of the folder directory to standard output when the
folders command is given (see folders in Commands in mailx). Any string acceptable as
a command_string operand to the sh -c command shall be valid. If this
variable is null or not set, the output command shall be ls. The effects of this variable
are unspecified if the User Portability Utilities option is not supported.
MAILRC
Determine the pathname of the user start-up file. The default shall be .mailrc in the directory referred to by the
HOME environment variable. The behavior of mailx is unspecified if the User Portability Utilities option is not
supported and MAILRC is not defined with the value /dev/null.
MBOX
Determine a pathname of the file to save messages from the system mailbox that have been read. The exit command shall
override this function, as shall saving the message explicitly in another file. The default shall be mbox in the directory
named by the HOME variable. The effects of this variable are unspecified if the User Portability Utilities option is not
supported.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
PAGER
Determine a string representing an output filtering or pagination command for writing the output to the terminal. Any string
acceptable as a command_string operand to the sh -c command shall be valid.
When standard output is a terminal device, the message output shall be piped through the command if the mailx internal
variable crt is set to a value less than the total number of lines in the message; see Internal
Variables in mailx. When standard output is not a terminal device, it is unspecified whether the message output is written
directly to standard output or is subject to pagination. If the PAGER variable is null or not set, the paginator shall be
either more or another paginator utility documented in the system documentation. The
effects of this variable are unspecified if the User Portability Utilities option is not supported.
SHELL
Determine the name of a preferred command interpreter. The default shall be sh. The
effects of this variable are unspecified if the User Portability Utilities option is not supported.
TERM
If the internal variable screen is not specified, determine the name of the terminal type to indicate in an unspecified
manner the number of lines in a screenful of header summaries. If TERM is not set or is set to null, an unspecified default
terminal type shall be used and the value of a screenful is unspecified. The effects of this variable are unspecified if the User
Portability Utilities option is not supported.
TZ
This variable may determine the timezone used to calculate date and time strings written by mailx. If TZ is unset
or null, an unspecified default timezone shall be used.
VISUAL
Determine a pathname of a utility to invoke when the visual command (see Commands in
mailx) or ~v command-escape (see Command Escapes in mailx) is used. If this variable is
null or not set, the full-screen editor shall be vi. The effects of this variable are
unspecified if the User Portability Utilities option is not supported.
ASYNCHRONOUS EVENTS
When mailx is in Send Mode and standard input is not a terminal, it shall take the standard action for all signals.
In [UP]
Receive Mode, or in   Send Mode when standard input is a
terminal, if a SIGINT signal is received:
[UP]  If
in command mode, the current command, if there is one, shall be aborted, and a command-mode prompt shall be written.
If in input mode:
[UP]  If
ignore is set, mailx shall write "@\n", discard the current input line, and continue processing, bypassing
the message-abort mechanism described in item 2b.
If the interrupt was received while sending mail, either when in [UP]
Receive Mode or in   Send Mode, a message shall be written, and another subsequent interrupt, with no other intervening
characters typed, shall be required to abort the mail message. [UP]   If in Receive Mode and another interrupt is received, a
command-mode prompt shall be written.   If in Send Mode and
another interrupt is received, mailx shall terminate with a non-zero status.
In both cases listed in item b, if the message is not empty:
[UP]  If
save is enabled and the file named by DEAD can be created, the message shall be written to the file named by DEAD
. If the file exists, the message shall be written to replace the contents of the file.
If [UP]
save is not enabled, or   the file named by DEAD
cannot be created, the message shall not be saved.
The mailx utility shall take the standard action for all other signals.
STDOUT
In command and input modes, all output, including prompts and messages, shall be written to standard output.
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
Various mailx commands and command escapes can create or add to files, including the mbox, the dead-letter file,
and secondary mailboxes. When mailx is used as described in this volume of POSIX.1-2024, these files shall be text files,
formatted as follows:
line beginning with From
[one or more header fields; see Commands in mailx ]
empty line [zero or more body lines
empty line] [line beginning with From...]
where each message begins with the From  line shown, preceded by the beginning of the file or an empty
line. (The From  line is considered to be part of the message header, but not one of the header fields referred
to in Commands in mailx; thus, it shall not be affected by the discard, ignore, or
retain commands.) The formats of the remainder of the From  line and any additional header lines are
unspecified, except that none shall be empty. The format of a message body line is also unspecified, except that no line following
an empty line shall start with From ; mailx shall modify any such user-entered message body lines
(following an empty line and beginning with From ) by adding one or more characters to precede the
'F'; it may add these characters to From  lines that are not preceded by an empty line.
When a message from the system mailbox or entered by the user is not a text file, it is implementation-defined how such a
message is stored in files written by mailx.
EXTENDED DESCRIPTION
[UP]  The
functionality in the entire EXTENDED DESCRIPTION section shall be provided on implementations supporting the User Portability
Utilities option. The functionality described in this section shall be provided on implementations that support the User
Portability Utilities option (and the rest of this section is not further shaded for this option).
The mailx utility need not support for all character encodings in all circumstances. For example, inter-system mail may
be restricted to 7-bit data by the underlying network, 8-bit data need not be portable to non-internationalized systems, and so on.
Under these circumstances, it is recommended that only characters defined in the ISO/IEC 646:1991 standard International
Reference Version (equivalent to ASCII) 7-bit range of characters be used.
When mailx is invoked using one of the Receive Mode synopsis forms, it shall write a page of header-summary lines (if
-N was not specified and there are messages, see below), followed by a prompt indicating that mailx can accept
regular commands (see Commands in mailx); this is termed command mode. The page of
header-summary lines shall contain the first new message if there are new messages, or the first unread message if there are unread
messages, or the first message. When mailx is invoked using the Send Mode synopsis and standard input is a terminal, if no
subject is specified on the command line and the asksub variable is set, a prompt for the subject shall be written. At this
point, mailx shall be in input mode. This input mode shall also be entered when using one of the Receive Mode synopsis forms
and a reply or new message is composed using the reply, Reply, followup, Followup, or mail
commands and standard input is a terminal. When the message is typed and the end of the message is encountered, the message shall
be passed to the mail delivery software. Commands can be entered by beginning a line with the escape character (by default,
('~')) followed by a single command letter and optional arguments. See Commands
in mailx for a summary of these commands. It is unspecified what effect these commands will have if standard input is not a
terminal when a message is entered using either the Send Mode synopsis, or the Read Mode commands reply, Reply,
followup, Followup, or mail.
Note:
For notational convenience, this section uses the default escape character, , in all references and examples.
At any time, the behavior of mailx shall be governed by a set of environmental and internal variables. These are flags
and valued parameters that can be set and cleared via the mailx set and unset commands.
Regular commands are of the form:
[command] [msglist] [argument ...]
If no command is specified in command mode, next shall be assumed. In input mode, commands shall be recognized by
the escape character, and lines not treated as commands shall be taken as input for the message.
In command mode, each message shall be assigned a sequential number, starting with 1.
All messages have a state that shall affect how they are displayed in the header summary and how they are retained or deleted
upon termination of mailx. There is at any time the notion of a current message, which shall be marked by a
'>' at the beginning of a line in the header summary. When mailx is invoked using one of the Receive Mode
synopsis forms, the current message shall be the first new message, if there is a new message, or the first unread message if there
is an unread message, or the first message if there are any messages, or unspecified if there are no messages in the mailbox. Each
command that takes an optional list of messages (msglist) or an optional single message (message) on which to operate
shall leave the current message set to the highest-numbered message of the messages specified, unless the command deletes messages,
in which case the current message shall be set to the first undeleted message (that is, a message not in the deleted state) after
the highest-numbered message deleted by the command, if one exists, or the first undeleted message before the highest-numbered
message deleted by the command, if one exists, or to an unspecified value if there are no remaining undeleted messages. All
messages shall be in one of the following states:
new
The message is present in the system mailbox and has not been viewed by the user or moved to any other state. Messages in state
new when mailx quits shall be retained in the system mailbox.
unread
The message has been present in the system mailbox for more than one invocation of mailx and has not been viewed by the
user or moved to any other state. Messages in state unread when mailx quits shall be retained in the system
mailbox.
read
The message has been processed by one of the following commands: ~f, ~m, ~F, ~M, copy,
mbox, next, pipe, print, Print, top, type, Type, undelete. The
dp and dt commands shall also cause the message they write, if any, to be marked as read. If the
autoprint variable is set, the delete command shall also cause the message it writes, if any, to be marked as
read. Messages that are in the system mailbox and in state read when mailx quits shall be saved in the
mbox, unless the internal variable hold was set. Messages that are in the mbox or in a secondary mailbox and
in state read when mailx quits shall be retained in their current location.
deleted
The message has been processed by one of the following commands: delete, dp, dt. Messages in state
deleted when mailx quits shall be deleted. Deleted messages shall be ignored until mailx quits or changes
mailboxes or they are specified to the undelete command; for example, the message specification /string shall only search
the Subject header fields of messages that have not yet been deleted, unless the command operating on the list of messages
is undelete. No deleted message or deleted message header shall be displayed by any mailx command other than
undelete.
preserved
The message has been processed by a preserve command. When mailx quits, the message shall be retained in its
current location.
saved
The message has been processed by one of the following commands: save or write. If the current mailbox is the
system mailbox, and the internal variable keepsave is set, messages in the state saved shall be saved to the file designated
by the MBOX variable (see the ENVIRONMENT VARIABLES section). If the current mailbox is the system mailbox, messages in the
state saved shall be deleted from the current mailbox, when the quit or file command is used to exit the
current mailbox.
The header-summary line for each message shall indicate the state of the message.
Many commands take an optional list of messages (msglist) on which to operate, which defaults to the current message. A
msglist is a list of message specifications separated by  characters, which can include:
n
Message number n.
+
The next undeleted message, or the next deleted message for the undelete command.
-
The next previous undeleted message, or the next previous deleted message for the undelete command.
.
The current message.
^
The first undeleted message, or the first deleted message for the undelete command.
$
The last message.
*
All messages.
n-m
An inclusive range of message numbers.
address
All messages from address; any address as shown in a header summary shall be matchable in this form.
/string
All messages with string in the Subject header field (case ignored).
:c
All messages of type c, where c shall be one of:
d
Deleted messages.
n
New messages.
o
Old messages (any not in state read or new).
r
Read messages.
u
Unread messages.
Other commands take an optional message (message) on which to operate, which defaults to the current message. All of the
forms allowed for msglist are also allowed for message, but if more than one message is specified, only the first
shall be operated on.
Other arguments are usually arbitrary strings whose usage depends on the command involved.
Start-Up in mailx
At start-up time, mailx shall take the following steps in sequence:
Establish all variables at their stated default values.
Process command line options, overriding corresponding default values.
Import any of the DEAD , EDITOR , MBOX , LISTER , PAGER , SHELL , or VISUAL
variables that are present in the environment, overriding the corresponding default values.
Read mailx commands from an unspecified system start-up file, unless the -n option is given, to initialize any
internal mailx variables and aliases.
Process the user start-up file of mailx commands named in the user MAILRC variable.
Most regular mailx commands are valid inside start-up files, the most common use being to set up initial display options
and alias lists. The following commands shall be invalid in a start-up file: !, edit, hold, mail,
preserve, reply, Reply, Save, shell, visual, Copy, followup, and
Followup. Any errors in a start-up file shall either cause mailx to terminate with a diagnostic message and a
non-zero status or to continue after writing a diagnostic message, ignoring the remainder of the lines in the file.
A blank line in a start-up file shall be ignored.
Internal Variables in mailx
The following variables are internal mailx variables. Each internal variable can be set via the mailx set
command at any time. The unset and set noname commands can be used to erase variables.
In the following list, variables shown as:
variable
represent Boolean values. Variables shown as:
variable=value
shall be assigned string or numeric values. For string values, the rules in Commands in mailx
concerning filenames and quoting shall also apply.
The defaults specified here may be changed by the unspecified system start-up file unless the user specifies the -n
option.
allnet
All network names whose login name components match shall be treated as identical. This shall cause the msglist message
specifications to behave similarly. The default shall be noallnet. See also the alternates command and the
metoo variable.
append
Append messages to the end of the mbox file upon termination instead of placing them at the beginning. The default shall
be noappend. This variable shall not affect the save command when saving to mbox.
ask, asksub
Prompt for a value for the Subject header field on outgoing mail if one is not specified on the command line with the
-s option. The ask and asksub forms are synonyms; the system shall refer to asksub and noasksub
in its messages, but shall accept ask and noask as user input to mean asksub and noasksub. It shall not
be possible to set both ask and noasksub, or noask and asksub. The default shall be asksub, but
no prompting shall be done if standard input is not a terminal.
askbcc
Prompt for the blind copy list. The default shall be noaskbcc.
askcc
Prompt for the copy list. The default shall be noaskcc.
autoprint
Enable automatic writing of messages after delete and undelete commands. The default shall be
noautoprint.
bang
Enable the special-case treatment of  characters ('!') in ! commands and
~!command escapes; see the Invoke Shell Command command and Command Escapes in
mailx. The default shall be nobang, disabling the expansion of '!' in the command argument to the
! command and the ~!command escape.
cmd=command
Set the default command to be invoked by the pipe command. The default shall be nocmd.
crt=number
Paginate message output as described for the PAGER variable. The default shall be nocrt, disabling this
pagination. If it is set to null, the value used is implementation-defined.
debug
[XSI]
Enable verbose diagnostics for debugging. Messages are not delivered. The default shall be nodebug.
dot
When dot is set, a  on a line by itself during message input from a terminal shall also signify
end-of-file (in addition to normal end-of-file). The default shall be nodot. If ignoreeof is set (see below), a
setting of nodot shall be ignored and  and the ~. command escape are the only methods to terminate
input mode.
escape=c
Set the command escape character to be the character 'c'. By default, the command escape character shall be
. If escape is unset,  shall be used; if it is set to null, command escaping shall be
disabled.
flipr
Reverse the meanings of the R and r commands. The default shall be noflipr.
folder=directory
The default directory for saving mail files. User-specified filenames beginning with a  ('+') shall be
expanded by preceding the filename with this directory name to obtain the real pathname. If directory does not start with a
('/'), the contents of HOME shall be prefixed to it. The default shall be nofolder. If
folder is unset, user-specified filenames beginning with '+' shall refer to files in the current directory that
begin with the literal '+' character. See also outfolder below. The folder value need not affect the
processing of the files named in MBOX and DEAD .
header
Enable writing of the header summary when entering mailx in Receive Mode. The default shall be header.
hold
Disable message moving of read messages from the system mailbox to the mbox save file upon normal program termination or
folder change. This automatic mail management is complemented with the commands hold (and preserve), mbox, and
touch, which partially override the hold variable. The default shall be nohold.
ignore
Ignore interrupts while entering messages. The default shall be noignore.
ignoreeof
Ignore normal end-of-file during message input. Input can be terminated only by entering a  ('.') on a
line by itself or by the ~. command escape. The default shall be noignoreeof. See also dot above.
indentprefix=string
A string that shall be added as a prefix to each line that is inserted into the message by the ~m command escape. This
variable shall default to one .
keep
When a system mailbox, secondary mailbox, or mbox is empty, truncate it to zero length instead of removing it. The
default shall be nokeep.
keepsave
Keep the messages that have been saved from the system mailbox into other files in the file designated by the variable MBOX
, instead of deleting them. The default shall be nokeepsave.
metoo
Suppress the deletion of the user's login name from the recipient list when replying to a message or sending to a group. The
default shall be nometoo.
onehop
[XSI]
When responding to a message that was originally sent to several recipients, the other recipient addresses are normally forced to
be relative to the originating author's machine for the response. This flag disables alteration of the recipients' addresses,
improving efficiency in a network where all machines can send directly to all other machines (that is, one hop away). The default
shall be noonehop.
outfolder
Cause the files used to record outgoing messages to be located in the directory specified by the folder variable unless
the pathname is absolute. The default shall be nooutfolder. See the record variable.
page
Insert a  after each message sent through the pipe created by the pipe command. The default shall be
nopage.
prompt=string
Set the command-mode prompt to string. If string is null or if noprompt is set, no prompting shall occur. The
default shall be to prompt with the string "? ".
quiet
Refrain from writing the opening message and version when entering mailx. The default shall be noquiet.
record=file
Record all outgoing mail in the file with the pathname file. The default shall be norecord. See also
outfolder above.
save
Enable saving of messages in the dead-letter file on interrupt or delivery error. See the variable DEAD for the location
of the dead-letter file. The default shall be save.
screen=number
Set the number of lines in a screenful of headers for the headers and z commands. If screen is not specified,
a value based on the terminal type identified by the TERM environment variable, the window size, the baud rate, or some
combination of these shall be used. The default shall be noscreen.
sendwait
Wait for the background mailer to finish before returning. The default shall be nosendwait.
showto
When the sender of the message was the user who is invoking mailx, write the information from the To field
instead of the From field in the header summary. The default shall be noshowto.
sign=string
Set the variable inserted into the text of a message when the ~a command escape is given. The default shall be
nosign. The character sequences '\t' and '\n' shall be recognized in the variable as  and
characters, respectively. (See also ~i in Command Escapes in mailx.)
Sign=string
Set the variable inserted into the text of a message when the ~A command escape is given. The default shall be
noSign. The character sequences '\t' and '\n' shall be recognized in the variable as  and
characters, respectively.
toplines=number
Set the number of lines of the message to write with the top command. The default shall be 5.
Commands in mailx
The following mailx commands shall be provided. In the following list, header refers to lines from the message
header, as shown in the OUTPUT FILES section. Header field refers to a line or set of lines within the header that begins
with one or more non-white-space characters immediately followed by a  and white space, and continuing up to and
including a  that immediately precedes either the next line beginning with a non-white-space character or an empty
line. Field name refers to the portion of a header field prior to the first .
For each of the commands listed below, the command can be entered as the abbreviation (those characters in the Synopsis command
word preceding the '['), the full command (all characters shown for the command word, omitting the '[' and
']'), or any truncation of the full command down to the abbreviation. For example, the exit command (shown as
ex[it] in the Synopsis) can be entered as ex, exi, or exit.
The arguments to commands can be quoted, using the following methods:
An argument can be enclosed between paired double-quotes ("") or single-quotes (''); any white space, shell
word expansion, or  characters within the quotes shall be treated literally as part of the argument. A
double-quote shall be treated literally within single-quotes and vice versa. These special properties of the
characters shall occur only when they are paired at the beginning and end of the argument.
A  outside of the enclosing quotes shall be discarded and the following character treated literally as part of
the argument.
An unquoted  at the end of a command line shall be discarded and the next line shall continue the command.
Filenames, where expected, shall be subjected to the following transformations, in sequence:
If the filename begins with an unquoted , and the folder variable is defined (see the folder
variable), the  shall be replaced by the value of the folder variable followed by a . If the
folder variable is unset or is set to null, the filename shall be unchanged.
Shell word expansions shall be applied to the filename (see 2.6 Word
Expansions). If more than a single pathname results from this expansion and the command is expecting one file, the effects
are unspecified.
Declare Aliases
Synopsis:
a[lias] [alias [address...]]
g[roup] [alias [address...]]
Add the given addresses to the alias specified by alias. The names shall be substituted when alias is used as a
recipient address specified by the user in an outgoing message (that is, other recipients addressed indirectly through the
reply command shall not be substituted in this manner). Mail address alias substitution shall apply only when the alias
string is used as a full address; for example, when hlj is an alias, hlj@posix.com does not trigger the alias
substitution. Recursive expansion of an alias group member can be prevented by prefixing it with an unquoted . If
no arguments are given, write a listing of the current aliases to standard output. If only an alias argument is given, write
a listing of the specified alias to standard output. These listings need not reflect the same order of addresses that were
entered.
Declare Alternatives
Synopsis:
alt[ernates] name...
Declare a list of alternative addresses for the address consisting of the user's login name. When responding to a message, these
alternative addresses shall be removed from the list of recipients. The comparison of addresses shall be performed in a
case-insensitive manner. With no arguments, alternates shall write the current list of alternative addresses.
Change Current Directory
Synopsis:
cd [directory]
ch[dir] [directory]
Change directory. If directory is not specified, the contents of HOME shall be used.
Copy Messages
Synopsis:
c[opy] [file]
c[opy] [msglist] file
C[opy] [msglist]
Copy messages to the file named by the pathname file without marking the messages as saved. Otherwise, it shall be
equivalent to the save command.
In the capitalized form, save the specified messages in a file whose name is derived from the author of the message to be saved,
without marking the messages as saved. Otherwise, it shall be equivalent to the Save command.
Delete Messages
Synopsis:
d[elete] [msglist]
Mark messages for deletion from the mailbox. The deletions shall not occur until mailx quits (see the quit
command) or changes mailboxes (see the folder command). If autoprint is set and there are messages remaining after
the delete command, the current message shall be written as described for the print command (see the print
command); otherwise, the mailx prompt shall be written.
Discard Header Fields
Synopsis:
di[scard] [field-name...]
ig[nore] [field-name...]
Suppress header fields with the specified field names when writing messages. Specified field-name arguments shall be
added to the list of suppressed field names. Examples of field names to ignore are status and cc. The header fields
shall be included when the message is saved. The Print and Type commands shall override this command. The comparison
of field names shall be performed in a case-insensitive manner. If no arguments are specified, write a list of the currently
suppressed field names to standard output; the listing need not reflect the same order of field names that were entered.
If both retain and discard commands are given, discard commands shall be ignored.
Delete Messages and Display
Synopsis:
dp [msglist]
dt [msglist]
Delete the specified messages as described for the delete command, except that the autoprint variable shall have
no effect, and the current message shall be written only if it was set to a message after the last message deleted by the command.
Otherwise, an informational message to the effect that there are no further messages in the mailbox shall be written, followed by
the mailx prompt.
Echo a String
Synopsis:
ec[ho] string ...
Echo the given strings, equivalent to the shell echo utility.
Edit Messages
Synopsis:
e[dit] [msglist]
Edit the given messages. The messages shall be placed in a temporary file and the utility named by the EDITOR variable is
invoked to edit each file in sequence. The default EDITOR is unspecified.
The edit command does not modify the contents of those messages in the mailbox.
Exit
Synopsis:
ex[it]
x[it]
Exit from mailx without performing automatic message moving, or any other management tasks. See also quit.
Change Folder
Synopsis:
fi[le] [file]
fold[er] [file]
If no argument is given, write the name and status of the current mailbox. Otherwise, close the current file of messages after
performing actions as specified for the quit command (except for terminating mailx) and then read in the file named
by the pathname file. The behavior is unspecified if file is not a valid mbox.
Several unquoted special characters shall be recognized when used as file names, with the following substitutions:
%
The system mailbox for the invoking user.
%user
The system mailbox for user.
#
The previous file.
&
The current mbox.
+file
The named file in the folder directory. (See the folder variable.)
The default file shall be the current mailbox.
Display List of Folders
Synopsis:
folders
Write the names of the files in the directory set by the folder variable. The command specified by the LISTER
environment variable shall be used (see the ENVIRONMENT VARIABLES section).
Follow Up Specified Messages
Synopsis:
fo[llowup] [message]
F[ollowup] [msglist]
The followup and Followup commands shall be equivalent to reply and Reply, respectively, except
that:
They shall ignore the record variable.
The followup command shall record the response in a file whose name is derived from the author of the message.
The Followup command shall record the response in a file whose name is derived from the author of the first message in
the msglist.
See also the save and copy commands and outfolder.
Display Header Summary for Specified Messages
Synopsis:
f[rom] [msglist]
Write the header summary for the specified messages.
Display Header Summaries
Synopsis:
h[eaders] [message]
Write the page of header summaries that includes the message specified. If the message argument is not specified, the
current message shall not change. However, if the message argument is specified, the current message shall become the
message that appears at the top of the page of header summaries that includes the message specified. The screen variable
sets the number of header summaries per page. See also the z command.
Help
Synopsis:
hel[p]
?
Write a summary of commands.
Hold Messages
Synopsis:
ho[ld] [msglist]
pre[serve] [msglist]
Allowed only in the system mailbox. Mark the messages in msglist to be preserved, as if the hold variable were
set, upon normal termination or when the folder is changed. This shall override any commands that might previously have marked the
messages to be deleted, and only the delete, dp, or dt, as well as the mbox and touch commands,
shall remove the preserve mark of a message.
Execute Commands Conditionally
Synopsis:
i[f] s|r
mail-commands
el[se]
mail-commands
en[dif]
Execute commands conditionally, where if s executes the following mail-commands, up to an else or
endif, if the program is in Send Mode, and if r shall cause the mail-commands to be executed only in
Receive Mode.
List Available Commands
Synopsis:
l[ist]
Write a list of all commands available. No explanation shall be given.
Mail a Message
Synopsis:
m[ail] address...
Mail a message to the specified addresses or aliases.
Direct Messages to mbox
Synopsis:
mb[ox] [msglist]
Allowed only in the system mailbox. Arrange for the given messages to end up in the secondary mailbox, overriding a possibly set
hold variable, upon normal termination or when the folder is changed. Overrides a former hold or preserve
request. See MBOX in the ENVIRONMENT VARIABLES section. See also the exit and quit commands.
Process Next Specified Message
Synopsis:
n[ext] [message]
If the current message has not been written (for example, by the print command) since mailx started or since any
other message was the current message, behave as if the print command was entered. Otherwise, if there is an undeleted
message after the current message, make it the current message and behave as if the print command was entered. Otherwise, an
informational message to the effect that there are no further messages in the mailbox shall be written, followed by the
mailx prompt. Should the current message location be the result of an immediately preceding hold, mbox,
preserve, or touch command, next shall act as if the current message has already been written.
Pipe Message
Synopsis:
pi[pe] [[msglist] command]
| [[msglist] command]
Pipe the messages through the given command by invoking the command interpreter specified by SHELL with three
arguments: "-c", "--", and command. (See also sh -c.) The
application shall ensure that the command is given as a single argument. Quoting, described previously, can be used to accomplish
this. If no arguments are given, the current message shall be piped through the command specified by the value of the cmd
variable. If the page variable is set, a  shall be inserted after each message.
Display Message with Header
Synopsis:
P[rint] [msglist]
T[ype] [msglist]
Write the specified messages, including all header fields, to standard output. This command shall override suppression of header
fields by the discard, ignore, and retain commands. If crt is set, the output shall be paginated as
described for the PAGER variable.
Display Message
Synopsis:
p[rint] [msglist]
t[ype] [msglist]
Write the specified messages to standard output. If crt is set, the output shall be paginated as described for the
PAGER variable.
Quit
Synopsis:
q[uit]
end-of-file
Terminate mailx normally, performing automatic message moving as specified in the description of the variable
hold, deleting messages that have been explicitly saved (unless keepsave is set), discarding messages that have been
deleted, and saving all remaining messages in the mailbox.
Reply to a Message or a Message List
Synopsis:
r[eply] [message]
r[espond] [message]
R[eply] [msglist]
R[espond] [msglist]
Mail a reply message to one or more addresses taken from certain header fields in the specified message or message list. If the
flipr variable is unset, these commands shall behave as described below. If the flipr variable is set, commands in
the lowercase form shall behave as described below for commands in the capitalized form, and vice versa; the synopsis forms
shown above shall also be swapped accordingly.
The recipients of the reply message shall be determined by first constructing an initial list of recipients and then modifying
it to form the list that is in effect when mailx enters input mode.
In the capitalized form, the initial list of recipients shall be taken from the header of each message in the msglist as
follows:
If the header contains a Reply-To field, the address or addresses in that field shall be added to the list.
Otherwise, the address or addresses in the From field of the header shall be added to the list.
In the lowercase form, the initial list of recipients shall be taken from the header of the message as follows:
If the header does not contain a Reply-To field, all of the addresses in the From, To, and Cc fields
shall be included in the list.
Otherwise, it is implementation-defined whether all of the addresses in the Reply-To, To, and Cc fields are
included in the list or only the address or addresses in the Reply-To field.
The initial list of recipients shall be marked for placement in the header fields of the reply message as follows. Recipient
addresses taken from a From or Reply-To header field shall be marked for placement in the To field of the
reply message. Recipient addresses taken from a Cc header field shall be marked for placement in the Cc field of the
reply message. Recipient addresses taken from a To header field shall be marked for placement in either the To or the
Cc field of the reply message. Implementations shall provide a way to place them in the To field. Implementations
may, but need not, provide an implementation-defined way to place them in the Cc field.
The modifications applied to the initial list of recipients shall be as follows:
If the metoo variable is unset, addresses consisting of the login name of the user and any alternative addresses declared
using the alternates command shall be removed from the list.
The set of recipients marked for placement in the To header field of the reply message shall have duplicates within that
set removed.
The set of recipients marked for placement in the Cc header field of the reply message shall have duplicates within that
set removed and may have recipients that are also marked for placement in the To field removed.
The values for the To and Cc header fields of the reply message shall be constructed from the addresses in the
modified list of recipients that are marked for placement in each of those fields.
The value for the Subject header field of the reply message shall be formed from the value of the Subject header
field of the message or the first message in msglist by prefixing it with Re:, unless it already
begins with that string.
The values of the To, Cc, and Subject header fields set as described above can be modified by the user
after mailx enters input mode through the use of the ~t, ~c, ~s, and ~h command escapes.
If record is set to a pathname, the response shall be saved at the end of that file.
Retain Header Fields
Synopsis:
ret[ain] [field-name...]
Retain header fields with the specified field names when writing messages. This command shall override all discard and
ignore commands. The comparison of field names shall be performed in a case-insensitive manner. If no arguments are
specified, write a list of the currently retained field names to standard output; the listing need not reflect the same order of
field names that were entered.
Save Messages
Synopsis:
s[ave] [file]
s[ave] [msglist] file
S[ave] [msglist]
Save the specified messages in the file named by the pathname file, or the mbox if the file argument is
omitted. The file shall be created if it does not exist; otherwise, the messages shall be appended to the file. The message shall
be put in the state saved, and shall behave as specified in the description of the saved state when the current
mailbox is exited by the quit or file command.
In the capitalized form, save the specified messages in a file whose name is derived from the author of the first message. The
name of the file shall be taken to be the author's name with all network addressing stripped off. See also the Copy,
followup, and Followup commands and outfolder variable.
Set Variables
Synopsis:
se[t] [name[=[string]] ...] [name=number ...] [noname ...]
Define one or more variables called name. The variable can be given a null, string, or numeric value. Quoting and
-escapes can occur anywhere in string, as described previously, as if the string portion of the
argument were the entire argument. The forms name and name= shall be equivalent to name="" for variables that
take string values. The set command without arguments shall write a list of all defined variables and their values. The
no name form shall be equivalent to unset name.
Invoke a Shell
Synopsis:
sh[ell]
Invoke an interactive command interpreter (see also SHELL ).
Display Message Size
Synopsis:
si[ze] [msglist]
Write the size in bytes of each of the specified messages.
Read mailx Commands From a File
Synopsis:
so[urce] file
Read and execute commands from the file named by the pathname file and return to command mode.
Display Beginning of Messages
Synopsis:
to[p] [msglist]
Write the top few lines of each of the specified messages. If the toplines variable is set, it is taken as the number of
lines to write. The default shall be 5.
Touch Messages
Synopsis:
tou[ch] [msglist]
Allowed only in the system mailbox. Touch the specified messages. Unless overridden by the hold variable, any message in
msglist that is not specifically deleted nor saved in a file shall be placed in the mbox upon normal termination or
when the folder is changed. Overrides a former hold or preserve request.
Delete Aliases
Synopsis:
una[lias] [alias]...
Delete the specified alias names. If a specified alias does not exist, the results are unspecified.
Undelete Messages
Synopsis:
u[ndelete] [msglist]
Change the state of the specified messages from deleted to read. If autoprint is set, the last message of those restored
shall be written. If msglist is not specified, the message shall be selected as follows:
If there are any deleted messages that follow the current message, the first of these shall be chosen.
Otherwise, the last deleted message that also precedes the current message shall be chosen.
Unset Variables
Synopsis:
uns[et] name...
Cause the specified variables to be erased.
Edit Message with Full-Screen Editor
Synopsis:
v[isual] [msglist]
Edit the given messages with a screen editor. Each message shall be placed in a temporary file, and the utility named by the
VISUAL variable shall be invoked to edit each file in sequence. The default editor shall be vi.
The visual command does not modify the contents of those messages in the mailbox.
Write Messages to a File
Synopsis:
w[rite] [msglist] file
Write the given messages to the file specified by the pathname file, minus the message header. Otherwise, it shall be
equivalent to the save command.
Scroll Header Display
Synopsis:
z[+|-]
Scroll the header display forward (if '+' is specified or if no option is specified) or backward (if '-' is
specified) one screenful. The number of header summaries written shall be set by the screen variable.
Invoke Shell Command
Synopsis:
!command
Invoke the command interpreter specified by SHELL with three arguments: "-c", "--", and command.
(See also sh -c.) If the bang variable is set, each unescaped occurrence of
'!' in command shall be replaced with the command executed by the previous ! command or ~! command
escape.
Null Command
Synopsis:
# comment
This null command (comment) shall be ignored by mailx.
Display Current Message Number
Synopsis:
=
Write the current message number.
Command Escapes in mailx
The following commands can be entered only from input mode, by beginning a line with the escape character (by default,
('~')). See the escape variable description for changing this special character. The format for the
commands shall be:
[]
where the  can be zero or more  characters.
In the following descriptions, the application shall ensure that the argument command (but not mailx-command) is a
shell command string. Any string acceptable to the command interpreter specified by the SHELL variable when it is invoked as
SHELL -c command_string shall be valid. The command can be presented as multiple arguments (that is, quoting
is not required).
Command escapes that are listed with msglist or mailx-command arguments are invalid in Send Mode and produce
unspecified results.
~! command
Invoke the command interpreter specified by SHELL with three arguments: "-c", "--", and
command; and then return to input mode. If the bang variable is set, each unescaped occurrence of '!' in
command shall be replaced with the command executed by the previous ! command or ~! command escape.
~.
Simulate end-of-file (terminate message input).
~: mailx-command, ~_ mailx-command
Perform the command-level request.
~?
Write a summary of command escapes.
~A
This shall be equivalent to ~i Sign.
~a
This shall be equivalent to ~i sign.
~b name...
Add the names to the blind carbon copy (Bcc) list.
~c name...
Add the names to the carbon copy (Cc) list.
~d
Read in the dead-letter file. See DEAD for a description of this file.
~e
Invoke the editor, as specified by the EDITOR environment variable, on the partial message.
~f [msglist]
Forward the specified messages. The specified messages, including their headers, shall be inserted into the current message
without alteration. The header fields included in each header shall be affected by the discard, ignore, and
retain commands.
~F [msglist]
This shall be the equivalent of the ~f command escape, except that all header fields shall be included in the message
headers, regardless of previous discard, ignore, and retain commands.
~h
If standard input is a terminal, prompt for values for the Subject, To, Cc, and Bcc header fields.
Other implementation-defined header fields may also be presented for editing. If the header field is written with an initial value,
it can be edited as if it had just been typed.
~i string
Insert the value of the named variable, followed by a , into the text of the message. If the string is unset or
null, the message shall not be changed.
~m [msglist]
Insert the specified messages, including their headers, into the current message, prefixing non-empty lines with the string in
the indentprefix variable. The header fields included in each header shall be affected by the discard, ignore,
and retain commands.
~M [msglist]
This shall be the equivalent of the ~m command escape, except that all header fields shall be included in the message
headers, regardless of previous discard, ignore, and retain commands.
~p
Write the message being entered. If the message is longer than crt lines (see Internal
Variables in mailx), the output shall be paginated as described for the PAGER variable.
~q
Quit (see the quit command) from input mode by simulating an interrupt. If the body of the message is not empty, the
partial message shall be saved in the dead-letter file. See DEAD for a description of this file.
~r file, ~ ('!'), the
rest of the string shall be taken as an arbitrary system command; the command interpreter specified by SHELL shall be
invoked with three arguments: "-c", "--", and command. The standard output of command shall be
inserted into the message.
~s string
Set the value for the Subject header field to string.
~t name...
Add the given names to the To list.
~v
Invoke the full-screen editor, as specified by the VISUAL environment variable, on the partial message.
~w file
Write the partial message, without the header, onto the file named by the pathname file. The file shall be created or
the message shall be appended to it if the file exists.
~x
Exit as with ~q, except the message shall not be saved in the dead-letter file.
~| command
Pipe the body of the message through the given command by invoking the command interpreter specified by SHELL
with three arguments: "-c", "--", and command. If the command returns a successful exit status, the
standard output of the command shall replace the message. Otherwise, the message shall remain unchanged. If the command
fails, an error message giving the exit status shall be written.
EXIT STATUS
[UP]
When the -e option is specified, the following exit values are returned:
0
Mail was found.
>0
Mail was not found or an error occurred.
Otherwise, the following exit values are returned:
0
Successful completion; note that this status implies that any messages that mailx was instructed to send were all
successfully either sent or discarded (see -E), but it gives no assurances that any of them were actually
delivered.
>0
An error occurred.
CONSEQUENCES OF ERRORS
When in [UP]   input mode (Receive Mode)   or Send Mode:
If an error is encountered processing an input line beginning with a  ('~') character, [UP]   (see Command Escapes in mailx),   a
diagnostic message shall be written to standard error, and the message being composed may be modified, but this condition shall not
prevent the message from being sent.
Other errors shall prevent the sending of the message.
[UP]
When in command mode:
Default.
The following sections are informative.
APPLICATION USAGE
Delivery of messages to remote systems requires the existence of communication paths to such systems. These need not exist.
Input lines are limited to {LINE_MAX} bytes, but mailers between systems may impose more severe line-length restrictions. This
volume of POSIX.1-2024 does not place any restrictions on the length of messages handled by mailx, and for delivery of local
messages the only limitations should be the normal problems of available disk space for the target mail file. When sending messages
to external machines, applications are advised to limit messages to less than 100000 bytes because some mail gateways impose
message-length restrictions.
The format of the system mailbox is intentionally unspecified. Not all systems implement system mailboxes as flat files,
particularly with the advent of multimedia mail messages. Some system mailboxes may be multiple files, others records in a
database. The internal format of the messages themselves is specified with the historical format from Version 7, but only
after the messages have been saved in some file other than the system mailbox. This was done so that many historical applications
expecting text-file mailboxes are not broken.
Some new formats for messages can be expected in the future, probably including binary data, bit maps, and various multimedia
objects. As described here, mailx is not prohibited from handling such messages, but it must store them as text files in
secondary mailboxes (unless some extension, such as a variable or command line option, is used to change the stored format). Its
method of doing so is implementation-defined and might include translating the data into text file-compatible or readable form or
omitting certain portions of the message from the stored output.
The discard and ignore commands are not inverses of the retain command. The retain command discards
all header fields except those explicitly retained. The discard command keeps all header fields except those explicitly
discarded. If field names exist on the retained field names list, discard and ignore commands are ignored.
EXAMPLES
None.
RATIONALE
The standard developers felt strongly that a method for applications to send messages to specific users was necessary. The
obvious example is a batch utility, running non-interactively, that wishes to communicate errors or results to a user. However, the
actual format, delivery mechanism, and method of reading the message are clearly beyond the scope of this volume of
POSIX.1-2024.
The intent of this command is to provide a simple, portable interface for sending messages non-interactively. It merely defines
a "front-end" to the historical mail system. It is suggested that implementations explicitly denote the sender and recipient in
the body of the delivered message. Further specification of formats for either the message envelope or the message itself were
deliberately not made, as the industry is in the midst of changing from the current standards to a more internationalized standard
and it is probably incorrect, at this time, to require either one.
Implementations are encouraged to conform to the various delivery mechanisms described in the CCITT X.400 standards or to the
equivalent Internet standards, described in Internet Request for Comment (RFC) documents RFC 819, RFC 920, RFC 921,
RFC 1123, and RFC 5322.
Many historical systems modified each body line that started with From  by prefixing the 'F' with
'>'. It is unnecessary, but allowed, to do that when the string does not follow a blank line because it cannot be
confused with the next header.
The edit and visual commands merely edit the specified messages in a temporary file. They do not modify the
contents of those messages in the mailbox; such a capability could be added as an extension, such as by using different command
names.
The restriction on the value for a Subject header field being {LINE_MAX}-10 bytes is based on the historical format that
consumes 10 bytes for Subject:  and the trailing . Many historical mailers that a message may encounter
on other systems are not able to handle lines that long, however.
Like the utilities logger and lp,
mailx admittedly is difficult to test. This was not deemed sufficient justification to exclude this utility from this volume
of POSIX.1-2024. It is also arguable that it is, in fact, testable, but that the tests themselves are not portable.
When mailx is being used by an application that wishes to receive the results as if none of the User Portability
Utilities option features were supported, the DEAD environment variable must be set to /dev/null. Otherwise, it may
be subject to the file creations described in mailx ASYNCHRONOUS EVENTS. Similarly, if the MAILRC environment
variable is not set to /dev/null, historical versions of mailx and Mail read initialization commands from a
file before processing begins. Since the initialization that a user specifies could alter the contents of messages an application
is trying to send, such applications must set MAILRC to /dev/null.
The description of LC_TIME uses "may affect" because many historical implementations do not or cannot manipulate the
date and time strings in the incoming mail headers. Some header fields found in incoming mail do not have enough information to
determine the timezone in which the mail originated, and, therefore, mailx cannot convert the date and time strings into the
internal form that then is parsed by routines like strftime() that can take
LC_TIME settings into account. Changing all these times to a user-specified format is allowed, but not required.
The paginator selected when PAGER is null or unset is partially unspecified to allow the System V historical practice of
using pg as the default. Bypassing the pagination function, such as by declaring that cat is the paginator, would not meet with the intended meaning of this description. However, any
"portable user" would have to set PAGER explicitly to get his or her preferred paginator on all systems. The paginator
choice was made partially unspecified, unlike the VISUAL editor choice (mandated to be vi) because most historical pagers follow a common theme of user input, whereas editors differ
dramatically.
Options to specify addresses as cc (carbon copy) or bcc (blind carbon copy) were considered to be format details
and were omitted.
A zero exit status implies that all messages were sent, but it gives no assurances that any of them were actually
delivered. The reliability of the delivery mechanism is unspecified and is an appropriate marketing distinction between
systems.
In order to conform to the Utility Syntax Guidelines, a solution was required to the optional file option-argument to
-f. By making file an operand, the guidelines are satisfied and users remain portable. However, it does force
implementations to support usage such as:
mailx -fin mymail.box
The no name method of unsetting variables is not present in all historical systems, but it is in System V and
provides a logical set of commands corresponding to the format of the display of options from the mailx set command without arguments.
The ask and asksub variables are the names selected by BSD and System V, respectively, for the same feature. They
are synonyms in this volume of POSIX.1-2024.
The mailx echo command was not documented in the BSD version and has been
omitted here because it is not obviously useful for interactive users.
The default prompt on the System V mailx is a , on BSD Mail an . Since this
volume of POSIX.1-2024 chose the mailx name, it kept the System V default, assuming that BSD users would not have difficulty
with this minor incompatibility (that they can override).
The meanings of r and R are reversed between System V mailx and SunOS Mail. Once again, since this
volume of POSIX.1-2024 chose the mailx name, it kept the System V default, but allows the SunOS user to achieve the desired
results using flipr, an internal variable in System V mailx, although it has not been documented in the SVID.
The indentprefix variable, the retain and unalias commands, and the ~F and ~M command escapes
were adopted from 4.3 BSD Mail.
The version command was not included because no sufficiently general specification of the version information could be
devised that would still be useful to a portable user. This command name should be used by suppliers who wish to provide version
information about the mailx command.
The "implementation-specific (unspecified) system start-up file" historically has been named /etc/mailx.rc, but this
specific name and location are not required.
The intent of the wording for the next command is that if any command has already displayed the current message it should
display a following message, but, otherwise, it should display the current message. Consider the command sequence:
next 3
delete 3
next
where the autoprint option was not set. The normative text specifies that the second next command should display a
message following the third message, because even though the current message has not been displayed since it was set by the
delete command, it has been displayed since the current message was anything other than message number 3. This does not
always match historical practice in some implementations, where the command file address followed by next (or the default
command) would skip the message for which the user had searched.
FUTURE DIRECTIONS
If this utility is directed to create a new directory entry that contains any bytes that have the encoded value of a
character, implementations are encouraged to treat this as an error. A future version of this standard may require
implementations to treat this as an error.
SEE ALSO
2. Shell Command Language, ed, ls, more, vi
XBD 8. Environment Variables, 12.2 Utility Syntax Guidelines
CHANGE HISTORY
First released in Issue 2.
Issue 5
The description of the EDITOR environment variable is changed to indicate that ed is the default editor if this variable is not set. In previous issues, this default was not
stated explicitly at this point but was implied further down in the text.
The FUTURE DIRECTIONS section is added.
Issue 6
The following new requirements on POSIX implementations derive from alignment with the Single UNIX Specification:
The -F option is added.
The allnet, debug, and sendwait internal variables are added.
The C, ec, fo, F, and S mailx commands are added.
In the DESCRIPTION and ENVIRONMENT VARIABLES sections, text stating "HOME directory" is replaced by "directory
referred to by the HOME environment variable".
The mailx utility is aligned with the IEEE P1003.2b draft standard, which includes various clarifications to resolve
IEEE PASC Interpretations submitted for the ISO POSIX-2:1993 standard. In particular, the changes here address IEEE PASC
Interpretations 1003.2 #10, #11, #103, #106, #108, #114, #115, #122, and #129.
The normative text is reworded to avoid use of the term "must" for application requirements.
The TZ entry is added to the ENVIRONMENT VARIABLES section.
IEEE Std 1003.1-2001/Cor 1-2002, item XCU/TC1/D6/32 is applied, applying a change to the EXTENDED DESCRIPTION,
raised by IEEE PASC Interpretation 1003.2 #122, which was overlooked in the first version of this standard.
IEEE Std 1003.1-2001/Cor 2-2004, item XCU/TC2/D6/17 is applied, updating the EXTENDED DESCRIPTION (Internal
Variables in mailx). The system start-up file is changed from "implementation-defined" to "unspecified" for consistency
with other text in the EXTENDED DESCRIPTION.
Issue 7
Austin Group Interpretation 1003.1-2001 #089 is applied, clarifying the effect of the LC_TIME environment variable.
Austin Group Interpretation 1003.1-2001 #090 is applied, updating the description of the next command.
SD5-XCU-ERN-69 is applied.
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
Shading to indicate support for the User Portability Utilities option is added.
POSIX.1-2008, Technical Corrigendum 2, XCU/TC2-2008/0120 [855] and XCU/TC2-2008/0121 [619] are applied.
Issue 8
Austin Group Defect 251 is applied, encouraging implementations to disallow the creation of filenames containing any bytes that
have the encoded value of a  character.
Austin Group Defect 956 is applied, clarifying how the PAGER environment variable and the crt internal variable
affect pagination.
Austin Group Defects 990 and 991 are applied, changing the description of the mbox command.
Austin Group Defect 999 is applied, adding Save to the list of commands that are invalid in a start-up file.
Austin Group Defect 1034 is applied, clarifying that ~. can be used to terminate input mode when ignoreeof is
set.
Austin Group Defect 1109 is applied, changing the description of the bang internal variable.
Austin Group Defect 1113 is applied, changing the description of the read state.
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
Austin Group Defect 1176 is applied, changing "option-argument" to "operand".
Austin Group Defect 1306 is applied, changing the description of the folder internal variable.
Austin Group Defect 1367 is applied, adding the -E option.
Austin Group Defect 1401 is applied, changing the requirements for the reply, Reply, followup, and
Followup commands.
Austin Group Defect 1405 is applied, changing the terminology related to mail messages to match IETF RFC 5322.
Austin Group Defect 1408 is applied, changing the description of Send Mode.
Austin Group Defect 1507 is applied, changing the EXIT STATUS section.
Austin Group Defect 1528 is applied, adding a "--" argument to be passed between "-c" and command when
executing shell commands.
Austin Group Defect 1634 is applied, clarifying handling of the system mailbox.
Austin Group Defect 1685 is applied, updating RFC references.
Austin Group Defect 1725 is applied, clarifying that the default for the screen internal variable is noscreen.
Austin Group Defect 1743 is applied, changing the descriptions of the metoo internal variable and the alternates
command.
Austin Group Defect 1747 is applied, changing the description of the alias command.
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/cflow.html =====
cflow
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
cflow — generate a C-language flowgraph (DEVELOPMENT)
SYNOPSIS
[XSI]  cflow [-r] [-d num] [-D
name[=def]]... [-i incl] [-I
dir]...
[-U dir]... file...
DESCRIPTION
The cflow utility shall analyze a collection of object files or assembler, C-language, lex, or yacc source files, and attempt to build a
graph, written to standard output, charting the external references.
OPTIONS
The cflow utility shall conform to XBD 12.2 Utility Syntax
Guidelines, except that the order of the -D, -I, and -U options (which are identical to their
interpretation by c17) is significant.
The following options shall be supported:
-d num
Indicate the depth at which the flowgraph is cut off. The application shall ensure that the argument num is a decimal
integer. By default this is a very large number (typically greater than 32000). Attempts to set the cut-off depth to a non-positive
integer shall be ignored.
-i incl
Increase the number of included symbols. The incl option-argument is one of the following characters:
x
Include external and static data symbols. The default shall be to include only functions in the flowgraph.
_
(Underscore) Include names that begin with an . The default shall be to exclude these functions (and data if
-i x is used).
-r
Reverse the caller:callee relationship, producing an inverted listing showing the callers of each function. The listing shall
also be sorted in lexicographical order by callee.
OPERANDS
The following operand is supported:
file
The pathname of a file for which a graph is to be generated. Filenames suffixed by .l shall shall be taken to be
lex input, .y as yacc input,
.c as c17 input, and .i as the output of c17 -E. Such files shall be processed as appropriate, determined by their suffix.
Files suffixed by .s (conventionally assembler source) may have more limited information extracted from them.
STDIN
Not used.
INPUT FILES
The input files shall be object files or assembler, C-language, lex, or yacc source files.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of cflow:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_COLLATE
Determine the locale for the ordering of the output when the -r option is used.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments and input files).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
NLSPATH
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
Default.
STDOUT
The flowgraph written to standard output shall be formatted as follows:
"%d %s:%s\n", , ,
Each line of output begins with a reference (that is, line) number, followed by indentation of at least one column position per
level. This is followed by the name of the global, a , and its definition. Normally globals are only functions not
defined as an external or beginning with an ; see the OPTIONS section for the -i inclusion option. For
information extracted from C-language source, the definition consists of an abstract type declaration (for example, char *)
and, delimited by angle brackets, the name of the source file and the line number where the definition was found. Definitions
extracted from object files indicate the filename and location counter under which the symbol appeared (for example,
text).
Once a definition of a name has been written, subsequent references to that name contain only the reference number of the line
where the definition can be found. For undefined references, only "<>" shall be written.
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
Files produced by lex and yacc cause the
reordering of line number declarations, and this can confuse cflow. To obtain proper results, the input of yacc or lex must be directed to cflow.
EXAMPLES
Given the following in file.c:
int i;
int f();
int g();
int h();
int
main(void)
{
f();
g();
f();
}
int
f()
{
i = h();
}
The command:
cflow -i x file.c
produces the output:
1 main: int(),
2    f: int(),
3        h: <>
4        i: int,
5    g: <>
RATIONALE
None.
FUTURE DIRECTIONS
None.
SEE ALSO
c17, lex, yacc
XBD 8. Environment Variables, 12.2 Utility Syntax Guidelines
CHANGE HISTORY
First released in Issue 2.
Issue 6
The normative text is reworded to avoid use of the term "must" for application requirements.
Issue 7
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
Issue 8
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
Austin Group Defect 1195 is applied, changing "main()" to "main(void)".
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/uuencode.html =====
uuencode
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
uuencode — encode a binary file
SYNOPSIS
uuencode [-m] [file] decode_pathname
DESCRIPTION
The uuencode utility shall write an encoded version of the named input file, or standard input if no file is
specified, to standard output. The output shall be encoded using one of the algorithms described in the STDOUT section and shall
include the file access permission bits (in chmod octal or symbolic notation) of the
input file and the decode_pathname, for re-creation of the file on another system that conforms to this volume of
POSIX.1-2024.
OPTIONS
The uuencode utility shall conform to XBD 12.2 Utility Syntax
Guidelines.
The following option shall be supported by the implementation:
-m
Encode the output using the MIME Base64 algorithm described in STDOUT. If -m is not specified, the historical algorithm
described in STDOUT shall be used.
OPERANDS
The following operands shall be supported:
decode_pathname
The pathname of the file into which the uudecode utility shall place the decoded
file. Specifying a decode_pathname operand of - or /dev/stdout shall indicate that uudecode is to use standard output. If there are characters in decode_pathname that
are not in the portable filename character set the results are unspecified.
file
A pathname of the file to be encoded.
STDIN
See the INPUT FILES section.
INPUT FILES
Input files can be files of any type.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of uuencode:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments and input files).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
Default.
STDOUT
uuencode Base64 Algorithm
The standard output shall be a text file (encoded in the character set of the current locale) that begins with the line:
"begin-base64Δ%sΔ%s\n", ,
and ends with the line:
"====\n"
In both cases, the lines shall have no preceding or trailing  characters.
The encoding process represents 24-bit groups of input bits as output strings of four encoded characters. Proceeding from left
to right, a 24-bit input group shall be formed by concatenating three 8-bit input groups. Each 24-bit input group then shall be
treated as four concatenated 6-bit groups, each of which shall be translated into a single digit in the Base64 alphabet. When
encoding a bit stream via the Base64 encoding, the bit stream shall be presumed to be ordered with the most-significant bit first.
That is, the first bit in the stream shall be the high-order bit in the first byte, and the eighth bit shall be the low-order bit
in the first byte, and so on. Each 6-bit group is used as an index into an array of 64 printable characters, as shown in uuencode Base64 Values.
Table: uuencode Base64 Values
Value
Encoding
Value
Encoding
Value
Encoding
Value
Encoding
0
A
17
R
34
i
51
z
1
B
18
S
35
j
52
0
2
C
19
T
36
k
53
1
3
D
20
U
37
l
54
2
4
E
21
V
38
m
55
3
5
F
22
W
39
n
56
4
6
G
23
X
40
o
57
5
7
H
24
Y
41
p
58
6
8
I
25
Z
42
q
59
7
9
J
26
a
43
r
60
8
10
K
27
b
44
s
61
9
11
L
28
c
45
t
62
+
12
M
29
d
46
u
63
/
13
N
30
e
47
v
14
O
31
f
48
w
(pad)
=
15
P
32
g
49
x
16
Q
33
h
50
y
The character referenced by the index shall be placed in the output string.
The output stream (encoded bytes) shall be represented in lines of no more than 76 characters each. All line breaks
or other characters not found in the table shall be ignored by decoding software (see uudecode).
Special processing shall be performed if fewer than 24 bits are available at the end of a message or encapsulated
part of a message. A full encoding quantum shall always be completed at the end of a message. When fewer than 24 input bits are
available in an input group, zero bits shall be added (on the right) to form an integral number of 6-bit groups. Output character
positions that are not required to represent actual input data shall be set to the character '='. Since all Base64 input
is an integral number of octets, only the following cases can arise:
The final quantum of encoding input is an integral multiple of 24 bits; here, the final unit of encoded output
shall be an integral multiple of 4 characters with no '=' padding.
The final quantum of encoding input is exactly 16 bits; here, the final unit of encoded output shall be three
characters followed by one '=' padding character.
The final quantum of encoding input is exactly 8 bits; here, the final unit of encoded output shall be two
characters followed by two '=' padding characters.
A terminating "====" evaluates to nothing and denotes the end of the encoded data.
uuencode Historical Algorithm
The standard output shall be a text file (encoded in the character set of the current locale) that begins with the
line:
"beginΔ%sΔ%s\n" ,
and ends with the line:
"end\n"
In both cases, the lines shall have no preceding or trailing  characters.
The algorithm that shall be used for lines in between begin and end takes three octets as input and
writes four characters of output by splitting the input at six-bit intervals into four octets, containing data in the lower six
bits only. These octets shall be converted to characters in the ISO/IEC 646:1991 standard encoded character set by adding a
value of 0x20 to each octet, so that each octet is in the range [0x20,0x5f], and then optionally replacing any 0x20 octets with
0x60. If necessary, these characters shall then be translated into the corresponding character codes for the codeset in use in the
current locale. For example, the octet 0x41, representing 'A', would be translated to 'A' in the current codeset,
such as 0xc1 if it were EBCDIC; the octet 0x20, representing , would optionally be replaced with 0x60, representing
'`', and then translated to either  (0x40 if EBCDIC) or '`' (0x79 if EBCDIC), respectively.
Where the bits of two octets are combined, the least significant bits of the first octet shall be shifted left and
combined with the most significant bits of the second octet shifted right. Thus the three octets A, B, C shall
be converted into the four octets:
0x20 + (( A >> 2                    ) & 0x3F)
0x20 + (((A > 4) & 0xF)) & 0x3F)
0x20 + (((B > 6) & 0x3)) & 0x3F)
0x20 + (( C                         ) & 0x3F)
before any replacement of 0x20 with 0x60 and translation into the local character set.
Each encoded line shall contain a length character, equal to the number of characters to be decoded plus 0x20
translated to the local character set as described above, followed by between 1 and 45, inclusive, encoded characters. The last
encoded line, or the begin line if the input is empty, shall be followed by a line containing only a  or
'`' character before the terminating .
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
The file is expanded by 35 percent (each three octets become four, plus control information) causing it to take longer to
transmit.
Since this utility is intended to create files to be used for data interchange between systems with possibly
different codesets, and to represent binary data as a text file, the ISO/IEC 646:1991 standard was chosen for a midpoint in
the algorithm as a known reference point. The output from uuencode is a text file on the local system. If the output were in
the ISO/IEC 646:1991 standard codeset, it might not be a text file (at least because the  characters might not
match), and the goal of creating a text file would be defeated. If this text file was then carried to another machine with the same
codeset, it would be perfectly compatible with that system's uudecode. If it was
transmitted over a mail system or sent to a machine with a different codeset, it is assumed that, as for every other text file,
some translation mechanism would convert it (by the time it reached a user on the other system) into an appropriate codeset. This
translation only makes sense from the local codeset, not if the file has been put into a ISO/IEC 646:1991 standard
representation first. Similarly, files processed by uuencode can be placed in pax
archives, intermixed with other text files in the same codeset.
Since uudecode treats a decode_pathname of - to mean
decode to standard output, in order to specify that a file named - is to be created, decode_pathname should be
specified using an alternative pathname, for example ./-. Likewise, in order to specify that a file with the pathname
/dev/stdout is to be written, decode_pathname should be specified as, for example, ///dev/stdout.
EXAMPLES
None.
RATIONALE
A new algorithm was added at the request of the international community to parallel work in RFC 2045 (MIME). As with the
historical uuencode format, the Base64 Content-Transfer-Encoding is designed to represent arbitrary sequences of octets in a
form that is not humanly readable. A 65-character subset of the ISO/IEC 646:1991 standard is used, enabling 6 bits to be
represented per printable character. (The extra 65th character, '=', is used to signify a special processing
function.)
This subset has the important property that it is represented identically in all versions of the
ISO/IEC 646:1991 standard, including US ASCII, and all characters in the subset are also represented identically in all
versions of EBCDIC. The historical uuencode algorithm does not share this property, which is the reason that a second
algorithm was added to the ISO POSIX-2 standard.
The string "====" was used for the termination instead of the end used in the original format because the
latter is a string that could be valid encoded input.
In an early draft, the -m option was named -b (for Base64), but it was renamed to reflect its
relationship to the RFC 2045. A -u was also present to invoke the default algorithm, but since this was not historical
practice, it was omitted as being unnecessary.
See the RATIONALE section in uudecode for the derivation of the
/dev/stdout symbol.
Historically the encoding used only octets in the range [0x20,0x5f], and thus the encoded lines could contain
trailing spaces, which were at risk of being stripped by whatever transport method was used to send the file. To avoid this problem
some implementations use 0x60 instead of 0x20, resulting in '`' characters instead of spaces in the output, and
implementations are encouraged to do this.
FUTURE DIRECTIONS
None.
SEE ALSO
chmod, mailx, uudecode
XBD 8. Environment Variables, 12.2 Utility Syntax Guidelines
CHANGE HISTORY
First released in Issue 4.
Issue 6
This utility is marked as part of the User Portability Utilities option.
The Base64 algorithm and the ability to output to /dev/stdout are added as specified in the
IEEE P1003.2b draft standard.
Issue 7
The uuencode utility is moved from the User Portability Utilities option to the Base. User Portability Utilities is now
an option for interactive utilities.
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
Issue 8
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
Austin Group Defect 1140 is applied, changing the description of the uuencode historical algorithm.
Austin Group Defect 1544 is applied, changing the OPERANDS and APPLICATION USAGE sections.
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/at.html =====
at
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
at — execute commands at a later time
SYNOPSIS
at [-m] [-f file] [-q queuename] -t
time_arg
at [-m] [-f file] [-q queuename]
timespec...
at -r at_job_id...
at -l -q queuename
at -l [at_job_id...]
DESCRIPTION
The at utility shall read commands from standard input and group them together as an at-job, to be executed at a
later time.
The at-job shall be executed in a separate invocation of the shell, running in a separate process group with no controlling
terminal, except that the environment variables, current working directory, file creation mask, and other implementation-defined
execution-time attributes in effect when the at utility is executed shall be retained and used when the at-job is
executed.
When the at-job is submitted, the at_job_id and scheduled time shall be written to standard error. The at_job_id
is an identifier that shall be a string consisting solely of alphanumeric characters and the  character. The
at_job_id shall be assigned by the system when the job is scheduled such that it uniquely identifies a particular job.
User notification and the processing of the job's standard output and standard error are described under the -m
option.
[XSI]
Users shall be permitted to use at if their name appears in the file at.allow which is located in an
implementation-defined directory. If that file does not exist, the file at.deny, which is located in an
implementation-defined directory, shall be checked to determine whether the user shall be denied access to at. If neither
file exists, only a process with appropriate privileges shall be allowed to submit a job. If only at.deny exists and is
empty, global usage shall be permitted. The at.allow and at.deny files shall consist of one user name per line.
OPTIONS
The at utility shall conform to XBD 12.2 Utility Syntax
Guidelines.
The following options shall be supported:
-f file
Specify the pathname of a file to be used as the source of the at-job, instead of standard input.
-l
(The letter ell.) Report all jobs scheduled for the invoking user if no at_job_id operands are specified. If
at_job_ids are specified, report only information for these jobs. The output shall be written to standard output.
-m
Send mail to the invoking user after the at-job has run, announcing its completion. Standard output and standard error produced
by the at-job shall be mailed to the user as well, unless redirected elsewhere. Mail shall be sent even if the job produces no
output.
If -m is not used, the job's standard output and standard error shall be provided to the user by means of mail, unless
they are redirected elsewhere; if there is no such output to provide, the implementation need not notify the user of the job's
completion.
-q queuename
Specify in which queue to schedule a job for submission. When used with the -l option, limit the search to that particular
queue. By default, at-jobs shall be scheduled in queue a. In contrast, queue b shall be reserved for batch jobs; see
batch. The meanings of all other queuenames are implementation-defined. If
-q b is specified along with either of the -t time_arg or timespec arguments, the results are
unspecified.
-r
Remove the jobs with the specified at_job_id operands that were previously scheduled by the at utility.
-t time_arg
Submit the job to be run at the time specified by the time option-argument, which the application shall ensure has the
format as specified by the touch -t time utility.
OPERANDS
The following operands shall be supported:
at_job_id
The name reported by a previous invocation of the at utility at the time the job was scheduled.
timespec
Submit the job to be run at the date and time specified. All of the timespec operands are interpreted as if they were
separated by  characters and concatenated, and shall be parsed as described in the grammar at the end of this section.
The date and time shall be interpreted as being in the timezone of the user (as determined by the TZ variable), unless a
timezone name appears as part of time, below.
In the POSIX locale, the following describes the three parts of the time specification string. All of the values from the
LC_TIME categories in the POSIX locale shall be recognized in a case-insensitive manner.
time
The time can be specified as one, two, or four digits. One-digit and two-digit numbers shall be taken to be hours; four-digit
numbers to be hours and minutes. The time can alternatively be specified as two numbers separated by a , meaning
hour:minute. If the LC_TIME category of the locale supports 12-hour time format (see XBD 7.3.5 LC_TIME), an AM/PM indication in the form of one of the values from the
am_pm keywords in the LC_TIME locale category can follow the time; otherwise, a 24-hour clock time shall be
understood. A timezone name can also follow to further qualify the time. The acceptable timezone names are implementation-defined,
except that they shall be case-insensitive and the string utc is supported to indicate the time is in Coordinated Universal
Time. In the POSIX locale, the time field can also be one of the following tokens:
midnight
Indicates the time 12:00 am (00:00).
noon
Indicates the time 12:00 pm.
now
Indicates the current day and time. Invoking at  shall submit an at-job for potentially immediate
execution (that is, subject only to unspecified scheduling delays).
date
An optional date can be specified as either a month name (one of the values from the mon or abmon keywords
in the LC_TIME locale category) followed by a day number (and possibly year number preceded by a comma), or a day of the
week (one of the values from the day or abday keywords in the LC_TIME locale category). In the POSIX locale,
two special days shall be recognized:
today
Indicates the current day.
tomorrow
Indicates the day following the current day.
If no date is given, today shall be assumed if the given time is greater than the current time, and
tomorrow shall be assumed if it is less. If the given month is less than the current month (and no year is given), next year
shall be assumed.
increment
The optional increment shall be a number preceded by a  ('+') and suffixed by one of the
following: minutes, hours, days, weeks, months, or years. (The singular forms shall also
be accepted.) The keyword next shall be equivalent to an increment number of +1. For example, the following are equivalent
commands:
at 2pm + 1 week
at 2pm next week
The following grammar describes the precise format of timespec in the POSIX locale. The general conventions for this
style of grammar are described in 1.3 Grammar Conventions. This formal
syntax shall take precedence over the preceding text syntax description. The longest possible token or delimiter shall be
recognized at a given point. When used in a timespec, white space shall also delimit tokens.
%token hr24clock_hr_min
%token hr24clock_hour
/*
An hr24clock_hr_min is a one, two, or four-digit number. A one-digit
or two-digit number constitutes an hr24clock_hour. An hr24clock_hour
may be any of the single digits [0,9], or may be double digits, ranging
from [00,23]. If an hr24clock_hr_min is a four-digit number, the
first two digits shall be a valid hr24clock_hour, while the last two
represent the number of minutes, from [00,59].
*/
%token wallclock_hr_min
%token wallclock_hour
/*
A wallclock_hr_min is a one, two-digit, or four-digit number.
A one-digit or two-digit number constitutes a wallclock_hour.
A wallclock_hour may be any of the single digits [1,9], or may
be double digits, ranging from [01,12]. If a wallclock_hr_min
is a four-digit number, the first two digits shall be a valid
wallclock_hour, while the last two represent the number of
minutes, from [00,59].
*/
%token minute
/*
A minute is a one or two-digit number whose value can be [0,9]
or [00,59].
*/
%token day_number
/*
A day_number is a number in the range appropriate for the particular
month and year specified by month_name and year_number, respectively.
If no year_number is given, the current year is assumed if the given
date and time are later this year. If no year_number is given and
the date and time have already occurred this year and the month is
not the current month, next year is the assumed year.
*/
%token year_number
/*
A year_number is a four-digit number representing the year A.D., in
which the at_job is to be run.
*/
%token inc_number
/*
The inc_number is the number of times the succeeding increment
period is to be added to the specified date and time.
*/
%token timezone_name
/*
The name of an optional timezone suffix to the time field, in an
implementation-defined format.
*/
%token month_name
/*
One of the values from the mon or abmon keywords in the LC_TIME
locale category.
*/
%token day_of_week
/*
One of the values from the day or abday keywords in the LC_TIME
locale category.
*/
%token am_pm
/*
One of the values from the am_pm keyword in the LC_TIME locale
category.
*/
%start timespec
%%
timespec    : time
| time date
| time increment
| time date increment
| nowspec
;
nowspec     : "now"
| "now" increment
;
time        : hr24clock_hr_min
| hr24clock_hr_min timezone_name
| hr24clock_hour ":" minute
| hr24clock_hour ":" minute timezone_name
| wallclock_hr_min am_pm
| wallclock_hr_min am_pm timezone_name
| wallclock_hour ":" minute am_pm
| wallclock_hour ":" minute am_pm timezone_name
| "noon"
| "midnight"
;
date        : month_name day_number
| month_name day_number "," year_number
| day_of_week
| "today"
| "tomorrow"
;
increment   : "+" inc_number inc_period
| "next" inc_period
;
inc_period  : "minute" | "minutes"
| "hour" | "hours"
| "day" | "days"
| "week" | "weeks"
| "month" | "months"
| "year" | "years"
;
STDIN
The standard input shall be a text file consisting of commands acceptable to the shell command language described in 2. Shell Command Language. The standard input shall only be used if no -f
file option is specified.
INPUT FILES
See the STDIN section.
[XSI]
The text files at.allow and at.deny, which are located in an implementation-defined directory, shall contain zero or
more user names, one per line, of users who are, respectively, authorized or denied access to the at and batch utilities.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of at:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments and input files).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error and
informative messages written to standard output.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
LC_TIME
Determine the format and contents for date and time strings written and accepted by at.
SHELL
Determine a name of a command interpreter to be used to invoke the at-job. If the variable is unset or null, sh shall be used. If it is set to a value other than a name for sh, the implementation shall do one of the following: use that shell; use sh; use the login shell from the user database; or any of the preceding accompanied by a warning
diagnostic about which was chosen.
TZ
Determine the timezone. The job shall be submitted for execution at the time specified by timespec or -t
time relative to the timezone specified by the TZ variable. If timespec specifies a timezone, it shall
override TZ . If timespec does not specify a timezone and TZ is unset or null, an unspecified default timezone
shall be used.
ASYNCHRONOUS EVENTS
Default.
STDOUT
When standard input is a terminal, prompts of unspecified format for each line of the user input described in the STDIN section
may be written to standard output.
In the POSIX locale, the following shall be written to the standard output for each job when jobs are listed in response to the
-l option:
"%s\t%s\n", at_job_id,
where date shall be equivalent in format to the output of:
date +"%a %b %e %T %Y"
The date and time written shall be adjusted so that they appear in the timezone of the user (as determined by the TZ
variable).
STDERR
In the POSIX locale, the following shall be written to standard error when a job has been successfully submitted:
"job %s at %s\n", at_job_id,
where date has the same format as that described in the STDOUT section. Neither this, nor warning messages concerning the
selection of the command interpreter, shall be considered a diagnostic that changes the exit status.
Diagnostic messages, if any, shall be written to standard error.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Neither the -l option nor the -r option was specified and a job was successfully submitted; or, the -l
option was specified with no at_job_id operands and there were no jobs to be listed; or, the -l option was specified
and all job listings were successfully output; or, the -r option was specified and all of the specified jobs were
successfully removed.
>0
An error occurred.
CONSEQUENCES OF ERRORS
If neither the -l option nor the -r option was specified, the job shall not be scheduled. Otherwise, the default
actions specified in 1.4 Utility Description Defaults apply.
The following sections are informative.
APPLICATION USAGE
The format of the at command line shown here is guaranteed only for the POSIX locale. Other cultures may be supported
with substantially different interfaces, although implementations are encouraged to provide comparable levels of functionality.
Since the commands run in a separate shell invocation, running in a separate process group with no controlling terminal, open
file descriptors, traps, and priority inherited from the invoking environment are lost.
Some implementations do not allow substitution of different shells using SHELL . System V systems, for example, have used
the login shell value for the user in /etc/passwd. To select reliably another command interpreter, the user must include it
as part of the script, such as:
$ at 1800
myshell myscript
EOT
job ... at ...
$
EXAMPLES
This sequence can be used at a terminal:
at -m 0730 tomorrow
sort outfile
EOT
This sequence, which demonstrates redirecting standard error to a pipe, is useful in a command procedure (the sequence of output
redirection specifications is significant):
at now + 1 hour &1 >outfile | mailx -s "outfile update" mygroup
!
Note that this always sends mail when there has been an attempt to update outfile and the body of the message will be
empty unless an error occurred.
The following shows how to capture both standard error and standard output:
at now + 1 hour &1 | mailx -E -s "errors during batch processing" mygroup
EOF
To have a job reschedule itself, at can be invoked from within the at-job. For example, this daily processing script
named my.daily runs every day (although crontab is a more appropriate vehicle
for such work):
# my.daily runs every day
daily processing
at now tomorrow  was changed in an early proposal from being unspecified to submitting a job for
potentially immediate execution. Historical BSD at implementations support this. Historical System V implementations give an
error in that case, but a change to the System V versions should have no backwards-compatibility ramifications.
On BSD-based systems, a -u user option has allowed those with appropriate privileges to access the work of other
users. Since this is primarily a system administration feature and is not universally implemented, it has been omitted. Similarly,
a specification for the output format for a user with appropriate privileges viewing the queues of other users has been
omitted.
The -f file option from System V is used instead of the BSD method of using the last operand as the pathname. The
BSD method is ambiguous—does:
at 1200 friday
mean the same thing if there is a file named friday in the current directory?
The at_job_id is composed of a limited character set in historical practice, and it is mandated here to invalidate
systems that might try using characters that require shell quoting or that could not be easily parsed by shell scripts.
The at utility varies between System V and BSD systems in the way timezones are used. On System V systems, the TZ
variable affects the at-job submission times and the times displayed for the user. On BSD systems, TZ is not taken into
account. The BSD behavior is easily achieved with the current specification. If the user wishes to have the timezone default to
that of the system, they merely need to issue the at command immediately following an unsetting or null assignment to TZ
. For example:
TZ= at noon ...
gives the desired BSD result.
While the yacc-like grammar specified in the OPERANDS section is lexically
unambiguous with respect to the digit strings, a lexical analyzer would probably be written to look for and return digit strings in
those cases. The parser could then check whether the digit string returned is a valid day_number, year_number, and so
on, based on the context.
FUTURE DIRECTIONS
None.
SEE ALSO
batch, crontab
XBD 8. Environment Variables, 12.2 Utility Syntax Guidelines
CHANGE HISTORY
First released in Issue 2.
Issue 6
This utility is marked as part of the User Portability Utilities option.
The following new requirements on POSIX implementations derive from alignment with the Single UNIX Specification:
If -m is not used, the job's standard output and standard error are provided to the user by mail.
The effects of using the -q and -t options as defined in the IEEE P1003.2b draft standard are specified.
The normative text is reworded to avoid use of the term "must" for application requirements.
Issue 7
The at utility is moved from the User Portability Utilities option to the Base. User Portability Utilities is now an
option for interactive utilities.
SD5-XCU-ERN-95 is applied, removing the references to fixed locations for the files referenced by the at utility.
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
Issue 8
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
Austin Group Defect 1307 is applied, changing the timespec operand in relation to locales that do not support the 12-hour
clock format.
Austin Group Defect 1330 is applied, removing obsolescent interfaces.
Austin Group Defect 1368 is applied, changing the EXAMPLES section.
Austin Group Defect 1377 is applied, correcting a typographic error in the description of the -q option.
Austin Group Defect 1495 is applied, changing the EXIT STATUS and CONSEQUENCES OF ERRORS sections.
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/ngettext.html =====
gettext
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
gettext, ngettext — retrieve text string from messages object
SYNOPSIS
gettext [-e|-E] [-d textdomain] [textdomain] msgid
gettext [-e|-E] [-n] -s [-d textdomain]
msgid...
ngettext [-e|-E] [-d textdomain] [textdomain] msgid
msgid_plural n
DESCRIPTION
The gettext and ngettext utilities shall write to standard output the message string(s) that would result from the
following calls to functions defined in the System Interfaces volume of POSIX.1-2024:
if (textdomainname == NULL || textdomainname[0] == '\0')
message_string = msgid;
else {
setlocale(LC_ALL, "");
if (textdomaindir != NULL)
bindtextdomain(textdomainname, textdomaindir);
if (msgid_plural == NULL)
message_string = dgettext(textdomainname, msgid);
else
message_string = dngettext(textdomainname, msgid, msgid_plural, n);
}
where:
The textdomaindir variable is a string containing the value of the TEXTDOMAINDIR environment variable, if set and
not empty, or is NULL otherwise.
The textdomainname variable is a string containing the text domain name obtained from, in decreasing order of
precedence:
The optional operand textdomain, if present
The -d textdomain option, if specified
The TEXTDOMAIN environment variable, if set and not empty
If the text domain name cannot be obtained from these sources, the textdomainname variable is NULL.
If the -s option of gettext is not specified and for the ngettext utility, the msgid variable is a
string containing:
The value of the msgid operand, if the -E option is specified
The value of the msgid operand with C-language escape sequences processed (see below), if the -e option is
specified
The value of the msgid operand with C-language escape sequences optionally processed (see below), otherwise
If the -s option of gettext is specified, the msgid variable is a string containing:
The value of each msgid operand in turn, if the -E option is specified or neither the -e nor the -E
option is specified
The value of each msgid operand in turn with C-language escape sequences processed (see below), if the -e option
is specified
For the gettext utility, the msgid_plural variable is NULL. For the ngettext utility, the
msgid_plural variable is a string containing:
The value of the msgid_plural operand, if the -E option is specified
The value of the msgid_plural operand with C-language escape sequences processed (see below), if the -e option is
specified
The value of the msgid_plural operand with C-language escape sequences optionally processed (see below), otherwise
For the gettext utility, the n variable is 1 (one). For the ngettext utility the n variable is the
n operand, parsed as an integer as if by using the strtoul() function with a
base argument of 10.
When C-language escape sequences are processed, they shall be processed as specified for character string literals in the
ISO C standard, except that universal-character-name escape sequences need not be supported. Implementations may also
support a  'c' escape sequence; if supported, the '\c' and all characters following it shall be
removed and, if the -s option is specified, the behavior shall be as if the -n option is also specified.
For the ngettext utility, and for the gettext utility if the -s option is not specified, the resulting
message string shall be written to standard output. If the -s option of gettext is specified, the resulting message
string for each msgid shall be written to standard output with consecutive message strings separated by a single
character and, if the -n option is not specified, a  shall be written after the last message
string. If the -s and -n options are specified, the trailing  shall be omitted.
Under conditions where the textdomainname variable in the above code would be NULL, these utilities may write a
diagnostic message to standard error and exit with non-zero status.
OPTIONS
These utilities shall conform to XBD 12.2 Utility Syntax Guidelines
.
The following options shall be supported:
-d textdomain
Retrieve the translated message from the domain textdomain, if textdomain is not specified as an operand.
-e
Process C-language escape sequences in msgid and msgid_plural operands.
-E
Do not process C-language escape sequences in msgid and msgid_plural operands.
The gettext utility shall also support the following options:
-n
Modify the behavior of the -s option such that a  is not appended to the output.
-s
Separate the message strings obtained from each msgid operand with  characters in the output, and (if
-n is not also specified) append a  to the output.
If neither of the mutually exclusive -e and -E options is specified, it is unspecified which is the default,
except that if the -s option of gettext is specified then -E shall be the default.
OPERANDS
The following operands shall be supported:
textdomain
A text domain name used to retrieve the translated message. This shall override the specification by the -d option, if
present.
msgid
A key to retrieve the translated message.
msgid_plural
A default plural if no corresponding plural message can be found.
n
A non-negative decimal integer to be used as the n argument to dngettext() (see the DESCRIPTION).
STDIN
Not used.
INPUT FILES
The input files are messages object files (see msgfmt).
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of gettext and ngettext:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LANGUAGE
Determine the location of messages objects [XSI]   if NLSPATH is not set or the evaluation of NLSPATH
did not lead to a suitable messages object being found.
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_MESSAGES
Determine the locale name used to locate messages objects, and the locale that should be used to affect the format and contents of
diagnostic messages written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
TEXTDOMAIN
Specify the text domain name. (See XBD 3.386 Text Domain.)
TEXTDOMAINDIR
Specify the pathname to the messages object hierarchy. [XSI]  NLSPATH shall have precedence over TEXTDOMAINDIR .
ASYNCHRONOUS EVENTS
Default.
STDOUT
See DESCRIPTION.
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
Since it is unspecified which of the -e or -E options is the default, except when the -s option of
gettext is specified, portable applications need to ensure that -e, -E, or (for gettext) -s is
specified whenever a msgid or msgid_plural operand contains, or might contain, a  character.
Note that, unless the -s option of gettext is specified without -n, the message(s) written to standard
output are not followed by a . (Therefore the output only ends with a  if the last message ends with
one.)
Both msgid and msgid_plural should be properly quoted for the shell.
EXAMPLES
The following examples assume that the following portable messages object source file (dot-po file) has been compiled to a valid
file mail.mo by the msgfmt utility. See the EXTENDED DESCRIPTION section of
the msgfmt utility for a description of the dot-po file format.
msgid ""
msgstr ""
"Content-Type: text/plain; charset=utf-8\n"
"Plural-Forms: nplurals=4; plural=n==1?0: (n>1&&n character). The output of ngettext can be used as a
format string for printf.
The command
printf "$(ngettext -ed mail "%d attachment\n" "%d attachments\n" 1)" 10
will write the same as
printf "1 (%d) attachment\n" 10
(i.e. "1 (10) attachment" followed by a  character).
The command
ngettext -e -d mail "\tsubject\n" "\tsubjects\n" 0
will write the same as
printf "\tsubjects\n"
(i.e. a  character, followed by "subjects" followed by a  character). Note that
"\tsubject\n" is not in the messages object.
The command
printf "%s\n" "$(ngettext -E -d mail "subject" "subjects" 0)"
will write the same as
printf "subjects\n"
(i.e. "subjects" followed by a  character). Note that "subject" is not in the messages
object.
The command
gettext -s -d mail "recipient"
will write "1 recipient" followed by a  character.
The command
gettext -s -n -d mail "recipient"
will write "1 recipient" without a  character.
RATIONALE
Historical implementations did not support the '\a' C-language escape sequence. This standard requires it to be
supported for consistency with other utilities that support the table in XBD 5. File
Format Notation.
Unlike other standard utilities, the behavior of gettext and ngettext is not undefined when NLSPATH
overrides the system default path; see XBD 8.2 Internationalization
Variables. This is so that applications can use these utilities to obtain message strings from messages objects in other
locations. However, it also means that they need to be implemented in such a way that they do not do anything that would result in
undefined behavior when they need to write a diagnostic message. In particular, they should not use a string obtained from a
message catalog or a messages object as a format string (or should only do so after checking that the string contains the correct
conversions).
FUTURE DIRECTIONS
None.
SEE ALSO
msgfmt, printf
XBD 7. Locale, 8.
Environment Variables, 12.2 Utility Syntax Guidelines
XSH gettext(), iconv(), setlocale()
CHANGE HISTORY
First released in Issue 8.
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/df.html =====
df
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
df — report free disk space
SYNOPSIS
[XSI] df [-k] [-P|-t]
[file...]
DESCRIPTION
The df utility shall write the amount of available space [XSI]
and file slots  for file systems on which the invoking user has appropriate read access. File systems shall be specified
by the file operands; when none are specified, information shall be written for all file systems. The format of the default
output from df is unspecified, but all space figures are reported in 512-byte units, unless the -k option is
specified. This output shall contain at least the file system names, amount of available space on each of these file systems,
[XSI]
and, if no options other than -t are specified, the number of free file slots, or inodes, available; when
-t is specified, the output shall contain the total allocated space as well.
OPTIONS
The df utility shall conform to XBD 12.2 Utility Syntax
Guidelines.
The following options shall be supported:
-k
Use 1024-byte units, instead of the default 512-byte units, when writing space figures.
-P
Produce output in the format described in the STDOUT section.
-t
[XSI]
Include total allocated-space figures in the output.
OPERANDS
The following operand shall be supported:
file
A pathname of a file within the hierarchy of the desired file system. If a file other than a FIFO, a regular file, a directory,
[XSI]
or a special file representing the device containing the file system (for example, /dev/dsk/0s1)  is specified, the results are unspecified. If the file operand names
a file other than a special file containing a file system, df shall write the amount of free space in the file system
containing the specified file operand. [XSI]   Otherwise, df shall write the amount of free space in that
file system.
STDIN
Not used.
INPUT FILES
None.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of df:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error and
informative messages written to standard output.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
Default.
STDOUT
When both the -k and -P options are specified, the following header line shall be written (in the POSIX
locale):
"Filesystem 1024-blocks Used Available Capacity Mounted on\n"
When the -P option is specified without the -k option, the following header line shall be written (in the POSIX
locale):
"Filesystem 512-blocks Used Available Capacity Mounted on\n"
The implementation may adjust the spacing of the header line and the individual data lines so that the information is presented
in orderly columns.
The remaining output with -P shall consist of one line of information for each specified file system. These lines shall
be formatted as follows:
"%s %d %d %d %d%% %s\n", , ,
, , ,
In the following list, all quantities expressed in 512-byte units (1024-byte when -k is specified) shall be rounded up to
the next higher unit. The fields are:
The name of the file system, in an implementation-defined format.
The total size of the file system in 512-byte units. The exact meaning of this figure is implementation-defined, but should
include , , plus any space reserved by the system not normally
available to a user.
The total amount of space allocated to existing files in the file system, in 512-byte units.
The total amount of space available within the file system for the creation of new files by unprivileged users, in 512-byte
units. When this figure is less than or equal to zero, it shall not be possible to create any new files on the file system without
first deleting others, unless the process has appropriate privileges. The figure written may be less than zero.
The percentage of the normally available space that is currently allocated to all files on the file system. This shall be
calculated using the fraction:
/( + )
expressed as a percentage. This percentage may be greater than 100 if  is less than zero. The
percentage value shall be expressed as a positive integer, with any fractional result causing it to be rounded to the next highest
integer.
The directory below which the file system hierarchy appears.
[XSI]
The output format is unspecified when -t is used.
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
On most systems, the "name of the file system, in an implementation-defined format" is the special file on which the file
system is mounted.
On large file systems, the calculation specified for percentage used can create huge rounding errors.
EXAMPLES
The following example writes portable information about the /usr file system:
df -P /usr
Assuming that /usr/src is part of the /usr file system, the following produces the same output as the previous
example:
df -P /usr/src
RATIONALE
The behavior of df with the -P option is the default action of the 4.2 BSD df utility. The uppercase
-P was selected to avoid collision with a known industry extension using -p.
Historical df implementations vary considerably in their default output. It was therefore necessary to describe the
default output in a loose manner to accommodate all known historical implementations and to add a portable option (-P) to
provide information in a portable format.
The use of 512-byte units is historical practice and maintains compatibility with ls
and other utilities in this volume of POSIX.1-2024. This does not mandate that the file system itself be based on 512-byte blocks.
The -k option was added as a compromise measure. It was agreed by the standard developers that 512 bytes was the best
default unit because of its complete historical consistency on System V (versus the mixed 512/1024-byte usage on BSD
systems), and that a -k option to switch to 1024-byte units was a good compromise. Users who prefer the more logical
1024-byte quantity can easily alias df to df -k without breaking many historical scripts relying on the
512-byte units.
It was suggested that df and the various related utilities be modified to access a BLOCKSIZE environment variable
to achieve consistency and user acceptance. Since this is not historical practice on any system, it is left as a possible area for
system extensions and will be re-evaluated in a future version if it is widely implemented.
FUTURE DIRECTIONS
If this utility is directed to display a pathname that contains any bytes that have the encoded value of a
character when  is a terminator or separator in the output format being used, implementations are encouraged to
treat this as an error. A future version of this standard may require implementations to treat this as an error.
SEE ALSO
find
XBD 8. Environment Variables, 12.2 Utility Syntax Guidelines
CHANGE HISTORY
First released in Issue 2.
Issue 6
This utility is marked as part of the User Portability Utilities option.
Issue 7
Austin Group Interpretation 1003.1-2001 #099 is applied.
The df utility is removed from the User Portability Utilities option. User Portability Utilities is now an option for
interactive utilities.
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
POSIX.1-2008, Technical Corrigendum 1, XCU/TC1-2008/0082 [156] is applied.
Issue 8
Austin Group Defect 251 is applied, encouraging implementations to report an error if a utility is directed to display a
pathname that contains any bytes that have the encoded value of a  character when  is a terminator or
separator in the output format being used.
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/sed.html =====
sed
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
sed — stream editor
SYNOPSIS
sed [-En] script [file...]
sed [-En] -e script [-e script]...
[-f script_file]... [file...]
sed [-En] [-e script]... -f script_file [-f
script_file]... [file...]
DESCRIPTION
The sed utility is a stream editor that shall read one or more text files, make editing changes according to a script of
editing commands, and write the results to standard output. The script shall be obtained from either the script operand
string or a combination of the option-arguments from the -e script and -f script_file options.
OPTIONS
The sed utility shall conform to XBD 12.2 Utility Syntax
Guidelines, except that the order of presentation of the -e and -f options is significant.
The following options shall be supported:
-E
Match using extended regular expressions. Treat each pattern specified as an ERE, as described in XBD 9.4 Extended Regular Expressions.
-e script
Add the editing commands specified by the script option-argument to the end of the script of editing commands.
-f script_file
Add the editing commands in the file script_file to the end of the script of editing commands.
-n
Suppress the default output (in which each line, after it is examined for editing, is written to standard output). Only lines
explicitly selected for output are written.
If any -e or -f options are specified, the script of editing commands shall initially be empty. The commands
specified by each -e or -f option shall be added to the script in the order specified. When each addition is made, if
the previous addition (if any) was from a -e option, a  shall be inserted before the new addition. The
resulting script shall have the same properties as the script operand, described in the OPERANDS section.
OPERANDS
The following operands shall be supported:
file
A pathname of a file whose contents are read and edited. If multiple file operands are specified, the named files shall
be read in the order specified and the concatenation shall be edited. If no file operands are specified, the standard input
shall be used.
script
A string to be used as the script of editing commands. The application shall not present a script that violates the
restrictions of a text file except that the final character need not be a .
STDIN
The standard input shall be used if no file operands are specified, and shall be used if a file operand is
'-' and the implementation treats the '-' as meaning standard input. Otherwise, the standard input shall not be
used. See the INPUT FILES section.
INPUT FILES
The input files shall be text files. The script_files named by the -f option shall consist of editing
commands.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of sed:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_COLLATE
Determine the locale for the behavior of ranges, equivalence classes, and multi-character collating elements within regular
expressions.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments and input files), and the behavior of character classes within regular
expressions.
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
Default.
STDOUT
The input files shall be written to standard output, with the editing commands specified in the script applied. If the -n
option is specified, only those input lines selected by the script shall be written to standard output.
STDERR
The standard error shall be used only for diagnostic and warning messages.
OUTPUT FILES
The output files shall be text files whose formats are dependent on the editing commands given.
EXTENDED DESCRIPTION
The script shall consist of editing commands of the following form:
[address[,address]]function
where function represents a single-character command verb from the list in Editing Commands
in sed, followed by any applicable arguments.
The command can be preceded by  characters and/or  characters. The function can be preceded by
characters. These optional characters shall have no effect.
In default operation, sed cyclically shall append a line of input, less its terminating  character, into
the pattern space. Reading from input shall be skipped if a  was in the pattern space prior to a D command
ending the previous cycle. The sed utility shall then apply in sequence all commands whose addresses select that pattern
space, until a command starts the next cycle or quits. If no commands explicitly started a new cycle, then at the end of the script
the pattern space shall be copied to standard output (except when -n is specified) and the pattern space shall be deleted.
Whenever the pattern space is written to standard output or a named file, sed shall immediately follow it with a
.
Some of the editing commands use a hold space to save all or part of the pattern space for subsequent retrieval. The pattern and
hold spaces shall each be able to hold at least 8192 bytes.
Addresses in sed
An address is either a decimal number that counts input lines cumulatively across files, a '$' character that addresses
the last line of input, or a context address. A context address has either the form "/RE/" or
"\cREc", where RE is a regular expression as described in Regular Expressions in
sed, and c is any character other than  or . In a sed context address, the BRE
and ERE syntax shall be extended to support escaping occurrences of the  or c delimiter within the RE by means
of an escape sequence (see XBD 9.1 Regular Expression Definitions). For
the "\cREc" form, if the character designated by c is not listed as a special BRE character (if the
-E option is not specified) or a special ERE character (if -E is specified) in XBD 9.3.3 BRE Special Characters or XBD 9.4.3 ERE Special Characters, respectively, the escape sequence
c shall be treated as that literal character; otherwise, it is unspecified whether the escape sequence
c is treated as the literal character or the special character. In either case, the escape sequence
c shall not terminate the RE. For example, in the context address "/abc\/def/", the second
stands for itself, so that the RE is "abc/def", and in "\xabc\xdefx", the second 'x'
stands for itself, so that the RE is "abcxdef".
An editing command with no addresses shall select every pattern space.
An editing command with one address shall select each pattern space that matches the address.
An editing command with two addresses shall select the inclusive range from the first pattern space that matches the first
address through the next pattern space that matches the second. (If the second address is a number less than or equal to the line
number first selected, only one line shall be selected.) Starting at the first line following the selected range, sed shall
look again for the first address. Thereafter, the process shall be repeated. Omitting either or both of the address components in
the following form produces undefined results:
[address[,address]]
Regular Expressions in sed
The sed utility shall support the REs described in XBD 9. Regular
Expressions; by default it shall use BREs as described in XBD 9.3 Basic
Regular Expressions, but if the -E option is used, it shall use EREs as described in XBD 9.4 Extended Regular Expressions. In sed, the BRE and ERE syntax shall be
extended as follows:
The delimiter character that precedes and follows the RE shall not terminate the RE when it appears within a bracket expression,
and shall have its normal meaning in the bracket expression. For example, the context address "\%[%]%" is equivalent to
"/[%]/", and the command "s-[0-9]--g" is equivalent to "s/[0-9]//g".
The escape sequence '\n' shall match a  embedded in the pattern space. A literal  shall
not be used in the RE of a context address or in the substitute function.
If an RE is empty (that is, no pattern is specified) sed shall behave as if the last RE used in the last command applied
(either as an address or as part of a substitute command) was specified.
Editing Commands in sed
In the following list of editing commands, the maximum number of permissible addresses for each function is indicated by
[0addr], [1addr], or [2addr], representing zero, one, or two addresses.
The argument text shall consist of one or more lines. A  in the text can be escaped with another
. The application shall ensure that each embedded  (that is, those other than the terminating
of the last line) in the text is preceded by an unescaped . The behavior is unspecified if an
unescaped  is immediately followed by any character other than  or , or by the end
of a script.
The r and w command verbs, and the w flag to the s command, take an rfile (or wfile)
parameter, separated from the command verb letter or flag by one or more  characters; implementations may allow zero
separation as an extension.
The argument rfile or the argument wfile shall terminate the editing command. Each wfile shall be created
before processing begins. Implementations shall support at least ten wfile arguments in the script; the actual number
(greater than or equal to 10) that is supported by the implementation is unspecified. The use of the wfile parameter shall
cause that file to be initially created, if it does not exist, or shall replace the contents of an existing file.
The b, r, s, t, w, y, and : command verbs shall accept additional arguments.
The following synopses indicate which arguments shall be separated from the command verbs by a single .
The a and r commands schedule text for later output. The text specified for the a command, and the contents
of the file specified for the r command, shall be written to standard output just before the next attempt to fetch a line of
input when executing the c, D, d, N, or n commands, just before executing the q command,
or when reaching the end of the script. If written when reaching the end of the script, and the -n option was not specified,
the text shall be written after copying the pattern space to standard output. The contents of the file specified for the r
command shall be as of the time the output is written, not the time the r command is applied. The text shall be output in
the order in which the a and r commands were applied to the input.
Editing commands other than a, b, c, i, r, t, w, :, and # can be
followed by a , optional  characters, and another editing command. However, when an s editing
command is used with the w flag, following it with another command in this manner produces undefined results.
A function can be preceded by a '!' character, in which case the function shall be applied if the addresses do not
select the pattern space. Zero or more  characters shall be accepted before the '!' character. It is
unspecified whether  characters can follow the '!' character, and conforming applications shall not follow
the '!' character with  characters.
If a label argument (to a b, t, or : command) contains characters outside of the portable filename
character set, or if a label is longer than 8 bytes, the behavior is unspecified. The implementation shall support
label arguments recognized as unique up to at least 8 bytes; the actual length (greater than or equal to 8) supported by the
implementation is unspecified. It is unspecified whether exceeding the maximum supported label length causes an error or a silent
truncation.
[2addr] {editing command
editing command
...
}
Execute a list of sed editing commands only when the pattern space is selected. The list of sed editing commands
shall be surrounded by braces. The braces can be preceded or followed by  characters. The  shall be
preceded by a  or  (before any optional  characters preceding the
).
Each command in the list of commands shall be terminated by a  character, or by a  character if
permitted when the command is used outside the braces. The editing commands can be preceded by  characters, but shall
not be followed by  characters.
[1addr]a\
text
Write text to standard output as described previously.
[2addr]b [label]
Branch to the : command verb bearing the label argument. If label is not specified, branch to the end of the
script.
[2addr]c\
text
Delete the pattern space. With a 0 or 1 address or at the end of a 2-address range, place text on the output. Start the
next cycle.
[2addr]d
Delete the pattern space and start the next cycle.
[2addr]D
If the pattern space contains no , delete the pattern space and start a normal new cycle as if the d
command was issued. Otherwise, delete the initial segment of the pattern space through the first , and start the
next cycle with the resultant pattern space and without reading any new input.
[2addr]g
Replace the contents of the pattern space by the contents of the hold space.
[2addr]G
Append to the pattern space a  followed by the contents of the hold space.
[2addr]h
Replace the contents of the hold space with the contents of the pattern space.
[2addr]H
Append to the hold space a  followed by the contents of the pattern space.
[1addr]i\
text
Write text to standard output.
[2addr]l
(The letter ell.) Write the pattern space to standard output in a visually unambiguous form. The characters listed in XBD
Escape Sequences and Associated Actions ('\\', '\a',
'\b', '\f', '\r', '\t', '\v') shall be written as the corresponding escape sequence;
the '\n' in that table is not applicable. Non-printable characters not in that table shall be written as one three-digit
octal number (with a preceding ) for each byte in the character (most significant byte first).
Long lines shall be folded, with the point of folding indicated by writing a  followed by a ;
the length at which folding occurs is unspecified, but should be appropriate for the output device. The end of each line shall be
marked with a '$'.
[2addr]n
Write the pattern space to standard output if the default output has not been suppressed, and replace the pattern space with
the next line of input, less its terminating .
If no next line of input is available, the n command verb shall branch to the end of the script and quit without starting
a new cycle.
[2addr]N
Append the next line of input, less its terminating , to the pattern space, using an embedded  to
separate the appended material from the original material. Note that the current line number changes.
If no next line of input is available, the N command verb shall branch to the end of the script and quit without starting
a new cycle or copying the pattern space to standard output.
[2addr]p
Write the pattern space to standard output.
[2addr]P
Write the pattern space, up to the first , to standard output.
[1addr]q
Branch to the end of the script and quit without starting a new cycle.
[1addr]r rfile
Copy the contents of rfile to standard output as described previously. If rfile does not exist or cannot be read,
it shall be treated as if it were an empty file, causing no error condition.
[2addr]s/RE/replacement/flags
Substitute the replacement string for instances of the RE in the pattern space. Any character other than  or
can be used instead of a  to delimit the RE and the replacement. Within the RE (as a sed
extension to the BRE and ERE syntax) and the replacement, the delimiter shall not terminate the RE or replacement if it is the
second character of an escape sequence (see XBD 9.1 Regular Expression
Definitions). If the delimiter character is not listed as a special BRE character (if the -E option is not
specified) or a special ERE character (if -E is specified) in XBD 9.3.3
BRE Special Characters or XBD 9.4.3 ERE Special Characters,
respectively, the escaped delimiter shall be treated as that literal character in the RE; otherwise, it is unspecified whether the
escaped delimiter is treated as the literal character or the special character. Likewise, if the delimiter character is not
('&'), the escaped delimiter shall be treated as that literal character in the replacement; if it is
, it is unspecified whether the escaped delimiter is treated as the literal character or the special character
(see below).
The replacement string shall be scanned from beginning to end. An  ('&') appearing in the
replacement shall be replaced by the string matching the RE. The special meaning of '&' in this context can be
suppressed by preceding it by a . The characters "\n", where n is a digit, shall be
replaced by the text matched by the corresponding back-reference expression. If the corresponding back-reference expression does
not match, then the characters "\n" shall be replaced by the empty string. The special meaning of
"\n" where n is a digit in this context, can be suppressed by preceding it by a . For each
other  encountered, the following character shall lose its special meaning (if any).
A line can be split by substituting a  into it. The application shall escape the  in the
replacement by preceding it by a .
The meaning of an unescaped  immediately followed by any character other than '&',
, a digit, , or the delimiter character used for this command, is unspecified.
Any  used to alter the default meaning of a subsequent character shall be discarded from the resulting
replacement string. A substitution shall be considered to have been performed even if the resulting replacement string is identical
to the string that it replaces.
The value of flags shall be zero or more of:
n
Substitute for the nth occurrence only of the RE found within the pattern space.
g
Globally substitute for all non-overlapping instances of the RE rather than just the first one. If both g and n
are specified, the results are unspecified.
i
Match the regular expression in a case-insensitive way.
p
Write the pattern space to standard output if a replacement was made.
w wfile
Write. Append the pattern space to wfile if a replacement was made. A conforming application shall precede the
wfile argument with one or more  characters. If the w flag is not the last flag value given in a
concatenation of multiple flag values, the results are undefined.
[2addr]t [label]
Test. Branch to the : command verb bearing the label if any substitutions have been made since the most recent
reading of an input line or execution of a t. If label is not specified, branch to the end of the script.
[2addr]w wfile
Append (write) the pattern space to wfile.
[2addr]x
Exchange the contents of the pattern and hold spaces.
[2addr]y/string1/string2/
Replace all occurrences of characters in string1 with the corresponding characters in string2. If a
followed by an 'n' appear in string1 or string2, the two characters shall be handled as a single
. If (after resolving any escape sequences) the numbers of characters in string1 and string2 are not
equal, or if any of the characters in string1 appear more than once, the results are undefined. Any character other than
or  can be used instead of  to delimit the strings. If the delimiter is not
'n', within string1 and string2, the delimiter itself can be used as a literal character if it is preceded
by an unescaped . If a  character is escaped by an immediately preceding unescaped
character in string1 or string2, the two  characters shall be treated as a single
literal  character. The meaning of an unescaped  followed by any character that is not
'n', a , or the delimiter character is undefined.
[0addr]:label
Do nothing. This command bears a label to which the b and t commands branch.
[1addr]=
Write the following to standard output:
"%d\n",
[0addr]
Ignore this empty command.
[0addr]#
Ignore the '#' and the remainder of the line (treat them as a comment), with the single exception that if the first
two characters in the script are "#n", the default output shall be suppressed; this shall be the equivalent of specifying
-n on the command line.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
Regular expressions match entire strings, not just individual lines, but a  is matched by '\n' in a
sed RE; a  is not allowed by the general definition of regular expression in POSIX.1-2024. Also note that
'\n' cannot be used to match a  at the end of an arbitrary input line;  characters appear in
the pattern space as a result of the N editing command.
Applications that use a special RE character as a delimiter (for example, '.' or '*') and need to use the
delimiter as a literal character in the RE should put it inside a bracket expression, as implementations differ regarding whether
escaping it with a  removes its special meaning. For example, for the context address "/\.[0-9]/" to be
written with '.' as delimiter, the form "\.[.][0-9]." needs to be used; "\.\.[0-9]." cannot be used
portably for this purpose, as it is unspecified whether this would be equivalent to "/\.[0-9]/" or "/.[0-9]/".
Portable applications cannot use a special RE character as a delimiter if that character needs to have its special meaning in the
RE, as escaping it may remove its special meaning.
When using sed to process pathnames, it is recommended that LC_ALL, or at least LC_CTYPE and LC_COLLATE, are set to POSIX
or C in the environment, since pathnames can contain byte sequences that do not form valid characters in some locales, in which
case the utility's behavior would be undefined. In the POSIX locale each byte is a valid single-byte character, and therefore this
problem is avoided.
Note that some implementations of sed also support an I flag for the s command as an alias for the lower
case i flag.
Some implementations of sed, when executed in a non-conforming environment, handle  escapes in regular
expressions in a similar way to how awk handles them in the lexical token ERE
(processing "\t" as a tab character, etc.). This is a compatible extension except that it conflicts with the requirements
of this standard when  appears inside a bracket expression. A future version of this standard may allow this
behavior, and therefore applications should use two  characters in bracket expressions instead of one in order to
ensure future portability. On implementations conforming to the current standard, the second  is redundant. In the
future (and in current non-conforming environments) the first  may escape the second.
EXAMPLES
This sed script simulates the BSD cat -s command, squeezing excess
empty lines from standard input.
sed -n '
# Write non-empty lines.
/./ {
p
d
}
# Write a single empty line, then look for more empty lines.
/^$/    p
# Get next line, discard the held  (empty line),
# and look for more empty lines.
:Empty
/^$/    {
N
s/.//
b Empty
}
# Write the non-empty line before going back to search
# for the first in a set of empty lines.
p
'
The following sed command is a much simpler method of squeezing empty lines, although it is not quite the same as
cat -s since it removes any initial empty lines:
sed -n '/./,/^$/p'
RATIONALE
This volume of POSIX.1-2024 requires implementations to support at least ten distinct wfiles, matching historical
practice on many implementations. Implementations are encouraged to support more, but conforming applications should not exceed
this limit.
The exit status codes specified here are different from those in System V. System V returns 2 for garbled sed commands,
but returns zero with its usage message or if the input file could not be opened. The standard developers considered this to be a
bug.
The manner in which the l command writes non-printable characters was changed to avoid the historical
backspace-overstrike method, and other requirements to achieve unambiguous output were added. See the RATIONALE for ed for details of the format chosen, which is the same as that chosen for sed.
This volume of POSIX.1-2024 requires implementations to provide pattern and hold spaces of at least 8192 bytes, larger than the
4000 bytes spaces used by some historical implementations, but less than the 20480 bytes limit used in an early proposal.
Implementations are encouraged to allocate dynamically larger pattern and hold spaces as needed.
The requirements for acceptance of  and  characters in command lines has been made more explicit than
in early proposals to describe clearly the historical practice and to remove confusion about the phrase "protect initial blanks
[sic] and tabs from the stripping that is done on every script line" that appears in much of the historical documentation
of the sed utility description of text. (Not all implementations are known to have stripped  characters from
text lines, although they all have allowed leading  characters preceding the address on a command line.)
The treatment of '#' comments differs from the SVID which only allows a comment as the first line of the script, but
matches BSD-derived implementations. The comment character is treated as a command, and it has the same properties in terms of
being accepted with leading  characters; the BSD implementation has historically supported this.
Early proposals required that a script_file have at least one non-comment line. Some historical implementations have
behaved in unexpected ways if this were not the case. The standard developers considered that this was incorrect behavior and that
application developers should not have to avoid this feature. A correct implementation of this volume of POSIX.1-2024 shall permit
script_files that consist only of comment lines.
Early proposals indicated that if -e and -f options were intermixed, all -e options were processed before
any -f options. This has been changed to process them in the order presented because it matches historical practice and is
more intuitive.
The characters  and  cannot be used as RE delimiter characters, as they can never be recognized
as the ending delimiter:
does not work, because if it appears unescaped later in the RE, it either escapes the following character,
which can then never be the ending delimiter, or it is part of a bracket expression, inside which the ending delimiter for the RE
cannot be located.
does not work, because if not escaped, it terminates the command, meaning it cannot be the ending delimiter.
Some historical sed implementations did not support escaping '(', ')', '{', and '}'
when used as a BRE delimiter, as the sequences "\(" and so on were still treated as special, usually resulting in an
error. This standard requires that these sequences are treated as the literal character. This is for consistency with extensions.
For example, some implementations treat "\s" in a BRE as matching white-space characters, as an extension. This cannot
have its special meaning when 's' is used as a BRE delimiter in order to ensure portability of sed commands that
have 's' as a delimiter and escape it. If "\s" were allowed to keep its special meaning, then the potential for
further extensions would mean portable applications would not be able to escape any delimiter character other than
.
The treatment of the p flag to the s command differs between System V and BSD-based systems when the default
output is suppressed. In the two examples:
echo a | sed    's/a/A/p'
echo a | sed -n 's/a/A/p'
this volume of POSIX.1-2024, BSD, System V documentation, and the SVID indicate that the first example should write two lines
with A, whereas the second should write one. Some System V systems write the A only once in both examples because the
p flag is ignored if the -n option is not specified.
This is a case of a diametrical difference between systems that could not be reconciled through the compromise of declaring the
behavior to be unspecified. The SVID/BSD/System V documentation behavior was adopted for this volume of POSIX.1-2024 because:
No known documentation for any historic system describes the interaction between the p flag and the -n option.
The selected behavior is more correct as there is no technical justification for any interaction between the p flag and
the -n option. A relationship between -n and the p flag might imply that they are only used together, but this
ignores valid scripts that interrupt the cyclical nature of the processing through the use of the D, d, q, or
branching commands. Such scripts rely on the p suffix to write the pattern space because they do not make use of the default
output at the "bottom" of the script.
Because the -n option makes the p flag unnecessary, any interaction would only be useful if sed scripts
were written to run both with and without the -n option. This is believed to be unlikely. It is even more unlikely that
programmers have coded the p flag expecting it to be unnecessary. Because the interaction was not documented, the likelihood
of a programmer discovering the interaction and depending on it is further decreased.
Finally, scripts that break under the specified behavior produce too much output instead of too little, which is easier to
diagnose and correct.
The form of the substitute command that uses the n suffix was limited to the first 512 matches in an early proposal. This
limit has been removed because there is no reason an editor processing lines of {LINE_MAX} length should have this restriction. The
command s/a/A/2047 should be able to substitute the 2047th occurrence of a on a line.
The b, t, and : commands are documented to ignore leading white space, but no mention is made of trailing
white space. Historical implementations of sed assigned different locations to the labels 'x' and
"x ". This is not useful, and leads to subtle programming errors, but it is historical practice, and changing it
could theoretically break working scripts. Implementors are encouraged to provide warning messages about labels that are never
referenced by a b or t command, jumps to labels that do not exist, and label arguments that are subject to
truncation.
Earlier versions of this standard allowed for implementations with bytes other than eight bits, but this has been modified in
this version.
FUTURE DIRECTIONS
A future version of this standard may allow sed to handle  escapes in regular expressions in a similar
way to how awk handles them in the lexical token ERE. ("Similar" rather than
"the same" because sed can use BREs or EREs whereas awk uses only EREs.)
SEE ALSO
awk, ed, grep
XBD Escape Sequences and Associated Actions, 8. Environment Variables, 9.3
Basic Regular Expressions, 12.2 Utility Syntax Guidelines
CHANGE HISTORY
First released in Issue 2.
Issue 5
The FUTURE DIRECTIONS section is added.
Issue 6
The following new requirements on POSIX implementations derive from alignment with the Single UNIX Specification:
Implementations are required to support at least ten wfile arguments in an editing command.
The EXTENDED DESCRIPTION is changed to align with the IEEE P1003.2b draft standard.
IEEE PASC Interpretation 1003.2 #190 is applied.
IEEE PASC Interpretation 1003.2 #203 is applied, clarifying the meaning of the -escape sequences in a
replacement string for a BRE.
IEEE Std 1003.1-2001/Cor 2-2004, item XCU/TC2/D6/28 is applied, removing text describing behavior on systems with
bytes consisting of more than eight bits.
IEEE Std 1003.1-2001/Cor 2-2004, item XCU/TC2/D6/29 is applied, making an editorial correction within the Editing
Commands in sed section.
Issue 7
Austin Group Interpretations 1003.1-2001 #006, #036, and #092 are applied.
SD5-XCU-ERN-97 and SD5-XCU-ERN-123 are applied, updating the SYNOPSIS.
A second example is added.
POSIX.1-2008, Technical Corrigendum 1, XCU/TC1-2008/0133 [262], XCU/TC1-2008/0134 [282,431], XCU/TC1-2008/0135 [269], and
XCU/TC1-2008/0136 [282,431] are applied.
POSIX.1-2008, Technical Corrigendum 2, XCU/TC2-2008/0166 [945], XCU/TC2-2008/0167 [944], XCU/TC2-2008/0168 [945],
XCU/TC2-2008/0169 [944], XCU/TC2-2008/0170 [945], XCU/TC2-2008/0171 [533], XCU/TC2-2008/0172 [663], XCU/TC2-2008/0173 [945], and
XCU/TC2-2008/0174 [944] are applied.
Issue 8
Austin Group Defect 528 is applied, adding support for selecting the use of EREs instead of BREs, by specifying the -E
option.
Austin Group Defect 779 is applied, adding the i flag to the s command.
Austin Group Defect 961 is applied, requiring that {...} can be followed by a , optional
characters, and another editing command.
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
Austin Group Defect 1231 is applied, clarifying the handling of  in text arguments.
Austin Group Defect 1233 is applied, changing the APPLICATION USAGE and FUTURE DIRECTIONS sections.
Austin Group Defect 1319 is applied, changing when the text specified for the a command and the contents of the file
specified for the r command are written.
Austin Group Defect 1550 is applied, clarifying requirements relating to delimiters in context addresses and in s and
y commands.
Austin Group Defect 1578 is applied, clarifying the description of the y command.
Austin Group Defect 1767 is applied, clarifying that a c command starts the next cycle on every line that its address
range matches.
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/colon.html =====
Shell Command Language
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
Please enable javascript in your browser to automatically redirect to the target page, otherwise select the link below.
2.15 Special Built-In Utilities
break
colon
continue
dot
eval
exec
exit
export
readonly
return
set
shift
times
trap
unset
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
===== susv5-html/utilities/csplit.html =====
csplit
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
csplit — split files based on context
SYNOPSIS
csplit [-ks] [-f prefix] [-n number] file
arg...
DESCRIPTION
The csplit utility shall read the file named by the file operand, write all or part of that file into other files
as directed by the arg operands, and write the sizes of the files.
OPTIONS
The csplit utility shall conform to XBD 12.2 Utility Syntax
Guidelines.
The following options shall be supported:
-f prefix
Name the created files prefix00, prefix01, ..., prefixn. The default is xx00 ...
xxn. If the prefix argument would create a filename exceeding {NAME_MAX} bytes, an error shall result,
csplit shall exit with a diagnostic message, and no files shall be created.
-k
Leave previously created files intact. By default, csplit shall remove created files if an error occurs.
-n number
Use number decimal digits to form filenames for the file pieces. The default shall be 2.
-s
Suppress the output of file size messages.
OPERANDS
The following operands shall be supported:
file
The pathname of a text file to be split. If file is '-', the standard input shall be used.
Each arg operand can be one of the following:
/rexp/[offset]
A file shall be created using the content of the lines from the current line up to, but not including, the line that results from
the evaluation of the regular expression with offset, if any, applied. The regular expression rexp shall follow the
rules for basic regular expressions described in XBD 9.3 Basic Regular
Expressions. The application shall use the sequence "\/" to specify a  character within the
rexp. The optional offset shall be a positive or negative integer value representing a number of lines. A positive integer
value can be preceded by '+'. If the selection of lines from an offset expression of this type would create a file
with zero lines, or one with greater than the number of lines left in the input file, the results are unspecified. After the
section is created, the current line shall be set to the line that results from the evaluation of the regular expression with any
offset applied. If the current line is the first line in the file and a regular expression operation has not yet been performed,
the pattern match of rexp shall be applied from the current line to the end of the file. Otherwise, the pattern match of
rexp shall be applied from the line following the current line to the end of the file.
%rexp%[offset]
Equivalent to /rexp/[offset], except that no file shall be created for the selected section of the
input file. The application shall use the sequence "\%" to specify a  character within the
rexp.
line_no
Create a file from the current line up to (but not including) the line number line_no. Lines in the file shall be
numbered starting at one. The current line becomes line_no.
{num}
Repeat operand. This operand can follow any of the operands described previously. If it follows a rexp type operand,
that operand shall be applied num more times. If it follows a line_no operand, the file shall be split every
line_no lines, num times, from that point.
An error shall be reported if an operand does not reference a line between the current position and the end of the file.
STDIN
See the INPUT FILES section.
INPUT FILES
The input file shall be a text file.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of csplit:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_COLLATE
Determine the locale for the behavior of ranges, equivalence classes, and multi-character collating elements within regular
expressions.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments and input files) and the behavior of character classes within regular
expressions.
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
If the -k option is specified, created files shall be retained. Otherwise, the default action occurs.
STDOUT
Unless the -s option is used, the standard output shall consist of one line per file created, with a format as
follows:
"%d\n",
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
The output files shall contain portions of the original input file; otherwise, unchanged.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
By default, created files shall be removed if an error occurs. When the -k option is specified, created files shall not
be removed if an error occurs.
The following sections are informative.
APPLICATION USAGE
None.
EXAMPLES
This example creates four files, cobol00 ... cobol03:
csplit -f cobol file '/procedure division/' /par5./ /par16./
After editing the split files, they can be recombined as follows:
cat cobol0[0-3] > file
Note that this example overwrites the original file.
This example would split the file after the first 99 lines, and every 100 lines thereafter, up to 9999 lines; this is because
lines in the file are numbered from 1 rather than zero, for historical reasons:
csplit -k file  100  {99}
Assuming that prog.c follows the C-language coding convention of ending routines with a '}' at the beginning of
the line, this example creates a file containing each separate C routine (up to 21) in prog.c:
csplit -k prog.c '%main(%'  '/^}/+1' {20}
RATIONALE
The -n option was added to extend the range of filenames that could be handled.
Consideration was given to adding a -a flag to use the alphabetic filename generation used by the historical split utility, but the functionality added by the -n option was deemed to make
alphabetic naming unnecessary.
FUTURE DIRECTIONS
If this utility is directed to create a new directory entry that contains any bytes that have the encoded value of a
character, implementations are encouraged to treat this as an error. A future version of this standard may require
implementations to treat this as an error.
SEE ALSO
sed, split
XBD 8. Environment Variables, 9.3 Basic Regular Expressions, 12.2 Utility Syntax Guidelines
CHANGE HISTORY
First released in Issue 2.
Issue 5
The FUTURE DIRECTIONS section is added.
Issue 6
This utility is marked as part of the User Portability Utilities option.
The APPLICATION USAGE section is added.
The description of regular expression operands is changed to align with the IEEE P1003.2b draft standard.
The normative text is reworded to avoid use of the term "must" for application requirements.
Issue 7
The csplit utility is moved from the User Portability Utilities option to the Base. User Portability Utilities is now an
option for interactive utilities.
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
The SYNOPSIS and OPERANDS sections are revised to use a single arg to split a file into two pieces.
Issue 8
Austin Group Defect 251 is applied, encouraging implementations to disallow the creation of filenames containing any bytes that
have the encoded value of a  character.
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/tabs.html =====
tabs
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
tabs — set terminal tabs
SYNOPSIS
[XSI] tabs [-n|-a|-a2|-c|-c2|-c3|-f|-p|-s|-u]
[-T type]
tabs [-T type]
n[[sep[+]n]...]
DESCRIPTION
The tabs utility shall display a series of characters that first clears the hardware terminal tab settings and then
initializes the tab stops at the specified positions [XSI]   and optionally adjusts the margin.
The phrase "tab-stop position N" shall be taken to mean that, from the start of a line of output, tabbing to position
N shall cause the next character output to be in the (N+1)th column position on that line. The maximum number of tab
stops allowed is terminal-dependent.
It need not be possible to implement tabs on certain terminals. If the terminal type obtained from the TERM
environment variable or -T option represents such a terminal, an appropriate diagnostic message shall be written to standard
error and tabs shall exit with a status greater than zero.
OPTIONS
The tabs utility shall conform to XBD 12.2 Utility Syntax
Guidelines, [XSI]   except for various extensions: the options -a2, -c2, and -c3 are
multi-character.
The following options shall be supported:
-n
Specify repetitive tab stops separated by a uniform number of column positions, n, where n is a single-digit
decimal number. The default usage of tabs with no arguments shall be equivalent to tabs -8. When -0 is used,
the tab stops shall be cleared and no new ones set.
-a
[XSI]
1,10,16,36,72
Assembler, applicable to some mainframes.
-a2
[XSI]
1,10,16,40,72
Assembler, applicable to some mainframes.
-c
[XSI]
1,8,12,16,20,55
COBOL, normal format.
-c2
[XSI]
1,6,10,14,49
COBOL, compact format (columns 1 to 6 omitted).
-c3
[XSI]
1,6,10,14,18,22,26,30,34,38,42,46,50,54,58,62,67
COBOL compact format (columns 1 to 6 omitted), with more tabs than -c2.
-f
[XSI]
1,7,11,15,19,23
FORTRAN
-p
[XSI]
1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61
PL/1
-s
[XSI]
1,10,55
SNOBOL
-u
[XSI]
1,12,20,44
Assembler, applicable to some mainframes.
-T type
Indicate the type of terminal. If this option is not supplied and the TERM variable is unset or null, an unspecified
default terminal type shall be used. The setting of type shall take precedence over the value in TERM .
OPERANDS
The following operand shall be supported:
n[[sep[+]n]...]
A single command line argument that consists of one or more tab-stop values (n) separated by a separator character
(sep) which is either a  or a  character. The application shall ensure that the tab-stop values
are positive decimal integers in strictly ascending order. If any tab-stop value (except the first one) is preceded by a
, it is taken as an increment to be added to the previous value. For example, the tab lists 1,10,20,30 and "1
10 +10 +10" are considered to be identical.
STDIN
Not used.
INPUT FILES
None.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of tabs:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
TERM
Determine the terminal type. If this variable is unset or null, and if the -T option is not specified, an unspecified
default terminal type shall be used.
ASYNCHRONOUS EVENTS
Default.
STDOUT
If standard output is a terminal, the appropriate sequence to clear and set the tab stops may be written to standard output in
an unspecified format. If standard output is not a terminal, undefined results occur.
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
This utility makes use of the terminal's hardware tabs and the stty tabs
option.
This utility is not recommended for application use.
Some integrated display units might not have escape sequences to set tab stops, but may be set by internal system calls. On
these terminals, tabs works if standard output is directed to the terminal; if output is directed to another file, however,
tabs fails.
EXAMPLES
None.
RATIONALE
Consideration was given to having the tput utility handle all of the functions
described in tabs. However, the separate tabs utility was retained because it seems more intuitive to use a command
named tabs than tput with a new option. The tput utility does not support setting or clearing tabs, and no known historical version of
tabs supports the capability of setting arbitrary tab stops.
The System V tabs interface is very complex; the version in this volume of POSIX.1-2024 has a reduced feature list, but
many of the features omitted were restored as part of the XSI option even though the supported languages and coding styles are
primarily historical.
There was considerable sentiment for specifying only a means of resetting the tabs back to a known state—presumably the
"standard" of tabs every eight positions. The following features were omitted:
Setting tab stops via the first line in a file, using --file. Since even the SVID has no complete explanation of this
feature, it is doubtful that it is in widespread use.
In an early proposal, a -t tablist option was added for consistency with expand; this was later removed when inconsistencies with the historical list of tabs were
identified.
Consideration was given to adding a -p option that would output the current tab settings so that they could be saved and
then later restored. This was not accepted because querying the tab stops of the terminal is not a capability in historical
terminfo or termcap facilities and might not be supported on a wide range of terminals.
FUTURE DIRECTIONS
None.
SEE ALSO
expand, stty, tput, unexpand
XBD 8. Environment Variables, 12.2 Utility Syntax Guidelines
CHANGE HISTORY
First released in Issue 2.
Issue 6
This utility is marked as part of the User Portability Utilities option.
The normative text is reworded to avoid use of the term "must" for application requirements.
Issue 7
The tabs utility is removed from the User Portability Utilities option. User Portability Utilities is now an option for
interactive utilities.
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
The SYNOPSIS and OPERANDS sections are updated.
Issue 8
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/strings.html =====
strings
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
strings — find printable strings in files
SYNOPSIS
strings [-a] [-t format] [-n number]
[file...]
DESCRIPTION
The strings utility shall look for printable strings in regular files and shall write those strings to standard output. A
printable string is any sequence of four (by default) or more printable characters terminated by a  or NUL
character. Additional implementation-defined strings may be written; see localedef.
If any argument is '-', the results are unspecified.
OPTIONS
The strings utility shall conform to XBD 12.2 Utility Syntax
Guidelines, except for the unspecified usage of '-'.
The following options shall be supported:
-a
Scan files in their entirety. If -a is not specified, it is implementation-defined what portion of each file is scanned
for strings.
-n number
Specify the minimum string length, where the number argument is a positive decimal integer. The default shall be 4.
-t format
Write each string preceded by its byte offset from the start of the file. The format shall be dependent on the single character
used as the format option-argument:
d
The offset shall be written in decimal.
o
The offset shall be written in octal.
x
The offset shall be written in hexadecimal.
OPERANDS
The following operand shall be supported:
file
A pathname of a regular file to be used as input. If no file operand is specified, the strings utility shall read
from the standard input.
STDIN
See the INPUT FILES section.
INPUT FILES
The input files named by the utility arguments or the standard input shall be regular files of any format.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of strings:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments and input files) and to identify printable strings.
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
Default.
STDOUT
Strings found shall be written to the standard output, one per line.
When the -t option is not specified, the format of the output shall be:
"%s",
With the -t o option, the format of the output shall be:
"%o %s", ,
With the -t x option, the format of the output shall be:
"%x %s", ,
With the -t d option, the format of the output shall be:
"%d %s", ,
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
By default the data area (as opposed to the text, "bss", or header areas) of a binary executable file is scanned.
Implementations document which areas are scanned.
Some historical implementations do not require NUL or  terminators for strings to permit those languages that do
not use NUL as a string terminator to have their strings written.
EXAMPLES
None.
RATIONALE
Apart from rationalizing the option syntax and slight difficulties with object and executable binary files, strings is
specified to match historical practice closely. The -a and -n options were introduced to replace the non-conforming
- and -number options. These options are no longer specified by POSIX.1-2024 but may be present in some
implementations.
The -o option historically means different things on different implementations. Some use it to mean "offset in
decimal", while others use it as "offset in octal". Instead of trying to decide which way would be least objectionable,
the -t option was added. It was originally named -O to mean "offset", but was changed to -t to be consistent
with od.
The ISO C standard function isprint() is restricted to a domain of
unsigned char. This volume of POSIX.1-2024 requires implementations to write strings as defined by the current locale.
FUTURE DIRECTIONS
None.
SEE ALSO
localedef, nm
XBD 8. Environment Variables, 12.2 Utility Syntax Guidelines
CHANGE HISTORY
First released in Issue 4.
Issue 6
This utility is marked as part of the User Portability Utilities option.
The obsolescent SYNOPSIS is removed.
The normative text is reworded to avoid use of the term "must" for application requirements.
Issue 7
Austin Group Interpretation 1003.1-2001 #027 is applied, clarifying the behavior if the first argument is '-'.
The strings utility is moved from the User Portability Utilities option to the Base. User Portability Utilities is now an
option for interactive utilities.
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
Issue 8
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
Austin Group Defect 1599 is applied, making the behavior unspecified when any argument is '-'.
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/gettext.html =====
gettext
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
gettext, ngettext — retrieve text string from messages object
SYNOPSIS
gettext [-e|-E] [-d textdomain] [textdomain] msgid
gettext [-e|-E] [-n] -s [-d textdomain]
msgid...
ngettext [-e|-E] [-d textdomain] [textdomain] msgid
msgid_plural n
DESCRIPTION
The gettext and ngettext utilities shall write to standard output the message string(s) that would result from the
following calls to functions defined in the System Interfaces volume of POSIX.1-2024:
if (textdomainname == NULL || textdomainname[0] == '\0')
message_string = msgid;
else {
setlocale(LC_ALL, "");
if (textdomaindir != NULL)
bindtextdomain(textdomainname, textdomaindir);
if (msgid_plural == NULL)
message_string = dgettext(textdomainname, msgid);
else
message_string = dngettext(textdomainname, msgid, msgid_plural, n);
}
where:
The textdomaindir variable is a string containing the value of the TEXTDOMAINDIR environment variable, if set and
not empty, or is NULL otherwise.
The textdomainname variable is a string containing the text domain name obtained from, in decreasing order of
precedence:
The optional operand textdomain, if present
The -d textdomain option, if specified
The TEXTDOMAIN environment variable, if set and not empty
If the text domain name cannot be obtained from these sources, the textdomainname variable is NULL.
If the -s option of gettext is not specified and for the ngettext utility, the msgid variable is a
string containing:
The value of the msgid operand, if the -E option is specified
The value of the msgid operand with C-language escape sequences processed (see below), if the -e option is
specified
The value of the msgid operand with C-language escape sequences optionally processed (see below), otherwise
If the -s option of gettext is specified, the msgid variable is a string containing:
The value of each msgid operand in turn, if the -E option is specified or neither the -e nor the -E
option is specified
The value of each msgid operand in turn with C-language escape sequences processed (see below), if the -e option
is specified
For the gettext utility, the msgid_plural variable is NULL. For the ngettext utility, the
msgid_plural variable is a string containing:
The value of the msgid_plural operand, if the -E option is specified
The value of the msgid_plural operand with C-language escape sequences processed (see below), if the -e option is
specified
The value of the msgid_plural operand with C-language escape sequences optionally processed (see below), otherwise
For the gettext utility, the n variable is 1 (one). For the ngettext utility the n variable is the
n operand, parsed as an integer as if by using the strtoul() function with a
base argument of 10.
When C-language escape sequences are processed, they shall be processed as specified for character string literals in the
ISO C standard, except that universal-character-name escape sequences need not be supported. Implementations may also
support a  'c' escape sequence; if supported, the '\c' and all characters following it shall be
removed and, if the -s option is specified, the behavior shall be as if the -n option is also specified.
For the ngettext utility, and for the gettext utility if the -s option is not specified, the resulting
message string shall be written to standard output. If the -s option of gettext is specified, the resulting message
string for each msgid shall be written to standard output with consecutive message strings separated by a single
character and, if the -n option is not specified, a  shall be written after the last message
string. If the -s and -n options are specified, the trailing  shall be omitted.
Under conditions where the textdomainname variable in the above code would be NULL, these utilities may write a
diagnostic message to standard error and exit with non-zero status.
OPTIONS
These utilities shall conform to XBD 12.2 Utility Syntax Guidelines
.
The following options shall be supported:
-d textdomain
Retrieve the translated message from the domain textdomain, if textdomain is not specified as an operand.
-e
Process C-language escape sequences in msgid and msgid_plural operands.
-E
Do not process C-language escape sequences in msgid and msgid_plural operands.
The gettext utility shall also support the following options:
-n
Modify the behavior of the -s option such that a  is not appended to the output.
-s
Separate the message strings obtained from each msgid operand with  characters in the output, and (if
-n is not also specified) append a  to the output.
If neither of the mutually exclusive -e and -E options is specified, it is unspecified which is the default,
except that if the -s option of gettext is specified then -E shall be the default.
OPERANDS
The following operands shall be supported:
textdomain
A text domain name used to retrieve the translated message. This shall override the specification by the -d option, if
present.
msgid
A key to retrieve the translated message.
msgid_plural
A default plural if no corresponding plural message can be found.
n
A non-negative decimal integer to be used as the n argument to dngettext() (see the DESCRIPTION).
STDIN
Not used.
INPUT FILES
The input files are messages object files (see msgfmt).
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of gettext and ngettext:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LANGUAGE
Determine the location of messages objects [XSI]   if NLSPATH is not set or the evaluation of NLSPATH
did not lead to a suitable messages object being found.
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_MESSAGES
Determine the locale name used to locate messages objects, and the locale that should be used to affect the format and contents of
diagnostic messages written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
TEXTDOMAIN
Specify the text domain name. (See XBD 3.386 Text Domain.)
TEXTDOMAINDIR
Specify the pathname to the messages object hierarchy. [XSI]  NLSPATH shall have precedence over TEXTDOMAINDIR .
ASYNCHRONOUS EVENTS
Default.
STDOUT
See DESCRIPTION.
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
Since it is unspecified which of the -e or -E options is the default, except when the -s option of
gettext is specified, portable applications need to ensure that -e, -E, or (for gettext) -s is
specified whenever a msgid or msgid_plural operand contains, or might contain, a  character.
Note that, unless the -s option of gettext is specified without -n, the message(s) written to standard
output are not followed by a . (Therefore the output only ends with a  if the last message ends with
one.)
Both msgid and msgid_plural should be properly quoted for the shell.
EXAMPLES
The following examples assume that the following portable messages object source file (dot-po file) has been compiled to a valid
file mail.mo by the msgfmt utility. See the EXTENDED DESCRIPTION section of
the msgfmt utility for a description of the dot-po file format.
msgid ""
msgstr ""
"Content-Type: text/plain; charset=utf-8\n"
"Plural-Forms: nplurals=4; plural=n==1?0: (n>1&&n character). The output of ngettext can be used as a
format string for printf.
The command
printf "$(ngettext -ed mail "%d attachment\n" "%d attachments\n" 1)" 10
will write the same as
printf "1 (%d) attachment\n" 10
(i.e. "1 (10) attachment" followed by a  character).
The command
ngettext -e -d mail "\tsubject\n" "\tsubjects\n" 0
will write the same as
printf "\tsubjects\n"
(i.e. a  character, followed by "subjects" followed by a  character). Note that
"\tsubject\n" is not in the messages object.
The command
printf "%s\n" "$(ngettext -E -d mail "subject" "subjects" 0)"
will write the same as
printf "subjects\n"
(i.e. "subjects" followed by a  character). Note that "subject" is not in the messages
object.
The command
gettext -s -d mail "recipient"
will write "1 recipient" followed by a  character.
The command
gettext -s -n -d mail "recipient"
will write "1 recipient" without a  character.
RATIONALE
Historical implementations did not support the '\a' C-language escape sequence. This standard requires it to be
supported for consistency with other utilities that support the table in XBD 5. File
Format Notation.
Unlike other standard utilities, the behavior of gettext and ngettext is not undefined when NLSPATH
overrides the system default path; see XBD 8.2 Internationalization
Variables. This is so that applications can use these utilities to obtain message strings from messages objects in other
locations. However, it also means that they need to be implemented in such a way that they do not do anything that would result in
undefined behavior when they need to write a diagnostic message. In particular, they should not use a string obtained from a
message catalog or a messages object as a format string (or should only do so after checking that the string contains the correct
conversions).
FUTURE DIRECTIONS
None.
SEE ALSO
msgfmt, printf
XBD 7. Locale, 8.
Environment Variables, 12.2 Utility Syntax Guidelines
XSH gettext(), iconv(), setlocale()
CHANGE HISTORY
First released in Issue 8.
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/bg.html =====
bg
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
bg — run jobs in the background
SYNOPSIS
[UP]  bg [job_id...]
DESCRIPTION
If job control is enabled (see the description of set -m), the shell
is interactive, and the current shell execution environment (see 2.13 Shell
Execution Environment) is not a subshell environment, the bg utility shall resume suspended jobs from the current
shell execution environment by running them as background jobs, as described in 2.11 Job Control; it may also do so if the shell is non-interactive or the
current shell execution environment is a subshell environment. If the job specified by job_id is already a running
background job, the bg utility shall have no effect and shall exit successfully.
OPTIONS
None.
OPERANDS
The following operand shall be supported:
job_id
Specify the job to be resumed as a background job. If no job_id operand is given, the most recently suspended job shall
be used. The format of job_id is described in XBD 3.182 Job ID
.
STDIN
Not used.
INPUT FILES
None.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of bg:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
Default.
STDOUT
The output of bg shall consist of a line in the format:
"[%d] %s\n", ,
where the fields are as follows:
A number that can be used to identify the job to the wait, fg, and kill utilities. Using these utilities, the
job can be identified by prefixing the job number with '%'.
The associated command that was given to the shell.
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
If job control is disabled, the bg utility shall exit with an error and no job shall be placed in the background.
The following sections are informative.
APPLICATION USAGE
This utility is required to be intrinsic. See 1.7 Intrinsic Utilities
for details.
A job is generally suspended by typing the SUSP character (-Z on most systems); see XBD 11. General Terminal Interface. At that point, bg can put the job into the
background. This is most effective when the job is expecting no terminal input and its output has been redirected to non-terminal
files. A background job can be forced to stop when it has terminal output by issuing the command:
stty tostop
A background job can be stopped with the command:
kill -s stop job ID
The bg utility does not work as expected when it is operating in its own utility execution environment because that
environment has no suspended jobs. In the following examples:
... | xargs bg
(bg)
each bg operates in a different environment and does not share its parent shell's understanding of jobs. For this reason,
bg is generally implemented as a shell regular built-in.
EXAMPLES
None.
RATIONALE
The extensions to the shell specified in this volume of POSIX.1-2024 have mostly been based on features provided by the
KornShell. The job control features provided by bg, fg, and jobs are also based on the KornShell. The standard developers examined the characteristics of
the C shell versions of these utilities and found that differences exist. Despite widespread use of the C shell, the KornShell
versions were selected for this volume of POSIX.1-2024 to maintain a degree of uniformity with the rest of the KornShell features
selected (such as the very popular command line editing features).
The bg utility is expected to wrap its output if the output exceeds the number of display columns.
The bg and fg utilities are not symmetric as regards the list of process IDs
known in the current shell execution environment. Whereas fg removes a process ID from
this list, bg has no need to add one to this list when it resumes execution of a suspended job in the background, because
this has already been done by the shell when the suspended background job was created (see 2.11 Job Control).
FUTURE DIRECTIONS
None.
SEE ALSO
2.9.3.1 Asynchronous AND-OR Lists, fg, kill, jobs, wait
XBD 3.182 Job ID, 8.
Environment Variables, 11. General Terminal Interface
CHANGE HISTORY
First released in Issue 4.
Issue 6
This utility is marked as part of the User Portability Utilities option.
The JC margin marker on the SYNOPSIS is removed since support for Job Control is mandatory in this version. This is a FIPS
requirement.
Issue 7
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
Issue 8
Austin Group Defect 854 is applied, adding a note to the APPLICATION USAGE section that this utility is required to be
intrinsic.
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
Austin Group Defect 1254 is applied, updating the DESCRIPTION to account for the addition of 2.11 Job Control and adding a paragraph to RATIONALE.
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/xgettext.html =====
xgettext
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
xgettext — extract gettext call strings from C-language source files (DEVELOPMENT)
SYNOPSIS
[CD]  xgettext [-j] [-n] [-d default-domain]
[-K keyword-spec]...
[-p pathname] file...
xgettext -a [-n] [-d default-domain] [-p pathname]
[-x exclude-file] file...
DESCRIPTION
The xgettext utility shall automate the creation of portable messages object source files (dot-po files). A dot-po file
shall contain copies of string literals that are found in C-language source code in files specified by file operands. The
dot-po file can be used as input to the msgfmt utility, to produce a messages object
file that can be used by applications.
The xgettext utility shall write msgid argument strings that are passed as string literals in gettext(), gettext_l(), ngettext(), and ngettext_l() calls in
C-language source code to the default output file; this file shall be named messages.po unless it is changed by the
-d option. The xgettext utility shall also write msgid argument strings that are passed as string literals in
dcgettext(), dcgettext_l(),
dcngettext(), dcngettext_l(),
dgettext(), dgettext_l(),
dngettext(), and dngettext_l()
calls either to the default output file or to the output file domainname.po where domainname is the first
parameter to the call; it is implementation-defined which of those output files is used. A msgid directive shall precede
each msgid argument string. For the functions that have a msgid_plural argument, a msgid_plural directive
followed by that argument string shall also be written directly after the corresponding msgid directive. A msgstr
directive or msgstr[index] directives with an empty string shall be written after the corresponding
msgid or msgid_plural directive, respectively. The function names that xgettext searches for can be changed
using the -K option.
The first directive in each created dot-po file shall be a domain directive giving the associated domain name, except
that this directive is optional in the default output file.
If the -p pathname option is specified, xgettext shall create the dot-po files in the pathname
directory. Otherwise, the dot-po files shall be created in the current working directory.
The msgid values shall be in the same order that the strings are extracted from each file and subsections with
duplicate msgid values shall be written to the dot-po files as comment lines.
OPTIONS
The xgettext utility shall conform to XBD 12.2 Utility Syntax
Guidelines.
The following options shall be supported:
-a
Extract all strings, not just those found in calls to gettext family functions. Only one dot-po file shall be
created.
-d default-domain
Name the default output file default-domain.po instead of messages.po.
-j
Join messages from C-language source files with existing dot-po files. For each dot-po file that xgettext writes
messages to, if the file does not exist, it shall be created. New messages shall be appended but any subsections with duplicate
msgid values except the first (including msgid values found in an existing dot-po file) shall either be commented out
or omitted in the resulting dot-po file; if omitted, a warning message may be written to standard error. Domain directives in the
existing dot-po files shall be ignored; the assumption is that all previous msgid values belong to the same domain. The
behavior is unspecified if an existing dot-po file was not created by xgettext or has been modified by another
application.
-K keyword-spec
Specify an additional keyword to be looked for:
If keyword-spec is an empty string, this shall disable the use of default keywords for the gettext family of
functions.
If keyword-spec is a C identifier, xgettext shall look for strings in the first argument of each call to the
function or macro keyword-spec.
If keyword-spec is of the form id:argnum then xgettext shall treat the argnum-th argument of
a call to the function or macro id as the msgid argument, where argnum 1 is the first argument.
If keyword-spec is of the form id:argnum1,argnum2 then xgettext shall treat strings in the
argnum1-th argument and in the argnum2-th argument of a call to the function or macro id as the msgid
and msgid_plural arguments, respectively.
For all mentioned forms, the application shall ensure that if argnum2 is given, it is not equal to argnum1. All
numeric values shall be converted as specified in item 6 in XBD 12.1 Utility
Argument Syntax.
-n
Add comment lines to the output file indicating pathnames and line numbers in the source files where each extracted string is
encountered. These lines shall appear before each msgid directive. Such comments should have the format:
#: pathname1:linenumber1 [pathname2:linenumber2...]
-p pathname
Create output files in the directory specified by pathname instead of in the current working directory.
-x exclude-file
Specify a file containing strings that shall not be extracted from the input files. The format of exclude-file is identical
to that of a dot-po file. However, only statements containing msgid directives in exclude-file shall be used. All
other statements shall be ignored.
OPERANDS
The following operand shall be supported:
file
A pathname of an input file containing C-language source code. If '-' is specified for an instance of file, the
standard input shall be used.
STDIN
The standard input shall not be used unless a file operand is specified as '-'.
INPUT FILES
The input files specified as file operands shall be C-language source files. The input file specified as the
option-argument for the -x option shall be a dot-po file in the format specified as input for the msgfmt utility.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of xgettext:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LANGUAGE
Determine the location of messages objects [XSI]   if NLSPATH is not set or the evaluation of NLSPATH
did not lead to a suitable messages object being found.
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments and input files).
LC_MESSAGES
Determine the locale name used to locate messages objects, and the locale that should be used to affect the format and contents of
diagnostic messages written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
Default.
STDOUT
The standard output shall not be used.
STDERR
The standard error shall be used for diagnostic messages and may be used for warning messages.
OUTPUT FILES
The output files shall be dot-po files in the format specified as input for the msgfmt utility. It is unspecified whether each output file includes a header (msgid
"") before the content derived from the input C-language source files.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
Implementations differ as to whether they write all output to the default output file or split the output into separate
per-domain files. Portable applications can either ensure that each C-language source file contains calls to gettext family
functions for only a single domain, or force all output to be to the default output file by using the -K option to override
the default keywords.
Some implementations of xgettext are not able to extract cast strings (unless -a is used), for example casts of
literal strings to (const char *). Use of a cast is unnecessary anyway, since the prototypes in  already specify this type.
The xgettext utility is not required to handle C preprocessor directives. Therefore if, for example, calls to
gettext family functions are wrapped by macros, they might not be found unless the -K option is used to tell
xgettext to look for the macro calls.
EXAMPLES
Example 1
The following example shows how -K can be used to force all output to be to the default output file:
xgettext -K "" -K gettext:1 -K dgettext:2 -K dcgettext:2 \
-K ngettext:1,2 -K dngettext:2,3 -K dcngettext:2,3 source.c
By overriding the default keywords using the -K option as above, the xgettext utility is directed to ignore the
domainname arguments to the dgettext(), dcgettext(), dngettext(), and dcngettext() functions. Thus, the utility treats the functions as their respective
equivalent without the d prefix, ignoring the domainname argument and writing generated output to the default output
file, messages.po. Additional -K options would be needed for the variants of the functions with an _l suffix
if they are used.
Example 2
If the source uses a macro definition such as:
#define i18n gettext
the use of:
xgettext -K i18n:1 source.c
will pick up msgid values from a line such as:
fprintf(stdout, i18n("The value is %s"), value1);
RATIONALE
The -K option is based on the -k option of GNU xgettext; the only difference is that GNU's -k takes
an optional option-argument whereas -K in this standard has a mandatory option-argument in order to comply with the syntax
guidelines.
The standard developers considered including functionality equivalent to the -c, -m, and -M options in
existing implementations. However, those letters could not be used as the syntax differed between implementations. The usual
solution of adding an uppercase equivalent of lowercase options with the standard syntax instead was not possible, for obvious
reasons for -m and -M, and as -C was already in use for another purpose in one implementation.
The -s option is not included as it has been deprecated in at least one implementation because it has been found to
deprive translators of valuable context.
FUTURE DIRECTIONS
If this utility is directed to create a new directory entry that contains any bytes that have the encoded value of a
character, implementations are encouraged to treat this as an error. A future version of this standard may require
implementations to treat this as an error.
A future version of this standard may change the description of the -n option to mandate the given comment format (by
using "shall" instead of "should").
SEE ALSO
gettext, msgfmt
XBD 8. Environment Variables, 12.2 Utility Syntax Guidelines
XSH gettext()
CHANGE HISTORY
First released in Issue 8.
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/logger.html =====
logger
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
logger — log messages
SYNOPSIS
logger [-i] [-f file] [-p priority] [-t
tag] [string...]
DESCRIPTION
The logger utility shall send messages to an implementation-defined logging facility, which may log them in an
implementation-defined system log, write them to the system console, forward them to a list of users, or forward them to the
logging facility on another host over the network. Each logged message shall include a message header and a message body. The
message header shall contain at least a timestamp and a tag string.
If one or more string operands are specified, they shall be logged; otherwise, the message bodies to be logged shall be
read from standard input if no -f option is specified, or from the specified file if the -f option is present.
It is implementation-defined whether messages written in locales other than the POSIX locale are effective.
OPTIONS
The logger utility shall conform to XBD 12.2 Utility Syntax
Guidelines.
The following options shall be supported:
-f file
Read the log message bodies from file instead of standard input.
-i
Log the process ID of the logger process with each message.
-p priority
Log the message with priority set to priority. The priority is specified as a facility.level pair. The
following values for facility shall be supported:
user
Messages generated by arbitrary processes.
local0
Reserved for local use.
local1
Reserved for local use.
local2
Reserved for local use.
local3
Reserved for local use.
local4
Reserved for local use.
local5
Reserved for local use.
local6
Reserved for local use.
local7
Reserved for local use.
The following values for level shall be supported:
emerg
A panic condition.
alert
A condition that should be corrected immediately, such as a corrupted system database.
crit
Critical conditions, such as hard device errors.
err
Errors.
warning
Warning messages.
notice
Conditions that are not error conditions, but that may require special handling.
info
Informational messages.
debug
Messages that contain information normally of use only when debugging a program.
If the -p option is not specified, the priority shall be user.notice.
-t tag
Use the string tag as the tag string in the message header. The default tag is unspecified.
OPERANDS
The following operand shall be supported:
string
One of the string arguments whose contents are concatenated together, in the order specified, separated by single
characters.
STDIN
The standard input shall be used if no string operands are specified and either the -f option is not specified or
the -f option is specified with a file option-argument of '-' and the implementation treats the '-'
as meaning standard input. Otherwise, the standard input shall not be used. See the INPUT FILES section.
Each non-empty line shall be logged as a separate message. It is unspecified whether an empty line is also logged as a separate
message.
INPUT FILES
The input files shall be text files.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of logger:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error. (This
means diagnostics from logger to the user or application, not diagnostic messages that the user is sending to the system
administrator.)
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
Default.
STDOUT
Not used.
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
Unspecified.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
This utility allows logging of information for later use by a system administrator or programmer in determining why
non-interactive utilities have failed. The locations of the saved messages, their format, and retention period are all unspecified.
There is no method for a conforming application to read messages, once written.
EXAMPLES
A batch application, running non-interactively, tries to read a configuration file and fails; it may attempt to notify the
system administrator with:
logger myname: unable to read file foo. [timestamp]
RATIONALE
The standard developers believed strongly that some method of alerting administrators to errors was necessary. The obvious
example is a batch utility, running non-interactively, that is unable to read its configuration files or that is unable to create
or write its results file. However, the standard developers did not wish to define the format or delivery mechanisms as they have
historically been (and will probably continue to be) very system-specific, as well as involving functionality clearly outside the
scope of this volume of POSIX.1-2024.
The text with LC_MESSAGES about diagnostic messages means diagnostics from logger to the user or application, not
diagnostic messages that the user is sending to the system administrator.
Multiple string arguments are allowed, similar to echo, for ease-of-use.
Like the utilities mailx and lp,
logger is admittedly difficult to test. This was not deemed sufficient justification to exclude these utilities from this
volume of POSIX.1-2024. It is also arguable that they are, in fact, testable, but that the tests themselves are not portable.
FUTURE DIRECTIONS
None.
SEE ALSO
lp, mailx, write
XBD 8. Environment Variables
CHANGE HISTORY
First released in Issue 4.
Issue 7
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
Issue 8
Austin Group Defect 917 is applied, adding the -f, -i, -p, and -t options, and specifying the
behavior when logger is executed with no operands.
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/hash.html =====
hash
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
hash — remember or report utility locations
SYNOPSIS
hash [utility...]
hash -r
DESCRIPTION
The hash utility shall affect the way the current shell environment remembers the locations of utilities found as
described in 2.9.1.4 Command Search and Execution. Depending on
the arguments specified, it shall add utility locations to its list of remembered locations or it shall purge the contents of the
list. When no arguments are specified, it shall report on the contents of the list.
Utilities provided as built-ins to the shell and functions shall not be reported by hash.
OPTIONS
The hash utility shall conform to XBD 12.2 Utility Syntax
Guidelines.
The following option shall be supported:
-r
Forget all previously remembered utility locations.
OPERANDS
The following operand shall be supported:
utility
The name of a utility to be searched for and added to the list of remembered locations. If the search does not find
utility, it is unspecified whether or not this is treated as an error. If utility contains one or more
characters, the results are unspecified.
STDIN
Not used.
INPUT FILES
None.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of hash:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
PATH
Determine the location of utility, as described in XBD 8. Environment
Variables.
ASYNCHRONOUS EVENTS
Default.
STDOUT
The standard output of hash shall be used when no arguments are specified. Its format is unspecified, but includes the
pathname of each utility in the list of remembered locations for the current shell environment. This list shall consist of those
utilities named in previous hash invocations that have been invoked, and may contain those invoked and found through the
normal command search process. This list shall be cleared when the contents of the PATH environment variable are
changed.
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
This utility is required to be intrinsic. See 1.7 Intrinsic Utilities
for details.
Since hash affects the current shell execution environment, it is always provided as a shell regular built-in. If it is
called in a separate utility execution environment, such as one of the following:
nohup hash -r
find . -type f -exec hash {} +
it does not affect the command search process of the caller's environment.
The hash utility may be implemented as an alias—for example, alias
-t -, in which case utilities found through normal command search are not listed by the hash command.
The effects of hash -r can also be achieved portably by resetting the value of PATH ; in the simplest form,
this can be:
PATH="$PATH"
The use of hash with utility names is unnecessary for most applications, but may provide a performance improvement
on a few implementations; normally, the hashing process is included by default.
EXAMPLES
None.
RATIONALE
None.
FUTURE DIRECTIONS
If this utility is directed to display a pathname that contains any bytes that have the encoded value of a
character when  is a terminator or separator in the output format being used, implementations are encouraged to
treat this as an error. A future version of this standard may require implementations to treat this as an error.
SEE ALSO
2.9.1.4 Command Search and Execution
XBD 8. Environment Variables, 12.2 Utility Syntax Guidelines
CHANGE HISTORY
First released in Issue 2.
Issue 7
The hash utility is moved from the XSI option to the Base.
POSIX.1-2008, Technical Corrigendum 1, XCU/TC1-2008/0093 [241] is applied.
Issue 8
Austin Group Defect 248 is applied, changing a command line in the APPLICATION USAGE section.
Austin Group Defect 251 is applied, encouraging implementations to report an error if a utility is directed to display a
pathname that contains any bytes that have the encoded value of a  character when  is a terminator or
separator in the output format being used.
Austin Group Defect 854 is applied, adding a note to the APPLICATION USAGE section that this utility is required to be
intrinsic.
Austin Group Defect 1063 is applied, clarifying that functions are not reported by hash, and that the list of remembered
locations is cleared when the contents of PATH are changed.
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
Austin Group Defect 1460 is applied, making it explicitly unspecified whether or not hash reports an error if it cannot
find utility.
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/contents.html =====
Shell & Utilities: Table of contents
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
Shell & Utilities: Table of Contents
1. Introduction
1.1 Relationship to Other Documents
1.1.1 System Interfaces
1.1.1.1 Process Attributes
1.1.1.2 Concurrent Execution of Processes
1.1.1.3 File Access Permissions
1.1.1.4 File Read, Write, and Creation
1.1.1.5 File Removal
1.1.1.6 File Time Values
1.1.1.7 File Contents
1.1.1.8 Pathname Resolution
1.1.1.9 Changing the Current Working Directory
1.1.1.10 Establish the Locale
1.1.1.11 Actions Equivalent to Functions
1.1.2 Concepts Derived from the ISO C Standard
1.1.2.1 Arithmetic Precision and Operations
1.1.2.2 Mathematical Functions
1.2 Utility Limits
1.3 Grammar Conventions
1.4 Utility Description Defaults
1.5 Considerations for Utilities in Support of Files of Arbitrary Size
1.6 Built-In Utilities
1.7 Intrinsic Utilities
2. Shell Command Language
2.1 Shell Introduction
2.2 Quoting
2.2.1 Escape Character (Backslash)
2.2.2 Single-Quotes
2.2.3 Double-Quotes
2.2.4 Dollar-Single-Quotes
2.3 Token Recognition
2.3.1 Alias Substitution
2.4 Reserved Words
2.5 Parameters and Variables
2.5.1 Positional Parameters
2.5.2 Special Parameters
2.5.3 Shell Variables
2.6 Word Expansions
2.6.1 Tilde Expansion
2.6.2 Parameter Expansion
Examples
2.6.3 Command Substitution
2.6.4 Arithmetic Expansion
Examples
2.6.5 Field Splitting
2.6.6 Pathname Expansion
2.6.7 Quote Removal
2.7 Redirection
2.7.1 Redirecting Input
2.7.2 Redirecting Output
2.7.3 Appending Redirected Output
2.7.4 Here-Document
Examples
2.7.5 Duplicating an Input File Descriptor
2.7.6 Duplicating an Output File Descriptor
2.7.7 Open File Descriptors for Reading and Writing
2.8 Exit Status and Errors
2.8.1 Consequences of Shell Errors
2.8.2 Exit Status for Commands
2.9 Shell Commands
2.9.1 Simple Commands
2.9.1.1 Order of Processing
2.9.1.2 Variable Assignments
2.9.1.3 Commands with no Command Name
2.9.1.4 Command Search and Execution
2.9.1.5 Standard File Descriptors
2.9.1.6 Non-built-in Utility Execution
2.9.2 Pipelines
Exit Status
2.9.3 Lists
Examples
2.9.3.1 Asynchronous AND-OR Lists
Exit Status
2.9.3.2 Sequential AND-OR Lists
Exit Status
2.9.3.3 AND Lists
Exit Status
2.9.3.4 OR Lists
Exit Status
2.9.4 Compound Commands
2.9.4.1 Grouping Commands
Exit Status
2.9.4.2 The for Loop
Exit Status
2.9.4.3 Case Conditional Construct
Exit Status
2.9.4.4 The if Conditional Construct
Exit Status
2.9.4.5 The while Loop
Exit Status
2.9.4.6 The until Loop
Exit Status
2.9.5 Function Definition Command
Exit Status
2.10 Shell Grammar
2.10.1 Shell Grammar Lexical Conventions
2.10.2 Shell Grammar Rules
2.11 Job Control
2.12 Signals and Error Handling
2.13 Shell Execution Environment
2.14 Pattern Matching Notation
2.14.1 Patterns Matching a Single Character
2.14.2 Patterns Matching Multiple Characters
2.14.3 Patterns Used for Filename Expansion
2.15 Special Built-In Utilities
break
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
colon
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
continue
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
dot
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
eval
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
exec
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
exit
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
export
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
readonly
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
return
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
set
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
shift
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
times
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
trap
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
unset
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
3. Utilities
admin
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 8
alias
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
ar
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
asa
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
at
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
awk
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Overall Program Structure
Expressions in awk
Variables and Special Variables
Regular Expressions
Patterns
Special Patterns
Expression Patterns
Pattern Ranges
Actions
Output Statements
Functions
Arithmetic Functions
String Functions
Input/Output and General Functions
User-Defined Functions
Grammar
Lexical Conventions
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
basename
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
batch
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
bc
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Grammar
Lexical Conventions in bc
Operations in bc
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
bg
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
c17
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Standard Libraries
External Symbols
Header Search
Programming Environments
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
cal
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
cat
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
cd
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
cflow
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
chgrp
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
chmod
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Grammar for chmod
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
chown
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
cksum
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
cmp
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
comm
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
command
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
compress
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
cp
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
crontab
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
csplit
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
ctags
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
cut
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
cxref
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
date
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 8
dd
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
delta
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
System Date and Time
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
df
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
diff
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
Diff Directory Comparison Format
Diff Binary Output Format
Diff Default Output Format
Diff -e Output Format
Diff -f Output Format
Diff -c or -C Output Format
Diff -u or -U Output Format
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
dirname
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
du
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
echo
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
ed
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Regular Expressions in ed
Addresses in ed
Commands in ed
Append Command
Change Command
Delete Command
Edit Command
Edit Without Checking Command
Filename Command
Global Command
Interactive Global Command
Help Command
Help-Mode Command
Insert Command
Join Command
Mark Command
List Command
Move Command
Number Command
Print Command
Prompt Command
Quit Command
Quit Without Checking Command
Read Command
Substitute Command
Copy Command
Undo Command
Global Non-Matched Command
Interactive Global Not-Matched Command
Write Command
Line Number Command
Shell Escape Command
Null Command
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
env
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
ex
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Initialization in ex and vi
Addressing in ex
Command Line Parsing in ex
Input Editing in ex
Scroll
-V
-W
Command Descriptions in ex
Abbreviate
Append
Arguments
Change
Change Directory
Copy
Delete
Edit
File
Global
Insert
Join
List
Map
Mark
Move
Number
Open
Preserve
Print
Put
Quit
Read
Recover
Rewind
Set
Shell
Source
Substitute
Suspend
Tag
Unabbreviate
Undo
Unmap
Version
Visual
Write
Write and Exit
Yank
Adjust Window
Escape
Shift Left
Shift Right
-D
Write Line Number
Execute
Regular Expressions in ex
Replacement Strings in ex
Edit Options in ex
autoindent, ai
autoprint, ap
autowrite, aw
beautify, bf
directory, dir
edcompatible, ed
errorbells, eb
exrc
ignorecase, ic
list
magic
mesg
number, nu
paragraphs, para
prompt
readonly
redraw
remap
report
scroll, scr
sections
shell, sh
shiftwidth, sw
showmatch, sm
showmode
slowopen
tabstop, ts
taglength, tl
tags
term
terse
warn
window
wrapmargin, wm
wrapscan, ws
writeany, wa
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
Options
Standard Input
Input Files
Asynchronous Events
Standard Error
Initialization in ex and vi
Addressing
Command Line Parsing in ex
Input Editing in ex
eof
Command Descriptions in ex
Abbreviate
Append
Change
Change Directory
Copy
Delete
Edit
File
Global
Insert
Join
List
Map
Mark
Open
Preserve
Print
Put
Read
Recover
Rewind
Substitute
Set
Tag
Undo
Version
Write
Adjust Window
Escape
Shift Left and Shift Right
-D
Write Line Number
Execute
Regular Expressions in ex
Edit Options in ex
autoindent, ai
autoprint, ap
autowrite, aw
ignorecase, ic
paragraphs, para
readonly
report
showmatch, sm
showmode
slowopen
tags
term
terse
window
wrapmargin, wm
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
expand
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
expr
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Matching Expression
Identification as Integer or String
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
false
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 8
fc
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
fg
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 8
file
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
find
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
fold
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
fuser
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
gencat
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
get
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
System Date and Time
Identification Keywords
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
getconf
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
getopts
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
gettext
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
grep
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
hash
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
head
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
iconv
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
id
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
ipcrm
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
ipcs
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
jobs
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
join
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
kill
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
lex
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Definitions in lex
Rules in lex
User Subroutines in lex
Regular Expressions in lex
Actions in lex
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
link
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 8
ln
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
locale
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
localedef
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
logger
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
logname
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 8
lp
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
ls
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
m4
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
mailx
NAME
SYNOPSIS
Send Mode
Receive Mode
DESCRIPTION
Send Mode
Receive Mode
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Start-Up in mailx
Internal Variables in mailx
Commands in mailx
Declare Aliases
Declare Alternatives
Change Current Directory
Copy Messages
Delete Messages
Discard Header Fields
Delete Messages and Display
Echo a String
Edit Messages
Exit
Change Folder
Display List of Folders
Follow Up Specified Messages
Display Header Summary for Specified Messages
Display Header Summaries
Help
Hold Messages
Execute Commands Conditionally
List Available Commands
Mail a Message
Direct Messages to mbox
Process Next Specified Message
Pipe Message
Display Message with Header
Display Message
Quit
Reply to a Message or a Message List
Retain Header Fields
Save Messages
Set Variables
Invoke a Shell
Display Message Size
Read mailx Commands From a File
Display Beginning of Messages
Touch Messages
Delete Aliases
Undelete Messages
Unset Variables
Edit Message with Full-Screen Editor
Write Messages to a File
Scroll Header Display
Invoke Shell Command
Null Command
Display Current Message Number
Command Escapes in mailx
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
make
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Makefile Syntax
Include Lines
Makefile Execution
Target Rules
Macros
Inference Rules
Libraries
Internal Macros
Default Rules
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
man
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 7
Issue 8
mesg
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
mkdir
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 7
Issue 8
mkfifo
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 8
more
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Help
Scroll Forward One Screenful
Scroll Backward One Screenful
Scroll Forward One Line
Scroll Backward One Line
Scroll Forward One Half Screenful
Skip Forward One Line
Scroll Backward One Half Screenful
Go to Beginning of File
Go to End-of-File
Refresh the Screen
Discard and Refresh
Mark Position
Return to Mark
Return to Previous Position
Search Forward for Pattern
Search Backward for Pattern
Repeat Search
Repeat Search in Reverse
Examine New File
Examine Next File
Examine Previous File
Go to Tag
Invoke Editor
Display Position
Quit
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
msgfmt
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
mv
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
newgrp
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
ngettext
NAME
SYNOPSIS
DESCRIPTION
nice
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
nl
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
nm
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
nohup
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
od
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
paste
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
patch
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Patch File Format
Filename Determination
Patch Application
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
pathchk
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
pax
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
List Mode Format Specifications
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
pax Interchange Format
pax Header Block
pax Extended Header
pax Extended Header Keyword Precedence
pax Extended Header File Times
ustar Interchange Format
cpio Interchange Format
cpio Header
cpio Filename
cpio File Data
cpio Special Entries
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
pax Interchange Format
pax Archive Character Set Encoding/Decoding
ustar Interchange Format
cpio Interchange Format
cpio Header
cpio Filename
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
pr
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
printf
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
prs
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
Data Keywords
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
ps
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
pwd
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
read
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
readlink
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
realpath
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
renice
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
rm
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
rmdel
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 8
rmdir
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 8
sact
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 8
sccs
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
sed
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Addresses in sed
Regular Expressions in sed
Editing Commands in sed
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
sh
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Command History List
Command Line Editing
Command Line Editing (vi-mode)
vi Line Editing Insert Mode
vi Line Editing Command Mode
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
sleep
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 8
sort
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
split
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
strings
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
strip
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
stty
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
Control Modes
Input Modes
Output Modes
Local Modes
Special Control Character Assignments
Combination Modes
Terminal Window Size
Informational Queries
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
tabs
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
tail
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
talk
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 8
tee
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
test
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
time
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
timeout
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
touch
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
tput
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
tr
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
true
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 8
tsort
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
tty
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 8
type
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 8
ulimit
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
umask
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
unalias
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
uname
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 8
uncompress
NAME
SYNOPSIS
DESCRIPTION
unexpand
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
unget
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
uniq
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
unlink
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 8
uucp
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
uudecode
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
uuencode
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
uuencode Base64 Algorithm
uuencode Historical Algorithm
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
uustat
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
uux
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
val
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
vi
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
Initialization in ex and vi
Command Descriptions in vi
Page Backwards
Scroll Forward
Scroll Forward by Line
Page Forward
Display Information
Move Cursor Backwards
Move Down
Clear and Redisplay
Move Up
Redraw Screen
Scroll Backward
Scroll Backward by Line
Edit the Alternate File
Terminate Command or Input Mode
Search for tagstring
Move Cursor Forward
Replace Text with Results from Shell Command
Move Cursor to End-of-Line
Move to Matching Character
Repeat Substitution
Return to Previous Context at Beginning of Line
Return to Previous Context
Return to Previous Section
Move to Next Section
Move to First Non- Position on Current Line
Current and Line Above
Move Back to Beginning of Sentence
Move Forward to Beginning of Sentence
Move Back to Preceding Paragraph
Move Forward to Next Paragraph
Move to Specific Column Position
Reverse Find Character
Repeat
Find Regular Expression
Move to First Character in Line
Execute an ex Command
Repeat Find
Shift Left
Shift Right
Scan Backwards for Regular Expression
Execute
Reverse Case
Append
Append at End-of-Line
Move Backward to Preceding Word
Move Backward to Preceding Bigword
Change
Change to End-of-Line
Delete
Delete to End-of-Line
Move to End-of-Word
Move to End-of-Bigword
Find Character in Current Line (Forward)
Find Character in Current Line (Reverse)
Move to Line
Move to Top of Screen
Insert Before Cursor
Insert at Beginning of Line
Join
Move to Bottom of Screen
Mark Position
Move to Middle of Screen
Repeat Regular Expression Find (Forward)
Repeat Regular Expression Find (Reverse)
Insert Empty Line Below
Insert Empty Line Above
Put from Buffer Following
Put from Buffer Before
Enter ex Mode
Replace Character
Replace Characters
Substitute Character
Substitute Lines
Move Cursor to Before Character (Forward)
Move Cursor to After Character (Reverse)
Undo
Undo Current Line
Move to Beginning of Word
Move to Beginning of Bigword
Delete Character at Cursor
Delete Character Before Cursor
Yank
Yank Current Line
Redraw Window
Exit
Input Mode Commands in vi
NUL
-D
-H
-T
-U
-V
-W
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
Initialization in ex and vi
Command Descriptions in vi
Page Backwards
Scroll Forward
Scroll Forward by Line
Clear and Redisplay
Redraw Screen
Search for tagstring
Replace Text with Results from Shell Command
Move to Matching Character
Repeat Substitution
Return to Previous (Context or Section)
Repeat
Find Regular Expression
Execute an ex Command
Shift Left (Right)
Execute
Reverse Case
Append
Move Backward to Preceding Word
Change to End-of-Line
Delete
Delete to End-of-Line
Join
Mark Position
Repeat Regular Expression Find (Forward and Reverse)
Insert Empty Line (Below and Above)
Put from Buffer (Following and Before)
Replace Character
Replace Characters
Undo
Yank
Yank Current Line
Redraw Window
Input Mode Commands in vi
NUL
-D
-T
-V
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
wait
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 8
wc
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 7
Issue 8
what
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 8
who
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 6
Issue 7
Issue 8
write
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
xargs
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
xgettext
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
EXTENDED DESCRIPTION
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
yacc
NAME
SYNOPSIS
DESCRIPTION
OPTIONS
OPERANDS
STDIN
INPUT FILES
ENVIRONMENT VARIABLES
ASYNCHRONOUS EVENTS
STDOUT
STDERR
OUTPUT FILES
Code File
Header File
Description File
EXTENDED DESCRIPTION
Input Language
Lexical Structure of the Grammar
Declarations Section
Grammar Rules in yacc
Programs Section
Input Grammar
Conflicts
Error Handling
Interface to the Lexical Analyzer
Completing the Program
Yacc Library
Debugging the Parser
Algorithms
Limits
EXIT STATUS
CONSEQUENCES OF ERRORS
APPLICATION USAGE
EXAMPLES
RATIONALE
FUTURE DIRECTIONS
SEE ALSO
CHANGE HISTORY
Issue 5
Issue 6
Issue 7
Issue 8
zcat
NAME
SYNOPSIS
DESCRIPTION
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index |
XBD |
XSH |
XCU |
XRAT ]
===== susv5-html/utilities/unalias.html =====
unalias
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
unalias — remove alias definitions
SYNOPSIS
unalias alias-name...
unalias -a
DESCRIPTION
The unalias utility shall remove the definition for each alias name specified. See 2.3.1 Alias Substitution. The aliases shall be removed from the current
shell execution environment; see 2.13 Shell Execution Environment.
OPTIONS
The unalias utility shall conform to XBD 12.2 Utility Syntax
Guidelines.
The following option shall be supported:
-a
Remove all alias definitions from the current shell execution environment.
OPERANDS
The following operand shall be supported:
alias-name
The name of an alias to be removed.
STDIN
Not used.
INPUT FILES
None.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of unalias:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
Default.
STDOUT
Not used.
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
One of the alias-name operands specified did not represent a valid alias definition, or an error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
This utility is required to be intrinsic. See 1.7 Intrinsic Utilities
for details.
Since unalias affects the current shell execution environment, it is generally provided as a shell regular built-in.
EXAMPLES
None.
RATIONALE
The unalias description is based on that from historical KornShell implementations. Known differences exist between that
and the C shell. The KornShell version was adopted to be consistent with all the other KornShell features in this volume of
POSIX.1-2024, such as command line editing.
The -a option is the equivalent of the unalias * form of the C shell and is provided to address security concerns
about unknown aliases entering the environment of a user (or application) through the allowable implementation-defined predefined
alias route or as a result of an ENV file. (Although unalias could be used to simplify the "secure" shell script
shown in the command rationale, it does not obviate the need to quote all command
names. An initial call to unalias -a would have to be quoted in case there was an alias for unalias.)
FUTURE DIRECTIONS
None.
SEE ALSO
2. Shell Command Language, alias
XBD 8. Environment Variables, 12.2 Utility Syntax Guidelines
CHANGE HISTORY
First released in Issue 4.
Issue 6
This utility is marked as part of the User Portability Utilities option.
Issue 7
The unalias utility is moved from the User Portability Utilities option to the Base. User Portability Utilities is now an
option for interactive utilities.
Issue 8
Austin Group Defect 854 is applied, adding a note to the APPLICATION USAGE section that this utility is required to be
intrinsic.
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/man.html =====
man
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
man — display system documentation
SYNOPSIS
[UP]  man [-k] name...
DESCRIPTION
The man utility shall write information about each of the name operands. If name is the name of a standard
utility, man at a minimum shall write a message describing the syntax used by the standard utility, its options, operands,
environment variables affecting its execution, and its list of exit status codes. If more information is available, the man
utility shall provide it in an implementation-defined manner.
An implementation may provide information for values of name other than the standard utilities. Standard utilities that
are listed as optional and that are not supported by the implementation either shall cause a brief message indicating that fact to
be displayed or shall cause a full display of information as described previously.
OPTIONS
The man utility shall conform to XBD 12.2 Utility Syntax
Guidelines.
The following option shall be supported:
-k
Interpret name operands as keywords to be used in searching a utilities summary database that contains a brief purpose
entry for each standard utility and write lines from the summary database that match any of the keywords. The keyword search shall
produce results that are the equivalent of the output of the following command:
grep -Ei '
name
name
...
' summary-database
This assumes that the summary-database is a text file with a single entry per line; this organization is not required and
the example using grep -Ei is merely illustrative of the type of search
intended. The purpose entry to be included in the database shall consist of a terse description of the purpose of the utility.
OPERANDS
The following operand shall be supported:
name
A keyword or the name of a standard utility. When -k is not specified and name does not represent one of the
standard utilities, the results are unspecified.
STDIN
Not used.
INPUT FILES
None.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of man:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments and in the summary database). The value of LC_CTYPE need not affect the format
of the information written about the name operands.
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error and
informative messages written to standard output.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
PAGER
Determine an output filtering command for writing the output to a terminal. Any string acceptable as a command_string
operand to the sh -c command shall be valid. When standard output is a terminal
device, the reference page output shall be piped through the command. If the PAGER variable is null or not set, the command
shall be either more or another paginator utility documented in the system
documentation.
ASYNCHRONOUS EVENTS
Default.
STDOUT
The man utility shall write text describing the syntax of the utility name, its options and its operands, or, when
-k is specified, lines from the summary database. The format of this text is implementation-defined.
STDERR
The standard error shall be used for diagnostic messages, and may also be used for informational messages of unspecified
format.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
None.
EXAMPLES
None.
RATIONALE
It is recognized that the man utility is only of minimal usefulness as specified. The opinion of the standard developers
was strongly divided as to how much or how little information man should be required to provide. They considered, however,
that the provision of some portable way of accessing documentation would aid user portability. The arguments against a fuller
specification were:
Large quantities of documentation should not be required on a system that does not have excess disk space.
The current manual system does not present information in a manner that greatly aids user portability.
A "better help system" is currently an area in which vendors feel that they can add value to their POSIX implementations.
The -f option was considered, but due to implementation differences, it was not included in this volume of
POSIX.1-2024.
The description was changed to be more specific about what has to be displayed for a utility. The standard developers considered
it insufficient to allow a display of only the synopsis without giving a short description of what each option and operand
does.
The "purpose" entry to be included in the database can be similar to the section title (less the numeric prefix) from this
volume of POSIX.1-2024 for each utility. These titles are similar to those used in historical systems for this purpose.
See mailx for rationale concerning the default paginator.
The caveat in the LC_CTYPE description was added because it is not a requirement that an implementation provide reference
pages for all of its supported locales on each system; changing LC_CTYPE does not necessarily translate the reference page
into another language. This is equivalent to the current state of LC_MESSAGES in POSIX.1-2024—locale-specific messages are
not yet a requirement.
The historical MANPATH variable is not included in POSIX because no attempt is made to specify naming conventions for
reference page files, nor even to mandate that they are files at all. On some implementations they could be a true database, a
hypertext file, or even fixed strings within the man executable. The standard developers considered the portability of
reference pages to be outside their scope of work. However, users should be aware that MANPATH is implemented on a number of
historical systems and that it can be used to tailor the search pattern for reference pages from the various categories (utilities,
functions, file formats, and so on) when the system administrator reveals the location and conventions for reference pages on the
system.
The keyword search can rely on at least the text of the section titles from these utility descriptions, and the implementation
may add more keywords. The term "section titles" refers to the strings such as:
man — Display system documentation
ps — Report process status
FUTURE DIRECTIONS
If this utility is directed to display a pathname that contains any bytes that have the encoded value of a
character when  is a terminator or separator in the output format being used, implementations are encouraged to
treat this as an error. A future version of this standard may require implementations to treat this as an error.
SEE ALSO
more
XBD 8. Environment Variables, 12.2 Utility Syntax Guidelines
CHANGE HISTORY
First released in Issue 4.
Issue 5
The FUTURE DIRECTIONS section is added.
Issue 7
Austin Group Interpretation 1003.1-2001 #108 is applied, clarifying that informational messages may appear on standard
error.
Issue 8
Austin Group Defect 190 is applied, marking the man utility as part of the User Portability Utilities option, and adding
a requirement for the message it writes for a standard utility to include the environment variables affecting its execution and its
list of exit status codes.
Austin Group Defect 251 is applied, encouraging implementations to report an error if a utility is directed to display a
pathname that contains any bytes that have the encoded value of a  character when  is a terminator or
separator in the output format being used.
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/ipcrm.html =====
ipcrm
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
ipcrm — remove an XSI message queue, semaphore set, or shared memory segment identifier
SYNOPSIS
[XSI]  ipcrm [-q msgid|-Q msgkey|-s semid|-S semkey|-m shmid|-M shmkey]...
DESCRIPTION
The ipcrm utility shall remove zero or more message queues, semaphore sets, or shared memory segments. The interprocess
communication facilities to be removed are specified by the options.
Only a user with appropriate privileges shall be allowed to remove an interprocess communication facility that was not created
by or owned by the user invoking ipcrm.
OPTIONS
The ipcrm utility shall conform to XBD 12.2 Utility Syntax
Guidelines.
The following options shall be supported:
-q msgid
Remove the message queue identifier msgid from the system and destroy the message queue and data structure associated
with it.
-m shmid
Remove the shared memory identifier shmid from the system. The shared memory segment and data structure associated with
it shall be destroyed when all processes with the segment attached have either detached the segment or terminated. If the segment
is not attached to any process, it shall be destroyed immediately.
-s semid
Remove the semaphore identifier semid from the system and destroy the set of semaphores and data structure associated
with it.
-Q msgkey
Remove the message queue identifier, created with key msgkey, from the system and destroy the message queue and data
structure associated with it.
-M shmkey
Remove the shared memory identifier, created with key shmkey, from the system. The shared memory segment and data
structure associated with it shall be destroyed after the last detach.
-S semkey
Remove the semaphore identifier, created with key semkey, from the system and destroy the set of semaphores and data
structure associated with it.
OPERANDS
None.
STDIN
Not used.
INPUT FILES
None.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of ipcrm:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
NLSPATH
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
Default.
STDOUT
Not used.
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
None.
EXAMPLES
None.
RATIONALE
None.
FUTURE DIRECTIONS
None.
SEE ALSO
ipcs
XBD 8. Environment Variables, 12.2 Utility Syntax Guidelines
XSH msgctl(), semctl(), shmctl()
CHANGE HISTORY
First released in Issue 5.
Issue 7
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
Issue 8
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
Austin Group Defect 1240 is applied, clarifying the description of the -m option.
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/command.html =====
command
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
command — execute a simple command
SYNOPSIS
command [-p] command_name [argument...]
command [-p][-v|-V] command_name
DESCRIPTION
The command utility shall cause the shell to treat the arguments as a simple command, suppressing the shell function
lookup that is described in 2.9.1.4 Command Search and Execution,
item 1c.
If the command_name is the same as the name of one of the special built-in utilities, the special properties in the
enumerated list at the beginning of 2.15 Special Built-In Utilities
shall not occur. In every other respect, if command_name is not the name of a function, the effect of command (with
no options) shall be the same as omitting command, except that command_name does not appear in the command word
position in the command command, and consequently is not subject to alias substitution (see 2.3.1 Alias Substitution) nor recognized as a reserved word (see 2.4 Reserved Words).
When the -v or -V option is used, the command utility shall provide information concerning how a command
name is interpreted by the shell.
The command utility shall be treated as a declaration utility if the first argument passed to the utility is recognized
as a declaration utility. In this case, subsequent words of the form name=word shall be expanded in an assignment
context. See 2.9.1.1 Order of Processing.
OPTIONS
The command utility shall conform to XBD 12.2 Utility Syntax
Guidelines.
The following options shall be supported:
-p
Perform the command search using a default value for PATH that is guaranteed to find all of the standard utilities.
-v
Write a string to standard output that indicates the pathname or command that will be used by the shell, in the current shell
execution environment (see 2.13 Shell Execution Environment), to invoke
command_name, but do not invoke command_name.
Executable utilities, regular built-in utilities, command_names including a  character, and any
implementation-provided functions that are found using the PATH variable (as described in 2.9.1.4 Command Search and Execution), shall be written as absolute
pathnames.
Shell functions, special built-in utilities, regular built-in utilities not associated with a PATH search, and shell
reserved words shall be written as just their names.
An alias shall be written as a command line that represents its alias definition.
Otherwise, no output shall be written and the exit status shall reflect that the name was not found.
-V
Write a string to standard output that indicates how the name given in the command_name operand will be interpreted by
the shell, in the current shell execution environment (see 2.13 Shell Execution
Environment), but do not invoke command_name. Although the format of this string is unspecified, it shall indicate
in which of the following categories command_name falls and shall include the information stated:
Executable utilities, regular built-in utilities, and any implementation-provided functions that are found using the PATH
variable (as described in 2.9.1.4 Command Search and Execution),
shall be identified as such and include the absolute pathname in the string.
Other shell functions shall be identified as functions.
Aliases shall be identified as aliases and their definitions included in the string.
Special built-in utilities shall be identified as special built-in utilities.
Regular built-in utilities not associated with a PATH search shall be identified as regular built-in utilities. (The term
"regular" need not be used.)
Shell reserved words shall be identified as reserved words.
OPERANDS
The following operands shall be supported:
argument
One of the strings treated as an argument to command_name.
command_name
The name of a utility or a special built-in utility.
STDIN
Not used.
INPUT FILES
None.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of command:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error and
informative messages written to standard output.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
PATH
Determine the search path used during the command search described in 2.9.1.4 Command Search and Execution, except as described under the
-p option.
ASYNCHRONOUS EVENTS
Default.
STDOUT
When the -v option is specified, standard output shall be formatted as:
"%s\n",
When the -V option is specified, standard output shall be formatted as:
"%s\n",
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
When the -v or -V options are specified, the following exit values shall be returned:
0
Successful completion.
>0
The command_name could not be found or an error occurred.
Otherwise, the following exit values shall be returned:
126
The utility specified by command_name was found but could not be invoked.
127
An error occurred in the command utility or the utility specified by command_name could not be found.
Otherwise, the exit status of command shall be that of the simple command specified by the arguments to
command.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
This utility is required to be intrinsic. See 1.7 Intrinsic Utilities
for details.
The order for command search allows functions to override regular built-ins and path searches. This utility is necessary to
allow functions that have the same name as a utility to call the utility (instead of a recursive call to the function).
The system default path is available using getconf; however, since getconf may need to have the PATH set up before it can be called itself, the
following can be used:
command -p getconf PATH
There are some advantages to suppressing the special characteristics of special built-ins on occasion. For example:
command exec > unwritable-file
does not cause a non-interactive script to abort, so that the output status can be checked by the script.
The command, env, nohup, time, timeout, and xargs utilities have been specified to use exit code 127 if a utility to be invoked cannot be
found, so that applications can distinguish "failure to find a utility" from "invoked utility exited with an error indication".
However, the command and nohup utilities also use exit code 127 when an error
occurs in those utilities, which means exit code 127 is not universally a "not found" indicator. The value 127 was chosen because
it is not commonly used for other meanings; most utilities use small values for "normal error conditions" and the values above
128 can be confused with termination due to receipt of a signal. The value 126 was chosen in a similar manner to indicate that the
utility could be found, but not invoked. Some scripts produce meaningful error messages differentiating the 126 and 127 cases. The
distinction between exit codes 126 and 127 is based on KornShell practice that uses 127 when all attempts to exec the
utility fail with [ENOENT], and uses 126 when any attempt to exec the utility fails for any other reason.
Since the -v and -V options of command produce output in relation to the current shell execution
environment, command is generally provided as a shell regular built-in. If it is called in a subshell or separate utility
execution environment, such as one of the following:
(PATH=foo command -v)
nohup command -v
it does not necessarily produce correct results. For example, when called with nohup or an exec function, in a separate utility execution environment, most
implementations are not able to identify aliases, functions, or special built-ins.
Two types of regular built-ins could be encountered on a system and these are described separately by command. The
description of command search in 2.9.1.4 Command Search and
Execution allows for a standard utility to be implemented as a regular built-in as long as it is found in the appropriate
place in a PATH search. So, for example, command -v true might yield /bin/true or some similar
pathname. Other implementation-defined utilities that are not defined by this volume of POSIX.1-2024 might exist only as built-ins
and have no pathname associated with them. These produce output identified as (regular) built-ins. Applications encountering these
are not able to count on execing them, using them with nohup, overriding them
with a different PATH , and so on.
The command utility takes on the expansion behavior of the command that it is wrapping. Therefore, in
command command export a=~
command is recognized as a declaration utility, and the command sets the variable a to the value of $HOME
because it performs tilde-expansion of an assignment context; while
command echo a=~
outputs the literal string "a=~" because regular expansion can only perform tilde-expansion at the beginning of the word.
However, the shell need only perform lexical analysis of the next argument when deciding if command should be treated as a
declaration utility; therefore, with:
var=export; command $var a=~
and
command -- export a=~
it is unspecified whether the word a=~ is handled in an assignment context or as a regular expansion.
EXAMPLES
Make a version of cd that always prints out the new working directory exactly
once:
cd() {
command cd "$@" >/dev/null
pwd
}
Start off a "secure shell script" in which the script avoids being spoofed by its parent:
IFS='
'
#    The preceding value should be .
#    Set IFS to its default value.
\unalias -a
#    Unset all possible aliases.
#    Note that unalias is escaped to prevent an alias
#    being used for unalias.
unset -f command
#    Ensure command is not a user function.
PATH="$(command -p getconf PATH):$PATH"
#    Put on a reliable PATH prefix.
#    ...
At this point, given correct permissions on the directories called by PATH , the script has the ability to ensure that
any utility it calls is the intended one. It is being very cautious because it assumes that implementation extensions may be
present that would allow user functions to exist when it is invoked; this capability is not specified by this volume of
POSIX.1-2024, but it is not prohibited as an extension. For example, the ENV variable precedes the invocation of the script
with a user start-up script. Such a script could define functions to spoof the application.
RATIONALE
Since command is a regular built-in utility it is always found prior to the PATH search.
There is nothing in the description of command that implies the command line is parsed any differently from that of any
other simple command. For example:
command a | b ; c
is not parsed in any special way that causes '|' or ';' to be treated other than a pipe operator or
or that prevents function lookup on b or c. However, some implementations extend the shell's
assignment syntax, for example to allow an array to be populated with a single assignment, and in order for such an extension to be
usable in assignments specified as arguments to export and readonly these shells have those utility names as separate tokens in their grammar. When
command is used to execute these utilities it also needs to be a separate token in the grammar so that the same extended
assignment syntax can still be recognized in this case. This standard only permits an extension of this nature when the input to
the shell would contain a syntax error according to the standard grammar, and therefore it cannot affect how '|' and
';' are parsed in the example above. Note that although command can be a separate token in the shell's grammar, it
cannot be a reserved word since command is a candidate for alias substitution whereas reserved words are not (see 2.3.1 Alias Substitution).
The command utility is somewhat similar to the Eighth Edition shell builtin command, but since command also
goes to the file system to search for utilities, the name builtin would not be intuitive.
The command utility is most likely to be provided as a regular built-in. It is not listed as a special built-in for the
following reasons:
The removal of exportable functions made the special precedence of a special built-in unnecessary.
A special built-in has special properties (see 2.15 Special Built-In
Utilities) that were inappropriate for invoking other utilities. For example, two commands such as:
date > unwritable-file
command date > unwritable-file
would have entirely different results; in a non-interactive script, the former would continue to execute the next command, the
latter would abort. Introducing this semantic difference along with suppressing functions was seen to be non-intuitive.
The -p option is present because it is useful to be able to ensure a safe path search that finds all the standard
utilities. This search might not be identical to the one that occurs through one of the exec functions (as defined in the
System Interfaces volume of POSIX.1-2024) when PATH is unset. At the very least, this feature is required to allow the
script to access the correct version of getconf so that the value of the default
path can be accurately retrieved.
The command -v and -V options were added to satisfy requirements from users that are currently accomplished
by three different historical utilities: type in the System V shell, whence in
the KornShell, and which in the C shell. Since there is no historical agreement on how and what to accomplish here, the
POSIX command utility was enhanced and the historical utilities were left unmodified. The C shell which merely
conducts a path search. The KornShell whence is more elaborate—in addition to the categories required by POSIX, it also
reports on tracked aliases, exported aliases, and undefined functions.
The output format of -V was left mostly unspecified because human users are its only audience. Applications should not be
written to care about this information; they can use the output of -v to differentiate between various types of commands,
but the additional information that may be emitted by the more verbose -V is not needed and should not be arbitrarily
constrained in its verbosity or localization for application parsing reasons.
FUTURE DIRECTIONS
If this utility is directed to display a pathname that contains any bytes that have the encoded value of a
character when  is a terminator or separator in the output format being used, implementations are encouraged to
treat this as an error. A future version of this standard may require implementations to treat this as an error.
SEE ALSO
2.9.1.4 Command Search and Execution, 2.9.1.1 Order of Processing, 2.13 Shell Execution Environment, 2.15 Special Built-In Utilities, sh
, type
XBD 8. Environment Variables, 12.2 Utility Syntax Guidelines
XSH exec
CHANGE HISTORY
First released in Issue 4.
Issue 7
Austin Group Interpretation 1003.1-2001 #196 is applied, changing the SYNOPSIS to allow -p to be used with -v (or
-V).
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
The command utility is moved from the User Portability Utilities option to the Base. User Portability Utilities is now an
option for interactive utilities.
The APPLICATION USAGE and EXAMPLES are revised to replace the non-standard getconf_CS_PATH with getconf PATH
.
Issue 8
Austin Group Defect 251 is applied, encouraging implementations to report an error if a utility is directed to display a
pathname that contains any bytes that have the encoded value of a  character when  is a terminator or
separator in the output format being used.
Austin Group Defects 351 and 1393 are applied, requiring command to be a declaration utility if the first argument passed
to the utility is recognized as a declaration utility.
Austin Group Defect 854 is applied, adding a note to the APPLICATION USAGE section that this utility is required to be
intrinsic.
Austin Group Defect 1117 is applied, changing "implementation-defined" to "implementation-provided".
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
Austin Group Defect 1161 is applied, changing "Utilities" to "Executable utilities" in the descriptions of the -v and
-V options.
Austin Group Defect 1431 is applied, changing "item 1b" to "item 1c".
Austin Group Defect 1586 is applied, adding the timeout utility.
Austin Group Defect 1594 is applied, changing the APPLICATION USAGE section.
Austin Group Defect 1637 is applied, clarifying that (when no options are specified) command_name is not subject to alias
substitution nor recognized as a reserved word.
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/batch.html =====
batch
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
batch — schedule commands to be executed in a batch queue
SYNOPSIS
batch
DESCRIPTION
The batch utility shall read commands from standard input and schedule them for execution in a batch queue. It shall be
the equivalent of the command:
at -q b -m now
where queue b is a special at queue, specifically for batch jobs. Batch jobs
shall be submitted to the batch queue with no time constraints and shall be run by the system using algorithms, based on
unspecified factors, that may vary with each invocation of batch.
[XSI]
Users shall be permitted to use batch if their name appears in the file at.allow which is located in an
implementation-defined directory. If that file does not exist, the file at.deny, which is located in an
implementation-defined directory, shall be checked to determine whether the user shall be denied access to batch. If neither
file exists, only a process with appropriate privileges shall be allowed to submit a job. If only at.deny exists and is
empty, global usage shall be permitted. The at.allow and at.deny files shall consist of one user name per line.
OPTIONS
None.
OPERANDS
None.
STDIN
The standard input shall be a text file consisting of commands acceptable to the shell command language described in 2. Shell Command Language.
INPUT FILES
[XSI]
The text files at.allow and at.deny, which are located in an implementation-defined directory, shall contain zero or
more user names, one per line, of users who are, respectively, authorized or denied access to the at and batch utilities.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of batch:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments and input files).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error and
informative messages written to standard output.
LC_TIME
Determine the format and contents for date and time strings written by batch.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
SHELL
Determine the name of a command interpreter to be used to invoke the at-job. If the variable is unset or null, sh shall be used. If it is set to a value other than a name for sh, the implementation shall do one of the following: use that shell; use sh; use the login shell from the user database; any of the preceding accompanied by a warning
diagnostic about which was chosen.
TZ
Determine the timezone. The job shall be submitted for execution at the time specified by timespec or -t
time relative to the timezone specified by the TZ variable. If timespec specifies a timezone, it overrides
TZ . If timespec does not specify a timezone and TZ is unset or null, an unspecified default timezone shall be
used.
ASYNCHRONOUS EVENTS
Default.
STDOUT
When standard input is a terminal, prompts of unspecified format for each line of the user input described in the STDIN section
may be written to standard output.
STDERR
The following shall be written to standard error when a job has been successfully submitted:
"job %s at %s\n", at_job_id,
where date shall be equivalent in format to the output of:
date +"%a %b %e %T %Y"
The date and time written shall be adjusted so that they appear in the timezone of the user (as determined by the TZ
variable).
Neither this, nor warning messages concerning the selection of the command interpreter, are considered a diagnostic that changes
the exit status.
Diagnostic messages, if any, shall be written to standard error.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
The job shall not be scheduled.
The following sections are informative.
APPLICATION USAGE
It may be useful to redirect standard output within the specified commands.
EXAMPLES
This sequence can be used at a terminal:
batch
sort outfile
EOT
This sequence, which demonstrates redirecting standard error to a pipe, is useful in a command procedure (the sequence of output
redirection specifications is significant):
batch &1 >outfile | mailx -s "outfile update" mygroup
!
Note that this always sends mail when there has been an attempt to update outfile and the body of the message will be
empty unless an error occurred.
The following shows how to capture both standard error and standard output:
batch &1 | mailx -E -s "errors during batch processing" mygroup
EOF
RATIONALE
Early proposals described batch in a manner totally separated from at, even
though the historical model treated it almost as a synonym for at -qb. A number of
features were added to list and control batch work separately from those in at. Upon
further reflection, it was decided that the benefit of this did not merit the change to the historical interface.
The -m option was included on the equivalent at command because it is
historical practice to mail results to the submitter, even if all job-produced output is redirected. As explained in the RATIONALE
for at, the now keyword submits the job for immediate execution (after scheduling
delays), despite some historical systems where at now would have been considered
an error.
FUTURE DIRECTIONS
None.
SEE ALSO
at
XBD 8. Environment Variables
CHANGE HISTORY
First released in Issue 2.
Issue 6
This utility is marked as part of the User Portability Utilities option.
The NAME is changed to align with the IEEE P1003.2b draft standard.
The normative text is reworded to avoid use of the term "must" for application requirements.
Issue 7
The batch utility is moved from the User Portability Utilities option to the Base. User Portability Utilities is now an
option for interactive utilities.
SD5-XCU-ERN-95 is applied, removing the references to fixed locations for the files referenced by the batch utility.
Issue 8
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
Austin Group Defect 1368 is applied, changing the EXAMPLES section.
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/pax.html =====
pax
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
pax — portable archive interchange
SYNOPSIS
pax [-dv] [-c|-n] [-H|-L] [-o options]
[-f archive] [-s replstr]...
[pattern...]
pax -r[-c|-n] [-dikuv] [-H|-L] [-f archive]
[-o options]... [-p string]...
[-s replstr]...
[pattern...]
pax -w [-dituvX] [-H|-L] [-b blocksize] [[-a]
[-f archive]] [-o options]...
[-s replstr]... [-x
format] [file...]
pax -r -w [-dikltuvX] [-H|-L] [-o options]...
[-p string]...
[-s replstr]...
[file...] directory
DESCRIPTION
The pax utility shall read, write, and write lists of the members of archive files and copy directory hierarchies. A
variety of archive formats shall be supported; see the -x format option.
The action to be taken depends on the presence of the -r and -w options. The four combinations of -r and
-w are referred to as the four modes of operation: list, read, write, and copy modes,
corresponding respectively to the four forms shown in the SYNOPSIS section.
list
In list mode (when neither -r nor -w are specified), pax shall write the names of the members of
the archive file read from the standard input, with pathnames matching the specified patterns, to standard output. If a named file
is of type directory, the file hierarchy rooted at that file shall be listed as well.
read
In read mode (when -r is specified, but -w is not), pax shall extract the members of the archive
file read from the standard input, with pathnames matching the specified patterns. If an extracted file is of type directory, the
file hierarchy rooted at that file shall be extracted as well. The extracted files shall be created performing pathname resolution
with the directory in which pax was invoked as the current working directory.
If an attempt is made to extract a directory when the directory already exists, this shall not be considered an error. If an
attempt is made to extract a FIFO when the FIFO already exists, this shall not be considered an error.
The ownership, access, and modification times, and file mode of the restored files are discussed under the -p option.
write
In write mode (when -w is specified, but -r is not), pax shall write the contents of the
file operands to the standard output in an archive format. If no file operands are specified, a list of files to
copy, one per line, shall be read from the standard input and each entry in this list shall be processed as if it had been a
file operand on the command line. A file of type directory shall include all of the files in the file hierarchy rooted at
the file.
copy
In copy mode (when both -r and -w are specified), pax shall copy the file operands to the
destination directory.
If no file operands are specified, a list of files to copy, one per line, shall be read from the standard input. A file
of type directory shall include all of the files in the file hierarchy rooted at the file.
The effect of the copy shall be as if the copied files were written to a pax format archive file and then
subsequently extracted, except that copying of sockets may be supported even if archiving them in write mode is not supported, and
that there may be hard links between the original and the copied files. If the destination directory is a subdirectory of one of
the files to be copied, the results are unspecified. If the destination directory is a file of a type not defined by the System
Interfaces volume of POSIX.1-2024, the results are implementation-defined; otherwise, it shall be an error for the file named by
the directory operand not to exist, not be writable by the user, or not be a file of type directory.
In read or copy modes, if intermediate directories are necessary to extract an archive member, pax shall
perform actions equivalent to the mkdir() function defined in the System Interfaces
volume of POSIX.1-2024, called with the following arguments:
The intermediate directory used as the path argument
The value of the bitwise-inclusive OR of S_IRWXU, S_IRWXG, and S_IRWXO as the mode argument
If any specified pattern or file operands are not matched by at least one file or archive member, pax shall
write a diagnostic message to standard error for each one that did not match and exit with a non-zero exit status.
The archive formats described in the EXTENDED DESCRIPTION section shall be automatically detected on input. The default output
archive format shall be implementation-defined.
A single archive can span multiple files. The pax utility shall determine, in an implementation-defined manner, what file
to read or write as the next file.
If the selected archive format supports the specification of linked files, it shall be an error if these files cannot be linked
when the archive is extracted. For archive formats that do not store file contents with each name that causes a hard link, if the
file that contains the data is not extracted during this pax session, either the data shall be restored from the original
file, or a diagnostic message shall be displayed with the name of a file that can be used to extract the data. In traversing
directories, pax shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the
last file visited. When it detects an infinite loop, pax shall write a diagnostic message to standard error and shall
terminate.
OPTIONS
The pax utility shall conform to XBD 12.2 Utility Syntax
Guidelines, except that the order of presentation of the -o, -p, and -s options is significant.
The following options shall be supported:
-r
Read an archive file from standard input.
-w
Write files to the standard output in the specified archive format.
-a
Append files to the end of the archive. It is implementation-defined which devices on the system support appending. Additional
file formats unspecified by this volume of POSIX.1-2024 may impose restrictions on appending.
-b blocksize
Block the output at a positive decimal integer number of bytes per write to the archive file. Devices and archive formats may
impose restrictions on blocking. Blocking shall be automatically determined on input. Conforming applications shall not specify a
blocksize value larger than 32256. Default blocking when creating archives depends on the archive format. (See the -x
option below.)
-c
Match all file or archive members except those specified by the pattern or file operands.
-d
Cause files of type directory being copied or archived or archive members of type directory being extracted or listed to match
only the file or archive member itself and not the file hierarchy rooted at the file.
-f archive
Specify the pathname of the input or output archive, overriding the default standard input (in list or read
modes) or standard output (write mode).
-H
If a symbolic link referencing a file of type directory is specified on the command line, pax shall archive the file
hierarchy rooted in the file referenced by the link, using the name of the link as the root of the file hierarchy. Otherwise, if a
symbolic link referencing a file of any other file type which pax can normally archive is specified on the command line,
then pax shall archive the file referenced by the link, using the name of the link. The default behavior, when neither
-H or -L are specified, shall be to archive the symbolic link itself.
-i
Interactively rename files or archive members. For each archive member matching a pattern operand or file matching a
file operand, a prompt shall be written to the file /dev/tty. The prompt shall contain the name of the file or
archive member, but the format is otherwise unspecified. A line shall then be read from /dev/tty. If this line is blank, the
file or archive member shall be skipped. If this line consists of a single period, the file or archive member shall be processed
with no modification to its name. Otherwise, its name shall be replaced with the contents of the line. The pax utility shall
immediately exit with a non-zero exit status if end-of-file is encountered when reading a response or if /dev/tty cannot be
opened for reading and writing.
The results of extracting a hard link to a file that has been renamed during extraction are unspecified.
-k
Prevent the overwriting of existing files.
-l
(The letter ell.) In copy mode, hard links shall be made between the source and destination file hierarchies whenever
possible. If specified in conjunction with -H or -L, when a symbolic link is encountered, the hard link created in
the destination file hierarchy shall be to the file referenced by the symbolic link. If specified when neither -H nor
-L is specified, when a symbolic link is encountered, the implementation shall create a hard link to the symbolic link in
the source file hierarchy or copy the symbolic link to the destination.
-L
If a symbolic link referencing a file of type directory is specified on the command line or encountered during the traversal of
a file hierarchy, pax shall archive the file hierarchy rooted in the file referenced by the link, using the name of the link
as the root of the file hierarchy. Otherwise, if a symbolic link referencing a file of any other file type which pax can
normally archive is specified on the command line or encountered during the traversal of a file hierarchy, pax shall archive
the file referenced by the link, using the name of the link. The default behavior, when neither -H or -L are
specified, shall be to archive the symbolic link itself.
-n
Select the first archive member that matches each pattern operand. No more than one archive member shall be matched for
each pattern (although members of type directory shall still match the file hierarchy rooted at that file).
-o options
Provide information to the implementation to modify the algorithm for extracting or writing files. The value of options
shall consist of one or more -separated keywords of the form:
keyword[[:]=value][,keyword[[:]=value], ...]
Some keywords apply only to certain file formats, as indicated with each description. Use of keywords that are inapplicable to
the file format being processed produces undefined results.
Keywords in the options argument shall be a string that would be a valid portable filename as described in XBD 3.265 Portable Filename Character Set.
Note:
Keywords are not expected to be filenames, merely to follow the same character composition rules as portable filenames.
Keywords can be preceded with white space. The value field shall consist of zero or more characters; within value,
the application shall precede any literal  with a , which shall be ignored, but preserves the
as part of value. A  as the final character, or a  followed solely by white space as
the final characters, in options shall be ignored. Multiple -o options can be specified; if keywords given to these
multiple -o options conflict, the keywords and values appearing later in command line sequence shall take precedence and the
earlier shall be silently ignored. The following keyword values of options shall be supported for the file formats as
indicated:
delete=pattern
(Applicable only to the -x pax format.) When used in write or copy mode, pax shall omit from
extended header records that it produces any keywords matching the string pattern. When used in read or list mode,
pax shall ignore any keywords matching the string pattern in the extended header records. In both cases, matching shall be
performed using the pattern matching notation described in 2.14.1 Patterns
Matching a Single Character and 2.14.2 Patterns Matching Multiple
Characters. For example:
-o delete=security.*
would suppress security-related information. See pax Extended Header for extended header record
keyword usage.
When multiple -odelete=pattern options are specified, the patterns shall be additive; all keywords matching the
specified string patterns shall be omitted from extended header records that pax produces.
exthdr.name=string
(Applicable only to the -x pax format.) This keyword allows user control over the name that is written into the
ustar header blocks for the extended header produced under the circumstances described in pax
Header Block. The name shall be the contents of string, after the following character substitutions have been made:
string Includes:
Replaced by:
%d
The directory name of the file, equivalent to the result of the dirname utility on the translated pathname.
%f
The filename of the file, equivalent to the result of the basename
utility on the translated pathname.
%p
The process ID of the pax process.
%%
A '%' character.
Any other '%' characters in string produce undefined results.
If no -o exthdr.name=string is specified, pax shall use the following default value:
%d/PaxHeaders.%p/%f
globexthdr.name=string
(Applicable only to the -x pax format.) When used in write or copy mode with the appropriate options,
pax shall create global extended header records with ustar header blocks that are treated as regular files by
previous versions of pax. This keyword allows user control over the name that is written into the ustar header blocks
for global extended header records. The name shall be the contents of string, after the following character substitutions have been
made:
string Includes:
Replaced by:
%n
An integer that represents the sequence number of the global extended header record in the archive, starting at
1.
%p
The process ID of the pax process.
%%
A '%' character.
Any other '%' characters in string produce undefined results.
If no -o globexthdr.name=string is specified, pax shall use the following default value:
$TMPDIR/GlobalHead.%p.%n
where $TMPDIR represents the value of the TMPDIR environment variable. If TMPDIR is not set,
pax shall use /tmp.
invalid=action
(Applicable only to the -x pax format.) This keyword allows user control over the action pax takes upon
encountering values in an extended header record that, in read or copy mode, are invalid in the destination hierarchy
or, in list mode, cannot be written in the codeset and current locale of the implementation. The following are invalid
values that shall be recognized by pax:
In read or copy mode, a filename or link name that contains character encodings invalid in the
destination hierarchy. (For example, the name may contain embedded NULs.)
In read or copy mode, a filename or link name that is longer than the maximum allowed in the
destination hierarchy (for either a pathname component or the entire pathname).
In list mode, any character string value (filename, link name, user name, and so on) that cannot be written
in the codeset and current locale of the implementation.
The following mutually-exclusive values of the action argument are supported:
binary
In write mode, pax shall generate a hdrcharset=BINARY extended header record for each file with a
filename, link name, group name, owner name, or any other field in an extended header record that cannot be translated to the UTF-8
codeset, allowing the archive to contain the files with unencoded extended header record values. In read or copy
mode, pax shall use the values specified in the header without translation, regardless of whether this may overwrite an
existing file with a valid name. In list mode, pax shall behave identically to the bypass action.
bypass
In read or copy mode, pax shall bypass the file, causing no change to the destination hierarchy. In
list mode, pax shall write all requested valid values for the file, but its method for writing invalid values is
unspecified.
rename
In read or copy mode, pax shall act as if the -i option were in effect for each file with invalid
filename or link name values, allowing the user to provide a replacement name interactively. In list mode, pax shall
behave identically to the bypass action.
UTF-8
When used in read, copy, or list mode and a filename, link name, owner name, or any other field in an
extended header record cannot be translated from the pax UTF-8 codeset format to the codeset and current locale of the
implementation, pax shall use the actual UTF-8 encoding for the name. If a hdrcharset extended header record is in
effect for this file, the character set specified by that record shall be used instead of UTF-8. If a
hdrcharset=BINARY extended header record is in effect for this file, no translation shall be performed.
write
In read or copy mode, pax shall write the file, translating the name, regardless of whether this may
overwrite an existing file with a valid name. In list mode, pax shall behave identically to the bypass
action.
If no -o invalid=option is specified, pax shall act as if -oinvalid=bypass were
specified. Any overwriting of existing files that may be allowed by the -oinvalid= actions shall be subject to
permission (-p) and modification time (-u) restrictions, and shall be suppressed if the -k option is also
specified.
linkdata
(Applicable only to the -x pax format.) In write mode, pax shall write the contents of a file to the
archive even when that file is merely a hard link to a file whose contents have already been written to the archive.
listopt=format
This keyword specifies the output format of the table of contents produced when the -v option is specified in list
mode. See List Mode Format Specifications. To avoid ambiguity, the listopt=format shall be
the only or final keyword=value pair in a -o option-argument; all characters in the remainder of the option-argument
shall be considered part of the format string. When multiple -olistopt=format options are specified, the format
strings shall be considered a single, concatenated string, evaluated in command line order.
times
(Applicable only to the -x pax format.) When used in write or copy mode, pax shall include
atime and mtime extended header records for each file. See pax Extended Header File
Times.
In addition to these keywords, if the -x pax format is specified, any of the keywords and values
defined in pax Extended Header, including implementation extensions, can be used in -o
option-arguments, in either of two modes:
keyword=value
When used in write or copy mode, these keyword/value pairs shall be included at the beginning of the archive as
typeflag g global extended header records. When used in read or list mode, these keyword/value pairs
shall act as if they had been at the beginning of the archive as typeflag g global extended header records.
keyword:=value
When used in write or copy mode, these keyword/value pairs shall be included as records at the beginning of a
typeflag x extended header for each file. (This shall be equivalent to the  form except that it
creates no typeflag g global extended header records.) When used in read or list mode, these
keyword/value pairs shall act as if they were included as records at the end of each extended header; thus, they shall override any
global or file-specific extended header record keywords of the same names. For example, in the command:
pax -r -o "
gname:=mygroup,
" , '\n' (where n is a digit) back-references, or subexpression matching. The
old string shall also be permitted to contain  characters.
Any non-null character can be used as a delimiter ('/' shown here). Multiple -s expressions can be
specified; the expressions shall be applied in the order specified, terminating with the first successful substitution. The
optional trailing 'g' is as defined in the ed utility. The optional trailing
'p' shall cause successful substitutions to be written to standard error. The optional trailing 's' and
'S' control whether the substitutions are applied to symbolic link contents: 's' shall cause them not to be
applied; 'S' shall cause them to be applied. If neither is present, it is unspecified which is the default. If both are
present, the behavior is unspecified. File or archive member names that substitute to the empty string shall be ignored when
reading and writing archives. Symbolic link contents that substitute to the empty string shall not be treated specially.
-t
When reading files from the file system, and if the user has the permissions required by futimens() to do so, set the access time of each file read to the access time that it had
before being read by pax.
-u
Ignore files that are older (having a less recent file modification time) than a pre-existing file or archive member with the
same name. In read mode, an archive member with the same name as a file in the file system shall be extracted if the archive
member is newer than the file. In write mode, an archive file member with the same name as a file in the file system shall
be superseded if the file is newer than the archive member. If -a is also specified, this is accomplished by appending to
the archive; otherwise, it is unspecified whether this is accomplished by actual replacement in the archive or by appending to the
archive. In copy mode, the file in the destination hierarchy shall be replaced if the file in the source hierarchy is
newer.
-v
In list mode, produce a verbose table of contents (see the STDOUT section). Otherwise, write archive member pathnames to
standard error (see the STDERR section).
-x format
Specify the output archive format. The pax utility shall support the following formats:
cpio
The cpio interchange format; see the EXTENDED DESCRIPTION section. The default blocksize for this format for
character special archive files shall be 5120. Implementations shall support all blocksize values less than or equal to
32256 that are multiples of 512.
pax
The pax interchange format; see the EXTENDED DESCRIPTION section. The default blocksize for this format for
character special archive files shall be 5120. Implementations shall support all blocksize values less than or equal to
32256 that are multiples of 512.
ustar
The tar interchange format; see the EXTENDED DESCRIPTION section. The default blocksize for this format for
character special archive files shall be 10240. Implementations shall support all blocksize values less than or equal to
32256 that are multiples of 512.
Implementation-defined formats shall specify a default block size as well as any other block sizes supported for
character special archive files.
Any attempt to append to an archive file in a format different from the existing archive format shall cause
pax to exit immediately with a non-zero exit status.
-X
When traversing the file hierarchy specified by a pathname, pax shall not descend below directories that have a
different device ID (st_dev; see XSH fstatat()) than the specified
pathname; that is, when a directory with a different device ID is encountered, pax shall process (archive or copy) the
directory itself but shall not process any files below the directory.
Specifying more than one of the mutually-exclusive options -H and -L shall not be considered an error
and the last option specified shall determine the behavior of the utility.
The options that operate on the names of files or archive members (-c, -i, -n, -s,
-u, and -v) shall interact as follows. In read mode, the archive members shall be selected based on the
user-specified pattern operands as modified by the -c, -n, and -u options. Then, any -s and
-i options shall modify, in that order, the names of the selected files. The -v option shall write names resulting
from these modifications.
In write mode, the files shall be selected based on the user-specified pathnames as modified by the
-u option. Then, any -s and -i options shall modify, in that order, the names of these selected files. The
-v option shall write names resulting from these modifications.
If both the -u and -n options are specified, pax shall not consider a file selected unless it
is newer than the file to which it is compared.
List Mode Format Specifications
In list mode with the -o listopt=format option, the format argument shall be applied
for each selected file. The pax utility shall append a  to the listopt output for each selected file.
The format argument shall be used as the format string described in XBD 5. File Format Notation, with the exceptions 1. through 6. defined in the EXTENDED
DESCRIPTION section of printf, plus the following exceptions:
7.
The sequence (keyword) can occur before a format conversion specifier. The conversion argument is defined by the value
of keyword. The implementation shall support the following keywords:
Any of the Field Name entries in ustar Header Block and Octet-Oriented cpio Archive Entry. The implementation may support the cpio keywords without the leading
c_ in addition to the form required by Octet-Oriented cpio Archive Entry.
Any keyword defined for the extended header in pax Extended Header.
Any keyword provided as an implementation-defined extension within the extended header defined in pax Extended Header.
For example, the sequence "%(charset)s" is the string value of the name of the character set in the
extended header.
The result of the keyword conversion argument shall be the value from the applicable header field or extended
header, without any trailing NULs.
All keyword values used as conversion arguments shall be translated from the UTF-8 encoding (or alternative
encoding specified by any hdrcharset extended header record) to the character set appropriate for the local file system,
user database, and so on, as applicable.
8.
An additional conversion specifier character, T, shall be used to specify time formats. The T conversion
specifier character can be preceded by the sequence (keyword=subformat), where subformat is a date format as
defined by date operands. The default keyword shall be mtime and the
default subformat shall be:
%b %e %H:%M %Y
9.
An additional conversion specifier character, M, shall be used to specify the file mode string as defined in ls Standard Output. If (keyword) is omitted, the mode keyword shall be used. For
example, %.1M writes the single character corresponding to the  field of the ls -l command.
10.
An additional conversion specifier character, D, shall be used to specify the device for block or special files, if
applicable, in an implementation-defined format. If not applicable, and (keyword) is specified, then this conversion shall
be equivalent to %(keyword)u. If not applicable, and (keyword) is omitted, then this conversion
shall be equivalent to .
11.
An additional conversion specifier character, F, shall be used to specify a pathname. The F conversion
character can be preceded by a sequence of -separated keywords:
(keyword[,keyword] ... )
The values for all the keywords that are non-null shall be concatenated together, each separated by a '/'.
The default shall be (path) if the keyword path is defined; otherwise, the default shall be
(prefix,name).
12.
An additional conversion specifier character, L, shall be used to specify a symbolic link expansion. If the current
file is a symbolic link, then %L shall expand to:
"%s -> %s", ,
Otherwise, the %L conversion specification shall be the equivalent of %F.
OPERANDS
The following operands shall be supported:
directory
The destination directory pathname for copy mode.
file
A pathname of a file to be copied or archived.
pattern
A pattern matching one or more pathnames of archive members. A pattern needs to be given in the name-generating notation of the
pattern matching notation in 2.14 Pattern Matching Notation, including
the filename expansion rules in 2.14.3 Patterns Used for Filename
Expansion. The default, if no pattern is specified, is to select all members in the archive.
STDIN
In write mode, the standard input shall be used only if no file operands are specified. It shall be a file
containing a list of pathnames, each terminated by a  character.
In list and read modes, if -f is not specified, the standard input shall be an archive
file.
Otherwise, the standard input shall not be used.
INPUT FILES
The input file named by the archive option-argument, or standard input when the archive is read from there, shall be a
file formatted according to one of the specifications in the EXTENDED DESCRIPTION section or some other implementation-defined
format.
The file /dev/tty shall be used to write prompts and read responses.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of pax:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_COLLATE
Determine the locale for the behavior of ranges, equivalence classes, and multi-character collating elements used in the pattern
matching expressions for the pattern operand and the basic regular expression for the -s option.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments and input files), and the behavior of character classes used in the pattern matching
expressions for the pattern operand and the basic regular expression for the -s option.
LC_MESSAGES
Determine the locale used to affect the format and contents of diagnostic messages and prompts written to standard error.
LC_TIME
Determine the format and contents of date and time strings when the -v option is specified.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
TMPDIR
Determine the pathname that provides part of the default global extended header record file, as described for the -o
globexthdr= keyword in the OPTIONS section.
TZ
Determine the timezone used to calculate date and time strings when the -v option is specified. If TZ is unset or
null, an unspecified default timezone shall be used.
ASYNCHRONOUS EVENTS
Default.
STDOUT
In write mode, if -f is not specified, the standard output shall be the archive formatted according to one of the
specifications in the EXTENDED DESCRIPTION section, or some other implementation-defined format (see -x format).
In list mode, when the -olistopt=format has been specified, the selected archive
members shall be written to standard output using the format described under List Mode Format
Specifications. In list mode without the -olistopt=format option, the table of contents of the
selected archive members shall be written to standard output using the following format:
"%s\n",
If the -v option is specified in list mode, the table of contents of the selected archive members
shall be written to standard output using the following formats.
For pathnames representing hard links to previous members of the archive:
"%sΔ==Δ%s\n", ,
For all other pathnames:
"%s\n",
where  shall be the format specified by the ls utility with the -l option. When writing pathnames in this format, it is unspecified
what is written for fields for which the underlying archive format does not have the correct information, although the correct
number of -separated fields shall be written.
In list mode, standard output shall not be buffered more than a pathname (plus any associated information
and a  terminator) at a time.
STDERR
If -v is specified in read, write, or copy modes, pax shall write the pathnames it processes
to the standard error output using the following format:
"%s\n",
These pathnames shall be written as soon as processing is begun on the file or archive member, and shall be flushed
to standard error. The trailing , which shall not be buffered, is written when the file has been read or
written.
If the -s option is specified, and the replacement string has a trailing 'p', substitutions shall
be written to standard error in the following format:
"%sΔ>>Δ%s\n", ,
In all operating modes of pax, optional messages of unspecified format concerning the input archive format
and volume number, the number of files, blocks, volumes, and media parts as well as other diagnostic messages may be written to
standard error.
In all formats, for both standard output and standard error, it is unspecified how non-printable characters in
pathnames or link names are written.
When using the -xpax archive format, if a filename, link name, group name, owner name, or any other
field in an extended header record cannot be translated between the codeset in use for that extended header record and the
character set of the current locale, pax shall write a diagnostic message to standard error, shall process the file as
described for the -o invalid= option, and then shall continue processing with the next file.
OUTPUT FILES
In read mode, the extracted output files shall be of the archived file type. In copy mode, the copied output files
shall be the type of the file being copied. In either mode, existing files in the destination hierarchy shall be overwritten only
when all permission (-p), modification time (-u), and invalid-value (-oinvalid=) tests allow it.
In write mode, the output file named by the -f option-argument shall be a file formatted according to
one of the specifications in the EXTENDED DESCRIPTION section, or some other implementation-defined format.
EXTENDED DESCRIPTION
pax Interchange Format
A pax archive tape or file produced in the -xpax format shall contain a series of blocks. The
physical layout of the archive shall be identical to the ustar format described in ustar
Interchange Format. Each file archived shall be represented by the following sequence:
An optional header block with extended header records. This header block is of the form described in pax Header Block, with a typeflag value of x or g. The extended header records,
described in pax Extended Header, shall be included as the data for this header block.
A header block that describes the file. Any fields in the preceding optional extended header shall override the
associated fields in this header block for this file.
Zero or more blocks that contain the contents of the file.
At the end of the archive file there shall be two 512-byte blocks filled with binary zeros, interpreted as an
end-of-archive indicator.
A schematic of an example archive with global extended header records and two actual files is shown in pax Format Archive Example. In the example, the second file in the archive has no extended header preceding it,
presumably because it has no need for extended attributes.
Figure: pax Format Archive Example
pax Header Block
The pax header block shall be identical to the ustar header block described in ustar Interchange Format, except that two additional typeflag values are defined:
x
Represents extended header records for the following file in the archive (which shall have its own ustar header block).
The format of these extended header records shall be as described in pax Extended Header.
g
Represents global extended header records for the following files in the archive. The format of these extended header records
shall be as described in pax Extended Header. Each value shall affect all subsequent files that do
not override that value in their own extended header record and until another global extended header record is reached that
provides another value for the same field. The typeflag g global headers should not be used with interchange media
that could suffer partial data loss in transporting the archive.
For both of these types, the size field shall be the size of the extended header records in octets. The
other fields in the header block are not meaningful to this version of the pax utility. However, if this archive is read by
a pax utility conforming to the ISO POSIX-2:1993 standard, the header block fields are used to create a regular file
that contains the extended header records as data. Therefore, header block field values should be selected to provide reasonable
file access to this regular file.
A further difference from the ustar header block is that data blocks for files of typeflag 1 (the
digit one) (hard link) may be included, which means that the size field may be greater than zero. Archives created by pax
-o linkdata shall include these data blocks with the hard links.
pax Extended Header
A pax extended header contains values that are inappropriate for the ustar header block because of
limitations in that format: fields requiring a character encoding other than that described in the ISO/IEC 646:1991 standard,
fields representing file attributes not described in the ustar header, and fields whose format or length do not fit the
requirements of the ustar header. The values in an extended header add attributes to the following file (or files; see the
description of the typeflag g header block) or override values in the following header block(s), as indicated in the
following list of keywords.
An extended header shall consist of one or more records, each constructed as follows:
"%d %s=%s\n", , ,
The extended header records shall be encoded according to the ISO/IEC 10646-1:2020 standard UTF-8 encoding.
The  field, , , and  shown shall be limited to the portable
character set, as encoded in UTF-8. The  fields can be any UTF-8 characters. The  field
shall be the decimal length of the extended header record in octets, including the trailing . If there is a
hdrcharset extended header in effect for a file, the value field for any gname, linkpath, path,
and uname extended header records shall be encoded using the character set specified by the hdrcharset extended
header record; otherwise, the value field shall be encoded using UTF-8. The value field for all other keywords
specified by POSIX.1-2024 shall be encoded using UTF-8.
The  field shall be one of the entries from the following list or a keyword provided as an
implementation extension. Keywords consisting entirely of lowercase letters, digits, and periods are reserved for future
standardization. A keyword shall not include an . (In the following list, the notations "file(s)" or
"block(s)" is used to acknowledge that a keyword affects the following single file after a typeflag x extended
header, but possibly multiple files after typeflag g. Any requirements in the list for pax to include a record
when in write or copy mode shall apply only when such a record has not already been provided through the use of the
-o option. When used in copy mode, pax shall behave as if an archive had been created with applicable extended
header records and then extracted.)
atime
The file access time for the following file(s), equivalent to the value of the st_atim member of the stat
structure for a file, as described by the stat() function. The access time shall be
restored if the process has appropriate privileges required to do so. The format of the  shall be as described
in pax Extended Header File Times.
charset
The name of the character set used to encode the data in the following file(s). The entries in the following table are defined
to refer to known standards; additional names may be agreed on between the originator and recipient.
Formal Standard
ISO-IRΔ646Δ1990
ISO/IEC 646:1990
ISO-IRΔ8859Δ1Δ1998
ISO/IEC 8859-1:1998
ISO-IRΔ8859Δ2Δ1999
ISO/IEC 8859-2:1999
ISO-IRΔ8859Δ3Δ1999
ISO/IEC 8859-3:1999
ISO-IRΔ8859Δ4Δ1998
ISO/IEC 8859-4:1998
ISO-IRΔ8859Δ5Δ1999
ISO/IEC 8859-5:1999
ISO-IRΔ8859Δ6Δ1999
ISO/IEC 8859-6:1999
ISO-IRΔ8859Δ7Δ1987
ISO/IEC 8859-7:1987
ISO-IRΔ8859Δ8Δ1999
ISO/IEC 8859-8:1999
ISO-IRΔ8859Δ9Δ1999
ISO/IEC 8859-9:1999
ISO-IRΔ8859Δ10Δ1998
ISO/IEC 8859-10:1998
ISO-IRΔ8859Δ13Δ1998
ISO/IEC 8859-13:1998
ISO-IRΔ8859Δ14Δ1998
ISO/IEC 8859-14:1998
ISO-IRΔ8859Δ15Δ1999
ISO/IEC 8859-15:1999
ISO-IRΔ10646Δ2000
ISO/IEC 10646:2000
ISO-IRΔ10646Δ2000ΔUTF-8
ISO/IEC 10646, UTF-8 encoding
BINARY
None.
The encoding is included in an extended header for information only; when pax is used as described in
POSIX.1-2024, it shall not translate the file data into any other encoding. The BINARY entry indicates unencoded binary
data.
When used in write or copy mode, it is implementation-defined whether pax includes a
charset extended header record for a file.
comment
A series of characters used as a comment. All characters in the  field shall be ignored by pax.
gid
The group ID of the group that owns the file, expressed as a decimal number using digits from the ISO/IEC 646:1991
standard. This record shall override the gid field in the following header block(s). When used in write or
copy mode, pax shall include a gid extended header record for each file whose group ID is greater than 2097151
(octal 7777777).
gname
The group of the file(s), formatted as a group name in the group database. This record shall override the gid and
gname fields in the following header block(s), and any gid extended header record. When used in read,
copy, or list mode, pax shall translate the name from the encoding in the header record to the character set
appropriate for the group database on the receiving system. If any of the characters cannot be translated, and if neither the
-oinvalid=UTF-8 option nor the -oinvalid=binary option is specified, the results are
implementation-defined. When used in write or copy mode, pax shall include a gname extended header
record for each file whose group name cannot be represented entirely with the letters and digits of the portable character
set.
hdrcharset
The name of the character set used to encode the value field of the gname, linkpath, path, and
uname pax extended header records. The entries in the following table are defined to refer to known standards;
additional names may be agreed between the originator and the recipient.
Formal Standard
ISO-IRΔ10646Δ2000ΔUTF-8
ISO/IEC 10646, UTF-8 encoding
BINARY
None.
If no hdrcharset extended header record is specified, the default character set used to encode all values in
extended header records shall be the ISO/IEC 10646-1:2020 standard UTF-8 encoding.
The BINARY entry indicates that all values recorded in extended headers for affected files are unencoded
binary data from the underlying system.
linkpath
The pathname of a link being created to another file, of any type, previously archived. This record shall override the
linkname field in the following ustar header block(s). The following ustar header block shall determine the
type of link created. If typeflag of the following header block is 1, it shall be a hard link. If typeflag is 2, it
shall be a symbolic link and the linkpath value shall be the contents of the symbolic link. The pax utility shall
translate the name of the link (contents of the symbolic link) from the encoding in the header to the character set appropriate for
the local file system. When used in write or copy mode, pax shall include a linkpath extended header
record for each link whose pathname cannot be represented entirely with the members of the portable character set other than
NUL.
mtime
The file modification time of the following file(s), equivalent to the value of the st_mtim member of the stat
structure for a file, as described in the stat() function. This record shall override
the mtime field in the following header block(s). The modification time shall be restored if the process has appropriate
privileges required to do so. The format of the  shall be as described in pax
Extended Header File Times.
path
The pathname of the following file(s). This record shall override the name and prefix fields in the following
header block(s). The pax utility shall translate the pathname of the file from the encoding in the header to the character
set appropriate for the local file system.
When used in write or copy mode, pax shall include a path extended header record for
each file whose pathname cannot be represented entirely with the members of the portable character set other than NUL.
realtime.any
The keywords prefixed by "realtime." are reserved for future standardization.
security.any
The keywords prefixed by "security." are reserved for future standardization.
size
The size of the file in octets, expressed as a decimal number using digits from the ISO/IEC 646:1991 standard. This record
shall override the size field in the following header block(s). When used in write or copy mode, pax
shall include a size extended header record for each file with a size value greater than 8589934591 (octal
77777777777).
uid
The user ID of the file owner, expressed as a decimal number using digits from the ISO/IEC 646:1991 standard. This record
shall override the uid field in the following header block(s). When used in write or copy mode, pax
shall include a uid extended header record for each file whose owner ID is greater than 2097151 (octal 7777777).
uname
The owner of the following file(s), formatted as a user name in the user database. This record shall override the uid
and uname fields in the following header block(s), and any uid extended header record. When used in read,
copy, or list mode, pax shall translate the name from the encoding in the header record to the character set
appropriate for the user database on the receiving system. If any of the characters cannot be translated, and if neither the
-oinvalid=UTF-8 option nor the -oinvalid=binary option is specified, the results are
implementation-defined. When used in write or copy mode, pax shall include a uname extended header
record for each file whose user name cannot be represented entirely with the letters and digits of the portable character set.
If the  field is zero length, it shall delete any header block field, previously entered
extended header value, or global extended header value of the same name.
If a keyword in an extended header record (or in a -o option-argument) overrides or deletes a corresponding
field in the ustar header block, pax shall ignore the contents of that header block field.
Unlike the ustar header block fields, NULs shall not delimit s; all characters within
the  field shall be considered data for the field. None of the length limitations of the ustar header
block fields in ustar Header Block shall apply to the extended header records.
pax Extended Header Keyword Precedence
This section describes the precedence in which the various header records and fields and command line options are
selected to apply to a file in the archive. When pax is used in read or list modes, it shall determine a file
attribute in the following sequence:
If -odelete=keyword-prefix is used, the affected attributes shall be determined from step 7., if
applicable, or ignored otherwise.
If -okeyword:= is used, the affected attributes shall be ignored.
If -okeyword:=value is used, the affected attribute shall be assigned the value.
If there is a typeflag x extended header record, the affected attribute shall be assigned the
. When extended header records conflict, the last one given in the header shall take precedence.
If -okeyword=value is used, the affected attribute shall be assigned the value.
If there is a typeflag g global extended header record, the affected attribute shall be assigned the
. When global extended header records conflict, the last one given in the global header shall take
precedence.
Otherwise, the attribute shall be determined from the ustar header block.
pax Extended Header File Times
The pax utility shall write an mtime record for each file in write or copy modes if the
file's modification time cannot be represented exactly in the ustar header logical record described in ustar Interchange Format. This can occur if the time is out of ustar range, or if the file system of
the underlying implementation supports non-integer time granularities and the time is not an integer. All of these time records
shall be formatted as a decimal representation of the time in seconds since the Epoch. If a  ('.') decimal
point character is present, the digits to the right of the point shall represent the units of a subsecond timing granularity, where
the first digit is tenths of a second and each subsequent digit is a tenth of the previous digit. In read or copy
mode, the pax utility shall truncate the time of a file to the greatest value that is not greater than the input header file
time. In write or copy mode, the pax utility shall output a time exactly if it can be represented exactly as a
decimal number, and otherwise shall generate only enough digits so that the same time shall be recovered if the file is extracted
on a system whose underlying implementation supports the same time granularity.
ustar Interchange Format
A ustar archive tape or file shall contain a series of logical records. Each logical record shall be a
fixed-size logical record of 512 octets (see below). Although this format may be thought of as being stored on 9-track
industry-standard 12.7 mm (0.5 in) magnetic tape, other types of transportable media are not excluded. Each file archived shall be
represented by a header logical record that describes the file, followed by zero or more logical records that give the contents of
the file. At the end of the archive file there shall be two 512-octet logical records filled with binary zeros, interpreted as an
end-of-archive indicator.
The logical records may be grouped for physical I/O operations, as described under the -bblocksize
and -x ustar options. Each group of logical records may be written with a single operation equivalent to the write() function. On magnetic tape, the result of this write shall be a single tape physical
block. The last physical block shall always be the full size, so logical records after the two zero logical records may contain
undefined data.
The header logical record shall be structured as shown in the following table. All lengths and offsets are in
decimal.
Table: ustar Header Block
Field Name
Octet Offset
Length (in Octets)
name
0
100
mode
100
8
uid
108
8
gid
116
8
size
124
12
mtime
136
12
chksum
148
8
typeflag
156
1
linkname
157
100
magic
257
6
version
263
2
uname
265
32
gname
297
32
devmajor
329
8
devminor
337
8
prefix
345
155
All characters in the header logical record shall be represented in the coded character set of the
ISO/IEC 646:1991 standard. For maximum portability between implementations, names should be selected from characters
represented by the portable filename character set as octets with the most significant bit zero. If an implementation supports the
use of characters outside of  and the portable filename character set in names for files, users, and groups, one or
more implementation-defined encodings of these characters shall be provided for interchange purposes.
However, the pax utility shall never create filenames on the local system that cannot be accessed via the
procedures described in POSIX.1-2024. If a filename is found on the medium that would create an invalid filename, it is
implementation-defined whether the data from the file is stored on the file hierarchy and under what name it is stored. The
pax utility may choose to ignore these files as long as it produces an error indicating that the file is being ignored.
Each field within the header logical record is contiguous; that is, there is no padding used. Each character on the
archive medium shall be stored contiguously.
The fields magic, uname, and gname are character strings each terminated by a NUL character.
The fields name, linkname, and prefix are NUL-terminated character strings except when all characters in the
array contain non-NUL characters including the last character. The version field is two octets containing the characters
"00" (zero-zero). The typeflag contains a single character. All other fields are leading zero-filled octal numbers
using digits from the ISO/IEC 646:1991 standard IRV. Each numeric field is terminated by one or more  or NUL
characters.
The name and the prefix fields shall produce the pathname of the file. A new pathname shall be
formed, if prefix is not an empty string (its first character is not NUL), by concatenating prefix (up to the first
NUL character), a  character, and name; otherwise, name is used alone. In either case, name is
terminated at the first NUL character. If prefix begins with a NUL character, it shall be ignored. In this manner, pathnames
of at most 256 characters can be supported. If a pathname does not fit in the space provided, pax shall notify the user of
the error, and shall not store any part of the file—header or data—on the medium.
The linkname field, described below, shall not use the prefix to produce a pathname. As such, a
linkname is limited to 100 characters. If the name does not fit in the space provided, pax shall notify the user of
the error, and shall not attempt to store the link on the medium.
The mode field provides 12 bits encoded in the ISO/IEC 646:1991 standard octal digit representation.
The encoded bits shall represent the following values:
Table: ustar mode Field
Bit Value
POSIX.1-2024 Bit
Description
04000
S_ISUID
Set UID on execution.
02000
S_ISGID
Set GID on execution.
01000
Reserved for future standardization.
00400
S_IRUSR
Read permission for file owner class.
00200
S_IWUSR
Write permission for file owner class.
00100
S_IXUSR
Execute/search permission for file owner class.
00040
S_IRGRP
Read permission for file group class.
00020
S_IWGRP
Write permission for file group class.
00010
S_IXGRP
Execute/search permission for file group class.
00004
S_IROTH
Read permission for file other class.
00002
S_IWOTH
Write permission for file other class.
00001
S_IXOTH
Execute/search permission for file other class.
When appropriate privileges are required to set one of these mode bits, and the user restoring the files from the
archive does not have appropriate privileges, the mode bits for which the user does not have appropriate privileges shall be
ignored. Some of the mode bits in the archive format are not mentioned elsewhere in this volume of POSIX.1-2024. If the
implementation does not support those bits, they may be ignored.
The uid and gid fields are the user and group ID of the owner and group of the file,
respectively.
The size field is the size of the file in octets. If the typeflag field is set to specify a file to
be of type 1 (a hard link) or 2 (a symbolic link), the size field shall be specified as zero. If the typeflag field
is set to specify a file of type 5 (directory), the size field shall be interpreted as described under the definition of
that record type. No data logical records are stored for types 1, 2, or 5. If the typeflag field is set to 3 (character
special file), 4 (block special file), or 6 (FIFO), the meaning of the size field is unspecified by this volume of
POSIX.1-2024, and no data logical records shall be stored on the medium. Additionally, for type 6, the size field shall be
ignored when reading. If the typeflag field is set to any other value, the number of logical records written following the
header shall be (size+511)/512, ignoring any fraction in the result of the division.
The mtime field shall be the modification time of the file at the time it was archived. It is the
ISO/IEC 646:1991 standard representation of the octal value of the modification time obtained from the stat() function.
The chksum field shall be the ISO/IEC 646:1991 standard IRV representation of the octal value of the
simple sum of all octets in the header logical record. Each octet in the header shall be treated as an unsigned value. These values
shall be added to an unsigned integer, initialized to zero, the precision of which is not less than 17 bits. When calculating the
checksum, the chksum field is treated as if it were all  characters.
The typeflag field specifies the type of file archived. If a particular implementation does not recognize
the type, or the user does not have appropriate privileges to create that type, the file shall be extracted as if it were a regular
file if the file type is defined to have a meaning for the size field that could cause data logical records to be written on
the medium (see the previous description for size). If conversion to a regular file occurs, the pax utility shall
produce an error indicating that the conversion took place. All of the typeflag fields shall be coded in the
ISO/IEC 646:1991 standard IRV:
0
Represents a regular file. For backwards-compatibility, a typeflag value of binary zero ('\0') should be
recognized as meaning a regular file when extracting files from the archive. Archives written with this version of the archive file
format create regular files with a typeflag value of the ISO/IEC 646:1991 standard IRV '0'.
1
Represents a file linked to another file, of any type, previously archived. Such files are identified by having the same device
and file serial numbers, and pathnames that refer to different directory entries. All such files shall be archived as linked files.
The linked-to name is specified in the linkname field with a NUL-character terminator if it is less than 100 octets in
length.
2
Represents a symbolic link. The contents of the symbolic link shall be stored in the linkname field.
3,4
Represent character special files and block special files respectively. In this case the devmajor and devminor
fields shall contain information defining the device, the format of which is unspecified by this volume of POSIX.1-2024.
Implementations may map the device specifications to their own local specification or may ignore the entry.
5
Specifies a directory or subdirectory. On systems where disk allocation is performed on a directory basis, the size
field shall contain the maximum number of octets (which may be rounded to the nearest disk block allocation unit) that the
directory may hold. A size field of zero indicates no such limiting. Systems that do not support limiting in this manner
should ignore the size field.
6
Specifies a FIFO special file. Note that the archiving of a FIFO file archives the existence of this file and not its
contents.
7
Reserved to represent a file to which an implementation has associated some high-performance attribute. Implementations without
such extensions should treat this file as a regular file (type 0).
A-Z
The letters 'A' to 'Z', inclusive, are reserved for custom implementations. All other values are reserved for
future versions of this standard.
It is unspecified whether files with pathnames that refer to the same directory entry are archived as linked files
or as separate files. If they are archived as linked files, this means that attempting to extract both pathnames from the resulting
archive always causes an error (unless the -u option is used) because the link cannot be created.
It is unspecified whether files with the same device and file serial numbers being appended to an archive are
treated as linked files to members that were in the archive before the append.
Attempts to archive a socket shall produce a diagnostic message when ustar interchange format is used, but
may be allowed when pax interchange format is used. Handling of other file types is implementation-defined.
The magic field is the specification that this archive was output in this archive format. If this field
contains ustar (the five characters from the ISO/IEC 646:1991 standard IRV shown followed by NUL), the uname and
gname fields shall contain the ISO/IEC 646:1991 standard IRV representation of the owner and group of the file,
respectively (truncated to fit, if necessary). When the file is restored by a privileged, protection-preserving version of the
utility, the user and group databases shall be scanned for these names. If found, the user and group IDs contained within these
files shall be used rather than the values contained within the uid and gid fields.
cpio Interchange Format
The octet-oriented cpio archive format shall be a series of entries, each comprising a header that describes
the file, the name of the file, and then the contents of the file.
An archive may be recorded as a series of fixed-size blocks of octets. This blocking shall be used only to make
physical I/O more efficient. The last group of blocks shall always be at the full size.
For the octet-oriented cpio archive format, the individual entry information shall be in the order indicated
and described by the following table; see also the  header.
Table: Octet-Oriented cpio Archive Entry
Header Field Name
Length (in Octets)
Interpreted as
c_magic
6
Octal number
c_dev
6
Octal number
c_ino
6
Octal number
c_mode
6
Octal number
c_uid
6
Octal number
c_gid
6
Octal number
c_nlink
6
Octal number
c_rdev
6
Octal number
c_mtime
11
Octal number
c_namesize
6
Octal number
c_filesize
11
Octal number
Filename Field Name
Length
Interpreted as
c_name
c_namesize
Pathname string
File Data Field Name
Length
Interpreted as
c_filedata
c_filesize
Data
cpio Header
For each file in the archive, a header as defined previously shall be written. The information in the header fields
is written as streams of the ISO/IEC 646:1991 standard characters interpreted as octal numbers. The octal numbers shall be
extended to the necessary length by appending the ISO/IEC 646:1991 standard IRV zeros at the most-significant-digit end of the
number; the result is written to the most-significant digit of the stream of octets first. The fields shall be interpreted as
follows:
c_magic
Identify the archive as being a transportable archive by containing the identifying value "070707".
c_dev, c_ino
Contains values that uniquely identify the file within the archive (that is, no files contain the same pair of c_dev and
c_ino values unless they are links to the same file). The values shall be determined in an unspecified manner.
c_mode
Contains the file type and access permissions as defined in the following table.
Table: Values for cpio c_mode Field
File Permissions Name
Value
Indicates
C_IRUSR
000400
Read by owner
C_IWUSR
000200
Write by owner
C_IXUSR
000100
Execute by owner
C_IRGRP
000040
Read by group
C_IWGRP
000020
Write by group
C_IXGRP
000010
Execute by group
C_IROTH
000004
Read by others
C_IWOTH
000002
Write by others
C_IXOTH
000001
Execute by others
C_ISUID
004000
Set uid
C_ISGID
002000
Set gid
C_ISVTX
001000
Reserved
File Type Name
Value
Indicates
C_ISDIR
040000
Directory
C_ISFIFO
010000
FIFO
C_ISREG
0100000
Regular file
C_ISLNK
0120000
Symbolic link
C_ISBLK
060000
Block special file
C_ISCHR
020000
Character special file
C_ISSOCK
0140000
Socket
C_ISCTG
0110000
Reserved
Directories, FIFOs, symbolic links, and regular files shall be supported on a system conforming to this volume of
POSIX.1-2024; additional values defined previously are reserved for compatibility with existing systems. Additional file types may
be supported; however, such files should not be written to archives intended to be transported to other systems.
c_uid
Contains the user ID of the owner.
c_gid
Contains the group ID of the group.
c_nlink
Contains a number greater than or equal to the number of links in the archive referencing the file. If the -a option is
used to append to a cpio archive, then the pax utility need not account for the files in the existing part of the
archive when calculating the c_nlink values for the appended part of the archive, and need not alter the c_nlink
values in the existing part of the archive if additional files with the same c_dev and c_ino values are appended to
the archive.
c_rdev
Contains implementation-defined information for character or block special files.
c_mtime
Contains the latest time of modification of the file at the time the archive was created.
c_namesize
Contains the length of the pathname, including the terminating NUL character.
c_filesize
Contains the length in octets of the data section following the header structure.
cpio Filename
The c_name field shall contain the pathname of the file. The length of this field in octets is the value of
c_namesize.
If a filename is found on the medium that would create an invalid pathname, it is implementation-defined whether
the data from the file is stored on the file hierarchy and under what name it is stored.
All characters shall be represented in the ISO/IEC 646:1991 standard IRV. For maximum portability between
implementations, names should be selected from characters represented by the portable filename character set as octets with the
most significant bit zero. If an implementation supports the use of characters outside the portable filename character set in names
for files, users, and groups, one or more implementation-defined encodings of these characters shall be provided for interchange
purposes. However, the pax utility shall never create filenames on the local system that cannot be accessed via the
procedures described previously in this volume of POSIX.1-2024. If a filename is found on the medium that would create an invalid
filename, it is implementation-defined whether the data from the file is stored on the local file system and under what name it is
stored. The pax utility may choose to ignore these files as long as it produces an error indicating that the file is being
ignored.
cpio File Data
Following c_name, there shall be c_filesize octets of data. Interpretation of such data occurs in a
manner dependent on the file. For regular files, the data shall consist of the contents of the file. For symbolic links, the data
shall consist of the contents of the symbolic link. If c_filesize is zero, no data shall be contained in
c_filedata.
When restoring from an archive:
If the user does not have appropriate privileges to create a file of the specified type, pax shall ignore
the entry and write an error message to standard error.
Only regular files and symbolic links have data to be restored. Presuming a regular file meets any selection
criteria that might be imposed on the format-reading utility by the user, such data shall be restored.
If a user does not have appropriate privileges to set a particular mode flag, the flag shall be ignored. Some of
the mode flags in the archive format are not mentioned elsewhere in this volume of POSIX.1-2024. If the implementation does not
support those flags, they may be ignored.
cpio Special Entries
FIFO special files, directories, and the trailer shall be recorded with c_filesize equal to zero. Symbolic
links shall be recorded with c_filesize equal to the length of the contents of the symbolic link. For other special files,
c_filesize is unspecified by this volume of POSIX.1-2024. The header for the next file entry in the archive shall be written
directly after the last octet of the file entry preceding it. A header denoting the filename TRAILER!!! shall indicate the
end of the archive; the contents of octets in the last block of the archive following such a header are undefined.
EXIT STATUS
The following exit values shall be returned:
0
All files were processed successfully.
>0
An error occurred.
CONSEQUENCES OF ERRORS
If pax cannot create a file or a link when reading an archive or cannot find a file when writing an archive, or cannot
preserve the user ID, group ID, or file mode when the -p option is specified, a diagnostic message shall be written to
standard error and a non-zero exit status shall be returned, but processing shall continue. In the case where pax cannot
create a hard link to a file, pax shall not, by default, create a second copy of the file.
If the extraction of a file from an archive is prematurely terminated by a signal or error, pax may have
only partially extracted the file or (if the -n option was not specified) may have extracted a file of the same name as that
specified by the user, but which is not the file the user wanted. Additionally, the file modes of extracted directories may have
additional bits from the S_IRWXU mask set as well as incorrect modification and access times.
The following sections are informative.
APPLICATION USAGE
Caution is advised when using the -a option to append to a cpio format archive. If any of the files being appended
happen to be given the same c_dev and c_ino values as a file in the existing part of the archive, then they may be
treated as links to that file on extraction. Thus, it is risky to use -a with cpio format except when it is done on
the same system that the original archive was created on, and with the same pax utility, and in the knowledge that there has
been little or no file system activity since the original archive was created that could lead to any of the files appended being
given the same c_dev and c_ino values as an unrelated file in the existing part of the archive. Also, when
(intentionally) appending additional links to a file in the existing part of the archive, the c_nlink values in the modified
archive can be smaller than the number of links to the file in the archive, which may mean that the links are not preserved on
extraction.
The -p (privileges) option was invented to reconcile differences between historical tar and
cpio implementations. In particular, the two utilities use -m in diametrically opposed ways. The -p option
also provides a consistent means of extending the ways in which future file attributes can be addressed, such as for enhanced
security systems or high-performance files. Although it may seem complex, there are really two modes that are most commonly
used:
-p e
"Preserve everything". This would be used by the historical superuser, someone with all appropriate privileges, to preserve
all aspects of the files as they are recorded in the archive. The e flag is the sum of o and p, and other
implementation-defined attributes.
-p p
"Preserve" the file mode bits. This would be used by the user with regular privileges who wished to preserve aspects of the
file other than the ownership. The file times are preserved by default, but two other flags are offered to disable these and use
the time of extraction.
The one pathname per line format of standard input precludes pathnames containing  characters.
Although such pathnames violate the portable filename guidelines, they may exist and their presence may inhibit usage of pax
within shell scripts. This problem is inherited from historical archive programs. The problem can be avoided by listing filename
arguments on the command line instead of on standard input.
It is almost certain that appropriate privileges are required for pax to accomplish parts of this volume of
POSIX.1-2024. Specifically, creating files of type block special or character special, restoring file access times unless the files
are owned by the user (the -t option), or preserving file owner, group, and mode (the -p option) all probably require
appropriate privileges.
In read mode, implementations are permitted to overwrite files when the archive has multiple members with
the same name. This may fail if permissions on the first version of the file do not permit it to be overwritten.
The cpio and ustar formats can only support files up to 8589934592 bytes (8 * 2^30) in size.
When archives containing binary header information are listed , the filenames printed may cause strange behavior on
some terminals.
When all of the following are true:
A file of type directory is being placed into an archive.
The ustar archive format is being used.
The pathname of the directory is less than or equal to 155 bytes long (it will fit in the prefix field in
the ustar header block).
The last component of the pathname of the directory is longer than 100 bytes long (it will not fit in the
name field in the ustar header block).
some implementations of the pax utility will place the entire directory pathname in the prefix field,
set the name field to an empty string, and place the directory in the archive. Other implementations of the pax
utility will give an error under these conditions because the name field is not large enough to hold the last component of
the directory name. This standard allows either behavior. However, when extracting a directory from a ustar format archive,
this standard requires that all implementations be able to extract a directory even if the name field contains an empty
string as long as the prefix field does not also contain an empty string.
When restricting file hierarchy traversal to one file system, it can sometimes be desirable for the crossing points
themselves to be processed (archived or copied) and sometimes for them not to be processed. (Crossing points are mount points and,
if the -L option is specified, symbolic links to directories on other file systems.) With the -X option pax
processes them, but there is no standard way to have pax not process them. However, this can be achieved by using find to do the hierarchy traversal and piping the output of find to pax (with the
-d option); see the APPLICATION USAGE for find.
EXAMPLES
The following command:
pax -w -f /dev/rmt/1m .
copies the contents of the current directory to tape drive 1, medium density (assuming historical System V device
naming procedures—the historical BSD device name would be /dev/rmt9).
The following commands:
mkdir newdir
pax -rw olddir newdir
copy the olddir directory hierarchy to newdir.
pax -r -s ',^//*usr//*,,' -f a.pax
reads the archive a.pax, with all files rooted in /usr in the archive extracted relative to the
current directory.
Using the option:
-o listopt="%M %(atime)T %(size)D %(name)s"
overrides the default output description in Standard Output and instead writes:
-rw-rw--- Jan 12 15:53 2003 1492 /usr/foo/bar
Using the options:
-o listopt='%L\t%(size)D\n%.7' \
-o listopt='(name)s\n%(atime)T\n%T'
overrides the default output description in Standard Output and instead writes:
/usr/foo/bar -> /tmp   1492
/usr/fo
Jan 12 15:53 1991
Jan 31 15:53 2003
RATIONALE
The pax utility was new for the ISO POSIX-2:1993 standard. It represents a peaceful compromise between advocates of
the historical tar and cpio utilities.
A fundamental difference between cpio and tar was in the way directories were treated. The
cpio utility did not treat directories differently from other files, and to select a directory and its contents required
that each file in the hierarchy be explicitly specified. For tar, a directory matched every file in the file hierarchy it
rooted.
The pax utility offers both interfaces; by default, directories map into the file hierarchy they root. The
-d option causes pax to skip any file not explicitly referenced, as cpio historically did. The tar
-style behavior was chosen as the default because it was believed that this was the more common usage and because
tar is the more commonly available interface, as it was historically provided on both System V and BSD implementations.
The data interchange format specification in this volume of POSIX.1-2024 requires that processes with "appropriate
privileges" shall always restore the ownership and permissions of extracted files exactly as archived. If viewed from the historic
equivalence between superuser and "appropriate privileges", there are two problems with this requirement. First, users running as
superusers may unknowingly set dangerous permissions on extracted files. Second, it is needlessly limiting, in that superusers
cannot extract files and own them as superuser unless the archive was created by the superuser. (It should be noted that
restoration of ownerships and permissions for the superuser, by default, is historical practice in cpio, but not in
tar.) In order to avoid these two problems, the pax specification has an additional "privilege" mechanism, the
-p option. Only a pax invocation with the privileges needed, and which has the -p option set using the
e specification character, has appropriate privileges to restore full ownership and permission information.
Note also that this volume of POSIX.1-2024 requires that the file ownership and access permissions shall be set, on
extraction, in the same fashion as the creat() function when provided with the mode
stored in the archive. This means that the file creation mask of the user is applied to the file permissions.
Users should note that directories may be created by pax while extracting files with permissions that are
different from those that existed at the time the archive was created. When extracting sensitive information into a directory
hierarchy that no longer exists, users are encouraged to set their file creation mask appropriately to protect these files during
extraction.
The table of contents output is written to standard output to facilitate pipeline processing.
An early proposal had hard links displaying for all pathnames. This was removed because it complicates the output
of the case where -v is not specified and does not match historical cpio usage. The hard-link information is
available in the -v display.
The description of the -l option allows implementations to make hard links to symbolic links. Earlier
versions of this standard did not specify any way to create a hard link to a symbolic link, but many implementations provided this
capability as an extension. If there are hard links to symbolic links when an archive is created, the implementation is required to
archive the hard link in the archive (unless -H or -L is specified). When in read mode and in copy
mode, implementations supporting hard links to symbolic links should use them when appropriate.
The archive formats inherited from the POSIX.1-1990 standard have certain restrictions that have been brought along
from historical usage. For example, there are restrictions on the length of pathnames stored in the archive. When pax is
used in copy(-rw) mode (copying directory hierarchies), the ability to use extensions from the -xpax
format overcomes these restrictions.
The default blocksize value of 5120 bytes for cpio was selected because it is one of the standard
block-size values for cpio, set when the -B option is specified. (The other default block-size value for cpio
is 512 bytes, and this was considered to be too small.) The default block value of 10240 bytes for tar was selected because
that is the standard block-size value for BSD tar. The maximum block size of 32256 bytes (215-512
bytes) is the largest multiple of 512 bytes that fits into a signed 16-bit tape controller transfer register. There are known
limitations in some historical systems that would prevent larger blocks from being accepted. Historical values were chosen to
improve compatibility with historical scripts using dd or similar utilities to manipulate
archives. Also, default block sizes for any file type other than character special file has been deleted from this volume of
POSIX.1-2024 as unimportant and not likely to affect the structure of the resulting archive.
Implementations are permitted to modify the block-size value based on the archive format or the device to which the
archive is being written. This is to provide implementations with the opportunity to take advantage of special types of devices,
and it should not be used without a great deal of consideration as it almost certainly decreases archive portability.
The intended use of the -n option was to permit extraction of one or more files from the archive without
processing the entire archive. This was viewed by the standard developers as offering significant performance advantages over
historical implementations. The -n option in early proposals had three effects; the first was to cause special characters in
patterns to not be treated specially. The second was to cause only the first file that matched a pattern to be extracted. The third
was to cause pax to write a diagnostic message to standard error when no file was found matching a specified pattern. Only
the second behavior is retained by this volume of POSIX.1-2024, for many reasons. First, it is in general not acceptable for a
single option to have multiple effects. Second, the ability to make pattern matching characters act as normal characters is useful
for parts of pax other than file extraction. Third, a finer degree of control over the special characters is useful because
users may wish to normalize only a single special character in a single filename. Fourth, given a more general escape mechanism,
the previous behavior of the -n option can be easily obtained using the -s option or a sed script. Finally, writing a diagnostic message when a pattern specified by the user is
unmatched by any file is useful behavior in all cases.
In this version, the -n was removed from the copy mode synopsis of pax; it is inapplicable
because there are no pattern operands specified in this mode.
There is another method than pax for copying subtrees in POSIX.1-2024 described as part of the cp utility. Both methods are historical practice: cp
provides a simpler, more intuitive interface, while pax offers a finer granularity of control. Each provides additional
functionality to the other; in particular, pax maintains the hard-link structure of the hierarchy while cp does not. It is the intention of the standard developers that the results be similar (using
appropriate option combinations in both utilities). The results are not required to be identical; there seemed insufficient gain to
applications to balance the difficulty of implementations having to guarantee that the results would be exactly identical.
A single archive may span more than one file. It is suggested that implementations provide informative messages to
the user on standard error whenever the archive file is changed.
The -d option (do not create intermediate directories not listed in the archive) found in early proposals
was originally provided as a complement to the historic -d option of cpio. It has been deleted.
The -s option in early proposals specified a subset of the substitution command from the ed utility. As there was no reason for only a subset to be supported, the -s option is now
compatible with the current ed specification. Since the delimiter can be any non-null
character, the following usage with single  characters is valid:
pax -s " foo bar " ...
The -t description is worded so as to note that this may cause the access time update caused by some other
activity (which occurs while the file is being read) to be overwritten.
The default behavior of pax with regard to file modification times is the same as historical implementations
of tar. It is not the historical behavior of cpio.
Because the -i option uses /dev/tty, utilities without a controlling terminal are not able to use
this option.
The -y option, found in early proposals, has been deleted because a line containing a single
for the -i option has equivalent functionality. The special lines for the -i option (a single  and the
empty line) are historical practice in cpio.
In early drafts, a -echarmap option was included to increase portability of files between systems
using different coded character sets. This option was omitted because it was apparent that consensus could not be formed for it. In
this version, the use of UTF-8 should be an adequate substitute.
The ISO POSIX-2:1993 standard and ISO POSIX-1 standard requirements for pax, however, made it very
difficult to create a single archive containing files created using extended characters provided by different locales. This version
adds the hdrcharset keyword to make it possible to archive files in these cases without dropping files due to translation
errors.
Translating filenames and other attributes from a locale's encoding to UTF-8 and then back again can lose
information, as the resulting filename might not be byte-for-byte equivalent to the original. To avoid this problem, users can
specify the -o hdrcharset=binary option, which will cause the resulting archive to use binary format for all names
and attributes. Such archives are not portable among hosts that use different native encodings (e.g., EBCDIC versus
ASCII-based encodings), but they will allow interchange among the vast majority of POSIX file systems in practical use. Also, the
-o hdrcharset=binary option will cause pax in copy mode to behave more like other standard utilities
such as cp.
If the values specified by the -o exthdr.name=value, -o globexthdr.name=value, or by
$TMPDIR (if -o globexthdr.name is not specified) require a character encoding other than that described in the
ISO/IEC 646:1991 standard, a path extended header record will have to be created for the file. If a hdrcharset
extended header record is active for such headers, it will determine the codeset used for the value field in these extended
path header records. These path extended header records always need to be created when writing an archive even if
hdrcharset=binary has been specified and would contain the same (binary) data that appears in the ustar header record
prefix and name fields. (In other words, an extended header path record is always required to be generated if the
prefix or name fields contain non-ASCII characters even when hdrcharset=binary is also in effect for that
file.)
The -k option was added to address international concerns about the dangers involved in the character set
transformations of -e (if the target character set were different from the source, the filenames might be transformed into
names matching existing files) and also was made more general to protect files transferred between file systems with different
{NAME_MAX} values (truncating a filename on a smaller system might also inadvertently overwrite existing files). As stated, it
prevents any overwriting, even if the target file is older than the source. This version adds more granularity of options to solve
this problem by introducing the -oinvalid=option—specifically the UTF-8 and binary actions. (Note that
an existing file is still subject to overwriting in this case. The -k option closes that loophole.)
Some of the file characteristics referenced in this volume of POSIX.1-2024 might not be supported by some archive
formats. For example, neither the tar nor cpio formats contain the file access time. For this reason, the e
specification character has been provided, intended to cause all file characteristics specified in the archive to be retained.
It is required that extracted directories, by default, have their access and modification times and permissions set
to the values specified in the archive. This has obvious problems in that the directories are almost certainly modified after being
extracted and that directory permissions may not permit file creation. One possible solution is to create directories with the mode
specified in the archive, as modified by the umask of the user, with sufficient
permissions to allow file creation. After all files have been extracted, pax would then reset the access and modification
times and permissions as necessary.
The list-mode formatting description borrows heavily from the one defined by the printf utility. However, since there is no separate operand list to get conversion arguments,
the format was extended to allow specifying the name of the conversion argument as part of the conversion specification.
The T conversion specifier allows time fields to be displayed in any of the date formats. Unlike the
ls utility, pax does not adjust the format when the date is less than six months
in the past. This makes parsing the output more predictable.
The D conversion specifier handles the ability to display the major/minor or file size, as with ls, by using %-8(size)D.
The L conversion specifier handles the ls display for symbolic
links.
Conversion specifiers were added to generate existing known types used for ls.
pax Interchange Format
The new POSIX data interchange format was developed primarily to satisfy international concerns that the
ustar and cpio formats did not provide for file, user, and group names encoded in characters outside a subset of the
ISO/IEC 646:1991 standard. The standard developers realized that this new POSIX data interchange format should be very
extensible because there were other requirements they foresaw in the near future:
Support international character encodings and locale information
Support security information (ACLs, and so on)
Support future file types, such as realtime or contiguous files
Include data areas for implementation use
Support systems with words larger than 32 bits and timers with subsecond granularity
The following were not goals for this format because these are better handled by separate utilities or are
inappropriate for a portable format:
Encryption
Compression
Data translation between locales and codesets
inode storage
The format chosen to support the goals is an extension of the ustar format. Of the two formats previously
available, only the ustar format was selected for extensions because:
It was easier to extend in an upwards-compatible way. It offered version flags and header block type fields with
room for future standardization. The cpio format, while possessing a more flexible file naming methodology, could not be
extended without breaking some theoretical implementation or using a dummy filename that could be a legitimate filename.
Industry experience since the original "tar wars" fought in developing the ISO POSIX-1 standard has
clearly been in favor of the ustar format, which is generally the default output format selected for pax
implementations on new systems.
The new format was designed with one additional goal in mind: reasonable behavior when an older tar or
pax utility happened to read an archive. Since the POSIX.1-1990 standard mandated that a "format-reading utility" had to
treat unrecognized typeflag values as regular files, this allowed the format to include all the extended information in a
pseudo-regular file that preceded each real file. An option is given that allows the archive creator to set up reasonable names for
these files on the older systems. Also, the normative text suggests that reasonable file access values be used for this
ustar header block. Making these header files inaccessible for convenient reading and deleting would not be reasonable. File
permissions of 600 or 700 are suggested.
The ustar typeflag field was used to accommodate the additional functionality of the new format
rather than magic or version because the POSIX.1-1990 standard (and, by reference, the previous version of pax), mandated
the behavior of the format-reading utility when it encountered an unknown typeflag, but was silent about the other two
fields.
Early proposals for the first version of this standard contained a proposed archive format that was based on
compatibility with the standard for tape files (ISO 1001, similar to the format used historically on many mainframes and
minicomputers). This format was overly complex and required considerable overhead in volume and header records. Furthermore, the
standard developers felt that it would not be acceptable to the community of POSIX developers, so it was later changed to be a
format more closely related to historical practice on POSIX systems.
The prefix and name split of pathnames in ustar was replaced by the single path extended header record for
simplicity.
The concept of a global extended header (typeflagg) was controversial. If this were applied to an
archive being recorded on magnetic tape, a few unreadable blocks at the beginning of the tape could be a serious problem; a utility
attempting to extract as many files as possible from a damaged archive could lose a large percentage of file header information in
this case. However, if the archive were on a reliable medium, such as a CD-ROM, the global extended header offers considerable
potential size reductions by eliminating redundant information. Thus, the text warns against using the global method for unreliable
media and provides a method for implanting global information in the extended header for each file, rather than in the
typeflag g records.
No facility for data translation or filtering on a per-file basis is included because the standard developers could
not invent an interface that would allow this in an efficient manner. If a filter, such as encryption or compression, is to be
applied to all the files, it is more efficient to apply the filter to the entire archive as a single file. The standard developers
considered interfaces that would invoke a shell script for each file going into or out of the archive, but the system overhead in
this approach was considered to be too high.
One such approach would be to have filter= records that give a pathname for an executable. When the program
is invoked, the file and archive would be open for standard input/output and all the header fields would be available as
environment variables or command-line arguments. The standard developers did discuss such schemes, but they were omitted from
POSIX.1-2024 due to concerns about excessive overhead. Also, the program itself would need to be in the archive if it were to be
used portably.
There is currently no portable means of identifying the character set(s) used for a file in the file system.
Therefore, pax has not been given a mechanism to generate charset records automatically. The only portable means of doing
this is for the user to write the archive using the -ocharset=string command line option. This assumes that all of
the files in the archive use the same encoding. The "implementation-defined" text is included to allow for a system that can
identify the encodings used for each of its files.
The table of standards that accompanies the charset record description is acknowledged to be very limited. Only a
limited number of character set standards is reasonable for maximal interchange. Any character set is, of course, possible by prior
agreement. It was suggested that EBCDIC be listed, but it was omitted because it is not defined by a formal standard. Formal
standards, and then only those with reasonably large followings, can be included here, simply as a matter of practicality. The
s represent names of officially registered character sets in the format required by the ISO 2375:1985
standard.
The normal  or -separated list rules are not followed in the case of keyword options to
allow ease of argument parsing for getopts.
Further information on character encodings is in pax Archive Character Set
Encoding/Decoding.
The standard developers have reserved keyword name space for vendor extensions. It is suggested that the format to
be used is:
VENDOR.keyword
where VENDOR is the name of the vendor or organization in all uppercase letters. It is further suggested
that the keyword following the  be named differently than any of the standard keywords so that it could be used for
future standardization, if appropriate, by omitting the VENDOR prefix.
The  field in the extended header record was included to make it simpler to step through the
records, even if a record contains an unknown format (to a particular pax) with complex interactions of special characters.
It also provides a minor integrity checkpoint within the records to aid a program attempting to recover files from a damaged
archive.
There are no extended header versions of the devmajor and devminor fields because the unspecified
format ustar header field should be sufficient. If they are not, vendor-specific extended keywords (such as
VENDOR.devmajor) should be used.
Device and i-number labeling of files was not adopted from cpio; files are interchanged strictly on a
symbolic name basis, as in ustar.
Just as with the ustar format descriptions, the new format makes no special arrangements for multi-volume
archives. Each of the pax archive types is assumed to be inside a single POSIX file and splitting that file over multiple
volumes (diskettes, tape cartridges, and so on), processing their labels, and mounting each in the proper sequence are considered
to be implementation details that cannot be described portably.
The pax format is intended for interchange, not only for backup on a single (family of) systems. It is not
as densely packed as might be possible for backup:
It contains information as coded characters that could be coded in binary.
It identifies extended records with name fields that could be omitted in favor of a fixed-field layout.
It translates names into a portable character set and identifies locale-related information, both of which are
probably unnecessary for backup.
The requirements on restoring from an archive are slightly different from the historical wording, allowing for
non-monolithic privilege to bring forward as much as possible. In particular, attributes such as "high performance file" might be
broadly but not universally granted while set-user-ID or chown() might be much more
restricted. There is no implication in POSIX.1-2024 that the security information be honored after it is restored to the file
hierarchy, in spite of what might be improperly inferred by the silence on that topic. That is a topic for another standard.
Hard links are recorded in the fashion described here because a hard link can be to any file type. It is desirable
in general to be able to restore part of an archive selectively and restore all of those files completely. If the data is not
associated with each hard link, it is not possible to do this. However, the data associated with a file can be large, and when
selective restoration is not needed, this can be a significant burden. The archive is structured so that files that have no
associated data can always be restored by the name of any link name of any hard link, and the user can choose whether data is
recorded with each instance of a file that contains data. The format permits mixing of hard links with data and hard links without
data in a single archive; this can be done for special needs, and pax is expected to interpret such archives on input
properly, despite the fact that there is no pax option that would force this mixed case on output. (When -o
linkdata is used, the output must contain the duplicate data, but the implementation is free to include it or omit it when
-o linkdata is not used.)
The time values are included as extended header records for those implementations needing more than the eleven
octal digits allowed by the ustar format. Portable file timestamps cannot be negative. If pax encounters a file with
a negative timestamp in copy or write mode, it can reject the file, substitute a non-negative timestamp, or generate
a non-portable timestamp with a leading '-'. Even though some implementations can support finer file-time granularities
than seconds, the normative text requires support only for seconds since the Epoch because the ISO POSIX-1 standard states
them that way. The ustar format includes only mtime; the new format adds atime and ctime for symmetry.
The atime access time restored to the file system will be affected by the -p a and -p e options.
The ctime creation time (actually inode modification time) is described with appropriate privileges so that it can be
ignored when writing to the file system. POSIX does not provide a portable means to change file creation time. Nothing is intended
to prevent a non-portable implementation of pax from restoring the value.
The gid, size, and uid extended header records were included to allow expansion beyond the
sizes specified in the regular tar header. New file system architectures are emerging that will exhaust the 12-digit size
field. There are probably not many systems requiring more than 8 digits for user and group IDs, but the extended header values were
included for completeness, allowing overrides for all of the decimal values in the tar header.
The standard developers intended to describe the effective results of pax with regard to file ownerships and
permissions; implementations are not restricted in timing or sequencing the restoration of such, provided the results are as
specified.
Much of the text describing the extended headers refers to use in "write or copy modes". The
copy mode references are due to the normative text: "The effect of the copy shall be as if the copied files were written to
an archive file and then subsequently extracted ...". There is certainly no way to test whether pax is actually generating
the extended headers in copy mode, but the effects must be as if it had.
pax Archive Character Set Encoding/Decoding
There is a need to exchange archives of files between systems of different native codesets. Filenames, group names,
and user names must be preserved to the fullest extent possible when an archive is read on the receiving platform. Translation of
the contents of files is not within the scope of the pax utility.
There will also be the need to represent characters that are not available on the receiving platform. These
unsupported characters cannot be automatically folded to the local set of characters due to the chance of collisions. This could
result in overwriting previous extracted files from the archive or pre-existing files on the system.
For these reasons, the codeset used to represent characters within the extended header records of the pax
archive must be sufficiently rich to handle all commonly used character sets. The fields requiring translation include, at a
minimum, filenames, user names, group names, and link pathnames. Implementations may wish to have localized extended keywords that
use non-portable characters.
The standard developers considered the following options:
The archive creator specifies the well-defined name of the source codeset. The receiver must then recognize the
codeset name and perform the appropriate translations to the destination codeset.
The archive creator includes within the archive the character mapping table for the source codeset used to encode
extended header records. The receiver must then read the character mapping table and perform the appropriate translations to the
destination codeset.
The archive creator translates the extended header records in the source codeset into a canonical form. The
receiver must then perform the appropriate translations to the destination codeset.
The approach that incorporates the name of the source codeset poses the problem of codeset name registration, and
makes the archive useless to pax archive decoders that do not recognize that codeset.
Because parts of an archive may be corrupted, the standard developers felt that including the character map of the
source codeset was too fragile. The loss of this one key component could result in making the entire archive useless. (The
difference between this and the global extended header decision was that the latter has a workaround—duplicating extended header
records on unreliable media—but this would be too burdensome for large character set maps.)
Both of the above approaches also put an undue burden on the pax archive receiver to handle the
cross-product of all source and destination codesets.
To simplify the translation from the source codeset to the canonical form and from the canonical form to the
destination codeset, the standard developers decided that the internal representation should be a stateless encoding. A stateless
encoding is one where each codepoint has the same meaning, without regard to the decoder being in a specific state. An example of a
stateful encoding would be the Japanese Shift-JIS; an example of a stateless encoding would be the ISO/IEC 646:1991 standard
(equivalent to 7-bit ASCII).
For these reasons, the standard developers decided to adopt a canonical format for the representation of file
information strings. The obvious, well-endorsed candidate is the ISO/IEC 10646-1:2020 standard (based in part on Unicode),
which can be used to represent the characters of virtually all standardized character sets. The standard developers initially
agreed upon using UCS2 (16-bit Unicode) as the internal representation. This repertoire of characters provides a sufficiently rich
set to represent all commonly-used codesets.
However, the standard developers found that the 16-bit Unicode representation had some problems. It forced the
issue of standardizing byte ordering. The 2-byte length of each character made the extended header records twice as long for the
case of strings coded entirely from historical 7-bit ASCII. For these reasons, the standard developers chose the UTF-8 defined in
the ISO/IEC 10646-1:2020 standard. This multi-byte representation encodes UCS2 or UCS4 characters reliably and
deterministically, eliminating the need for a canonical byte ordering. In addition, NUL octets and other characters possibly
confusing to POSIX file systems do not appear, except to represent themselves. It was realized that certain national codesets take
up more space after the encoding, due to their placement within the UCS range; it was felt that the usefulness of the encoding of
the names outweighs the disadvantage of size increase for file, user, and group names.
The encoding of UTF-8 is as follows:
UCS4 Hex Encoding  UTF-8 Binary Encoding
00000000-0000007F  0xxxxxxx
00000080-000007FF  110xxxxx 10xxxxxx
00000800-0000FFFF  1110xxxx 10xxxxxx 10xxxxxx
00010000-001FFFFF  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
00200000-03FFFFFF  111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
04000000-7FFFFFFF  1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
where each 'x' represents a bit value from the character being translated.
ustar Interchange Format
The description of the ustar format reflects numerous enhancements over pre-1988 versions of the historical
tar utility. The goal of these changes was not only to provide the functional enhancements desired, but also to retain
compatibility between new and old versions. This compatibility has been retained. Archives written using the old archive format are
compatible with the new format.
Implementors should be aware that the previous file format did not include a mechanism to archive directory type
files. For this reason, the convention of using a filename ending with  was adopted to specify a directory on the
archive.
The total size of the name and prefix fields have been set to meet the minimum requirements for
{PATH_MAX}. If a pathname will fit within the name field, it is recommended that the pathname be stored there without the
use of the prefix field. Although the name field is known to be too small to contain {PATH_MAX} characters, the value was
not changed in this version of the archive file format to retain backwards-compatibility, and instead the prefix was introduced.
Also, because of the earlier version of the format, there is no way to remove the restriction on the linkname field being
limited in size to just that of the name field.
The size field is required to be meaningful in all implementation extensions, although it could be zero.
This is required so that the data blocks can always be properly counted.
It is suggested that if device special files need to be represented that cannot be represented in the standard
format, that one of the extension types (A-Z) be used, and that the additional information for the special file be
represented as data and be reflected in the size field.
Attempting to restore a special file type, where it is converted to ordinary data and conflicts with an existing
filename, need not be specially detected by the utility. If run as an ordinary user, pax should not be able to overwrite the
entries in, for example, /dev in any case (whether the file is converted to another type or not). If run as a privileged
user, it should be able to do so, and it would be considered a bug if it did not. The same is true of ordinary data files and
similarly named special files; it is impossible to anticipate the needs of the user (who could really intend to overwrite the
file), so the behavior should be predictable (and thus regular) and rely on the protection system as required.
The value 7 in the typeflag field is intended to define how contiguous files can be stored in a ustar
archive. POSIX.1-2024 does not require the contiguous file extension, but does define a standard way of archiving such files so
that all conforming systems can interpret these file types in a meaningful and consistent manner. On a system that does not support
extended file types, the pax utility should do the best it can with the file and go on to the next.
The file protection modes are those conventionally used by the ls
utility. This is extended beyond the usage in the ISO POSIX-2 standard to support the "shared text" or "sticky" bit. It is
intended that the conformance document should not document anything beyond the existence of and support of such a mode. Further
extensions are expected to these bits, particularly with overloading the set-user-ID and set-group-ID flags.
cpio Interchange Format
The reference to appropriate privileges in the cpio format refers to an error on standard output; the
ustar format does not make comparable statements.
The model for this format was the historical System V cpio-c data interchange format. This model
documents the portable version of the cpio format and not the binary version. It has the flexibility to transfer data of any
type described within POSIX.1-2024, yet is extensible to transfer data types specific to extensions beyond POSIX.1-2024 (for
example, contiguous files). Because it describes existing practice, there is no question of maintaining upwards-compatibility.
cpio Header
There has been some concern that the size of the c_ino field of the header is too small to handle those
systems that have very large inode numbers. However, the c_ino field in the header is used strictly as a hard-link
resolution mechanism for archives. It is not necessarily the same value as the inode number of the file in the location from
which that file is extracted.
The name c_magic is based on historical usage.
cpio Filename
For most historical implementations of the cpio utility, {PATH_MAX} octets can be used to describe the
pathname without the addition of any other header fields (the NUL character would be included in this count). {PATH_MAX} is the
minimum value for pathname size, documented as 256 bytes. However, an implementation may use c_namesize to determine the
exact length of the pathname. With the current description of the
header, this pathname size can be as large as a number that is described in six octal digits.
Two values are documented under the c_mode field values to provide for extensibility for known file
types:
0110 000
Reserved for contiguous files. The implementation may treat the rest of the information for this archive like a regular file.
If this file type is undefined, the implementation may create the file as a regular file.
This provides for extensibility of the cpio format while allowing for the ability to read old archives.
Files of an unknown type may be read as "regular files" on some implementations. On a system that does not support extended file
types, the pax utility should do the best it can with the file and go on to the next.
FUTURE DIRECTIONS
If this utility is directed to display a pathname that contains any bytes that have the encoded value of a
character when  is a terminator or separator in the output format being used, implementations are encouraged to
treat this as an error. A future version of this standard may require implementations to treat this as an error.
If this utility is directed to create a new directory entry that contains any bytes that have the encoded value of
a  character, implementations are encouraged to treat this as an error. A future version of this standard may
require implementations to treat this as an error.
SEE ALSO
2. Shell Command Language, cp, ed, getopts, ls, printf
XBD 3.145 File Mode Bits, 5. File Format Notation, 8.
Environment Variables, 12.2 Utility Syntax Guidelines, ,
XSH chown(), creat(), fstatat(), futimens(), mkdir(), mkfifo(), write()
CHANGE HISTORY
First released in Issue 4.
Issue 5
A note is added to the APPLICATION USAGE indicating that the cpio and tar formats can only support files up to 8
gigabytes in size.
Issue 6
The pax utility is aligned with the IEEE P1003.2b draft standard:
Support has been added for symbolic links in the options and interchange formats.
A new format has been devised, based on extensions to ustar.
References to the "extended" tar and cpio formats derived from the POSIX.1-1990 standard have been
changed to remove the "extended" adjective because this could cause confusion with the extended tar header added in this
version. (All references to tar are actually to ustar.)
The TZ entry is added to the ENVIRONMENT VARIABLES section.
IEEE PASC Interpretation 1003.2 #168 is applied, clarifying that mkdir() and mkfifo() calls can ignore an
[EEXIST] error when extracting an archive.
IEEE PASC Interpretation 1003.2 #180 is applied, clarifying how extracted files are created when in read
mode.
IEEE PASC Interpretation 1003.2 #181 is applied, clarifying the description of the -t option.
IEEE PASC Interpretation 1003.2 #195 is applied.
IEEE PASC Interpretation 1003.2 #206 is applied, clarifying the handling of links for the -H, -L, and
-l options.
IEEE Std 1003.1-2001/Cor 1-2002, item XCU/TC1/D6/35 is applied, adding the process ID of the
pax process into certain fields. This change provides a method for the implementation to ensure that different instances of
pax extracting a file named /a/b/foo will not collide when processing the extended header information associated with
foo.
IEEE Std 1003.1-2001/Cor 1-2002, item XCU/TC1/D6/36 is applied, changing -x B to -x
pax in the OPTIONS section.
IEEE Std 1003.1-2001/Cor 2-2004, item XCU/TC2/D6/20 is applied, updating the SYNOPSIS to be
consistent with the normative text.
IEEE Std 1003.1-2001/Cor 2-2004, item XCU/TC2/D6/21 is applied, updating the DESCRIPTION to describe
the behavior when files to be linked are symbolic links and the system is not capable of making hard links to symbolic links.
IEEE Std 1003.1-2001/Cor 2-2004, item XCU/TC2/D6/22 is applied, updating the OPTIONS section to
describe the behavior for how multiple -odelete=pattern options are to be handled.
IEEE Std 1003.1-2001/Cor 2-2004, item XCU/TC2/D6/23 is applied, updating the write option
within the OPTIONS section.
IEEE Std 1003.1-2001/Cor 2-2004, item XCU/TC2/D6/24 is applied, adding a paragraph into the OPTIONS
section that states that specifying more than one of the mutually-exclusive options (-H and -L) is not considered an
error and that the last option specified will determine the behavior of the utility.
IEEE Std 1003.1-2001/Cor 2-2004, item XCU/TC2/D6/25 is applied, removing the ctime paragraph
within the EXTENDED DESCRIPTION. There is a contradiction in the definition of the ctime keyword for the pax extended
header, in that the st_ctime member of the stat structure does not refer to a file creation time. No field in the
standard stat structure from  includes a file creation
time.
IEEE Std 1003.1-2001/Cor 2-2004, item XCU/TC2/D6/26 is applied, making it clear that typeflag
1 (ustar Interchange Format) applies not only to files that are hard-linked, but also to files that are aliased via symbolic
links.
IEEE Std 1003.1-2001/Cor 2-2004, item XCU/TC2/D6/27 is applied, clarifying the cpio
c_nlink field.
Issue 7
Austin Group Interpretations 1003.1-2001 #011, #036, #086, and #109 are applied.
Austin Group Interpretation 1003.1-2001 #126 is applied, changing the description of the LC_MESSAGES
environment variable.
SD5-XCU-ERN-2 is applied, making -c and -n mutually-exclusive in the SYNOPSIS.
SD5-XCU-ERN-3 is applied, revising the default behavior of -H and -L.
SD5-XCU-ERN-5, SD5-XCU-ERN-6, SD5-XCU-ERN-7, SD5-XCU-ERN-60 are applied.
SD5-XCU-ERN-97 is applied, updating the SYNOPSIS.
The pax utility is no longer allowed to create separate identical symbolic links when extracting linked
symbolic links from an archive.
POSIX.1-2008, Technical Corrigendum 1, XCU/TC1-2008/0128 [260], XCU/TC1-2008/0129 [261], XCU/TC1-2008/0130 [261],
XCU/TC1-2008/0131 [313], and XCU/TC1-2008/0132 [233] are applied.
POSIX.1-2008, Technical Corrigendum 2, XCU/TC2-2008/0152 [886], XCU/TC2-2008/0153 [814], XCU/TC2-2008/0154 [886],
and XCU/TC2-2008/0155 [707] are applied.
Issue 8
Austin Group Defect 251 is applied, encouraging implementations to behave as follows:
Report an error if a utility is directed to display a pathname that contains any bytes that have the encoded value
of a  character when  is a terminator or separator in the output format being used.
Disallow the creation of filenames containing any bytes that have the encoded value of a
character.
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
Austin Group Defect 1133 is applied, clarifying the -X option and adding a paragraph to the APPLICATION
USAGE section.
Austin Group Defect 1270 is applied, removing the -n option from the copy mode SYNOPSIS line.
Austin Group Defect 1278 is applied, removing mention of the -n option in connection with write mode.
Austin Group Defect 1330 is applied, removing obsolescent interfaces.
Austin Group Defect 1331 is applied, changing "st_atime" to "st_atim" and "st_mtime" to "st_mtim".
Austin Group Defect 1379 is applied, changing the ENVIRONMENT VARIABLES section.
Austin Group Defect 1380 is applied, changing text using the term "link" in line with its updated definition and
changing the description of the -u option.
Austin Group Defect 1618 is applied, adding optional trailing 's' and 'S' characters to the
option-argument of the -s option.
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/fg.html =====
fg
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
fg — run jobs in the foreground
SYNOPSIS
[UP]  fg [job_id]
DESCRIPTION
If job control is enabled (see the description of set -m), the shell
is interactive, and the current shell execution environment (see 2.13 Shell
Execution Environment) is not a subshell environment, the fg utility shall move a background job in the current
execution environment into the foreground, as described in 2.11 Job
Control; it may also do so if the shell is non-interactive or the current shell execution environment is a subshell
environment.
Using fg to place a job into the foreground shall remove its process ID from the list of those "known in the current
shell execution environment"; see 2.9.3.1 Asynchronous AND-OR
Lists.
OPTIONS
None.
OPERANDS
The following operand shall be supported:
job_id
Specify the job to be run as a foreground job. If no job_id operand is given, the job_id for the job that was
most recently suspended, placed in the background, or run as a background job shall be used. The format of job_id is
described in XBD 3.182 Job ID.
STDIN
Not used.
INPUT FILES
None.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of fg:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
Default.
STDOUT
The fg utility shall write the command line of the job to standard output in the following format:
"%s\n",
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
None.
EXIT STATUS
If the fg utility succeeds, it does not return an exit status. Instead, the shell waits for the job that fg moved
into the foreground.
If fg does not move a job into the foreground, the following exit value shall be returned:
>0
An error occurred.
CONSEQUENCES OF ERRORS
If job control is disabled, the fg utility shall exit with an error and no job shall be placed in the foreground.
The following sections are informative.
APPLICATION USAGE
This utility is required to be intrinsic. See 1.7 Intrinsic Utilities
for details.
The fg utility does not work as expected when it is operating in its own utility execution environment because that
environment has no applicable jobs to manipulate. See the APPLICATION USAGE section for bg. For this reason, fg is generally implemented as a shell regular built-in.
EXAMPLES
None.
RATIONALE
The extensions to the shell specified in this volume of POSIX.1-2024 have mostly been based on features provided by the
KornShell. The job control features provided by bg, fg, and jobs are also based on the KornShell. The standard developers examined the characteristics of
the C shell versions of these utilities and found that differences exist. Despite widespread use of the C shell, the KornShell
versions were selected for this volume of POSIX.1-2024 to maintain a degree of uniformity with the rest of the KornShell features
selected (such as the very popular command line editing features).
FUTURE DIRECTIONS
None.
SEE ALSO
2.9.3.1 Asynchronous AND-OR Lists, 2.13 Shell Execution Environment, bg
, kill, jobs, wait
XBD 3.182 Job ID, 8.
Environment Variables
CHANGE HISTORY
First released in Issue 4.
Issue 6
This utility is marked as part of the User Portability Utilities option.
The APPLICATION USAGE section is added.
The JC marking is removed from the SYNOPSIS since job control is mandatory is this version.
Issue 8
Austin Group Defect 854 is applied, adding a note to the APPLICATION USAGE section that this utility is required to be
intrinsic.
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
Austin Group Defect 1254 is applied, updating the DESCRIPTION to account for the addition of 2.11 Job Control and changing the EXIT STATUS section.
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/gencat.html =====
gencat
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
gencat — generate a formatted message catalog
SYNOPSIS
gencat catfile msgfile...
DESCRIPTION
The gencat utility shall merge the message text source file msgfile into a formatted message catalog
catfile. The file catfile shall be created if it does not already exist. If catfile does exist, its messages
shall be included in the new catfile. If set and message numbers collide, the new message text defined in msgfile
shall replace the old message text currently contained in catfile.
OPTIONS
None.
OPERANDS
The following operands shall be supported:
catfile
A pathname of the formatted message catalog. If '-' is specified, standard output shall be used. The format of the
message catalog produced is unspecified.
msgfile
A pathname of a message text source file. If '-' is specified for an instance of msgfile, standard input shall
be used. The format of message text source files is defined in the EXTENDED DESCRIPTION section.
STDIN
The standard input shall not be used unless a msgfile operand is specified as '-'.
INPUT FILES
The input files shall be text files.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of gencat:
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments and input files).
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
ASYNCHRONOUS EVENTS
Default.
STDOUT
The standard output shall not be used unless the catfile operand is specified as '-'.
STDERR
The standard error shall be used only for diagnostic messages.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
The content of a message text file shall be in the format defined as follows. Note that the fields of a message text source line
are separated by a single  character. Any other  characters are considered to be part of the subsequent
field.
$set n comment
This line specifies the set identifier of the following messages until the next $set or end-of-file appears. The n
denotes the set identifier, which is defined as a number in the range [1, {NL_SETMAX}] (see the  header defined in the Base Definitions volume of POSIX.1-2024). The
application shall ensure that set identifiers are presented in ascending order within a single source file, but need not be
contiguous. Any string following the set identifier shall be treated as a comment. If no $set directive is specified in a
message text source file, all messages shall be located in an implementation-defined default message set NL_SETD (see the  header defined in the Base Definitions volume of POSIX.1-2024).
$delset n comment
This line deletes message set n from an existing message catalog. The n denotes the set number [1, {NL_SETMAX}]. Any
string following the set number shall be treated as a comment.
$ comment
A line beginning with '$' followed by a  shall be treated as a comment.
m message-text
The m denotes the message identifier, which is defined as a number in the range [1, {NL_MSGMAX}] (see the  header). The message-text shall be stored in the message catalog
with the set identifier specified by the last $set directive, and with message identifier m. If the
message-text is empty, and a  field separator is present, an empty string shall be stored in the message
catalog. If a message source line has a message number, but neither a field separator nor message-text, the existing message
with that number (if any) shall be deleted from the catalog. The application shall ensure that message identifiers are in ascending
order within a single set, but need not be contiguous. The application shall ensure that the length of message-text is in
the range [0, {NL_TEXTMAX}] (see the  header).
$quote c
This line specifies an optional quote character c, which can be used to surround message-text so that trailing
characters or null (empty) messages are visible in a message source line. By default, or if an empty $quote
directive is supplied, no quoting of message-text shall be recognized.
Empty lines in a message text source file shall be ignored. The effects of lines starting with any character other than those
defined above are implementation-defined.
Text strings can contain the special characters and escape sequences defined in the following table:
Description
Symbol
Sequence
NL(LF)
\n
Horizontal-tab
HT
\t
VT
\v
BS
\b
CR
\r
FF
\f
Backslash
\
\\
Bit pattern
ddd
\ddd
The escape sequence "\ddd" consists of  followed by one, two, or three octal digits,
which shall be taken to specify the value of the desired character. If the character following a  is not one of
those specified, the  shall be ignored.
A  followed by a  is also used to continue a string on the following line. Thus,
the following two lines describe a single message string:
1 This line continues \
to the next line
which shall be equivalent to:
1 This line continues to the next line
EXIT STATUS
The following exit values shall be returned:
0
Successful completion.
>0
An error occurred.
CONSEQUENCES OF ERRORS
Default.
The following sections are informative.
APPLICATION USAGE
Message catalogs produced by gencat are binary encoded, meaning that their portability cannot be guaranteed between
different types of machine. Thus, just as C programs need to be recompiled for each type of machine, so message catalogs must be
recreated via gencat.
EXAMPLES
None.
RATIONALE
None.
FUTURE DIRECTIONS
None.
SEE ALSO
iconv
XBD 8. Environment Variables, ,
CHANGE HISTORY
First released in Issue 3.
Issue 6
The normative text is reworded to avoid use of the term "must" for application requirements.
Issue 7
The gencat utility is moved from the XSI option to the Base.
Issue 8
Austin Group Defect 1122 is applied, changing the description of NLSPATH .
Austin Group Defect 1463 is applied, changing n to c in the definition of $quote.
Austin Group Defect 1516 is applied, adding XSI shading to text relating to NLSPATH .
End of informative text.
UNIX® is a registered Trademark of The Open Group.
POSIX™ is a Trademark of The IEEE.
Copyright © 2001-2024 The IEEE and The Open Group, All Rights Reserved
[ Main Index | XBD | XSH | XCU | XRAT
]
>>
===== susv5-html/utilities/sh.html =====
sh
>>
The Open Group Base Specifications Issue 8
IEEE Std 1003.1-2024
Copyright © 2001-2024 The IEEE and The Open Group
NAME
sh — shell, the standard command language interpreter
SYNOPSIS
[OB] sh [-abCefhimnuvx] [-o option]...
[+abCefhimnuvx]
[+o option]...
[command_file [argument...]]
[OB] sh -c [-abCefhimnuvx] [-o option]...
[+abCefhimnuvx]
[+o option]...
command_string [command_name
[argument...]]
[OB] sh -s [-abCefhimnuvx] [-o option]...
[+abCefhimnuvx]
[+o option]...
[argument...]
DESCRIPTION
The sh utility is a command language interpreter that shall execute commands read from a command line string, the
standard input, or a specified file. The application shall ensure that the commands to be executed are expressed in the language
described in 2. Shell Command Language.
Pathname expansion shall not fail due to the size of a file.
Shell input and output redirections have an implementation-defined offset maximum that is established in the open file
description.
OPTIONS
The sh utility shall conform to XBD 12.2 Utility Syntax
Guidelines, with an extension for support of a leading  ('+') as noted below.
The -a, -b, -C, -e, -f, -h, -m, -n, -o option, -u,
-v, and -x options are described as part of the set utility in
2.15 Special Built-In Utilities. The option letters derived from the
set special built-in shall also be accepted with a leading
('+') instead of a leading  (meaning the reverse case of the option as described in this volume of
POSIX.1-2024). If the -o or +o option is specified without an option-argument, the behavior is unspecified.
The following additional options shall be supported:
-c
Read commands from the command_string operand. Set the value of special parameter 0 (see 2.5.2 Special Parameters) from the value of the command_name operand
and the positional parameters ($1, $2, and so on) in sequence from the remaining argument operands. No commands shall be
read from the standard input.
-i
Specify that the shell is interactive; see below. An implementation may treat specifying the -i option as an
error if the real user ID of the calling process does not equal the effective user ID or if the real group ID does not equal the
effective group ID.
-s
Read commands from the standard input.
If there are no operands and the -c option is not specified, the -s option shall be assumed.
If the -i option is present, or if the shell reads commands from the standard input and the shell's standard input and
standard error are attached to a terminal, the shell is considered to be interactive.
OPERANDS
The following operands shall be supported:
-
A single  shall be treated as the first operand and then ignored. If both '-' and "--"
are given as arguments, or if other operands precede the single , the results are undefined.
argument
The positional parameters ($1, $2, and so on) shall be set to arguments, if any.
command_file
The pathname of a file containing commands. If the pathname contains one or more  characters, the implementation
attempts to read that file; the file need not be executable. If the pathname does not contain a  character:
The implementation shall attempt to read that file from the current working directory; the file need not be executable.
If the file is not in the current working directory, the implementation may perform a search for an executable file using the
value of PATH , as described in 2.9.1.4 Command Search and
Execution.
Special parameter 0 (see 2.5.2 Special Parameters) shall be set
to the value of command_file. If sh is called using a synopsis form that omits command_file, special parameter
0 shall be set to the value of the first argument passed to sh from its parent (for example, argv[0] for a C
program), which is normally a pathname used to execute the sh utility.
command_name
A string assigned to special parameter 0 when executing the commands in command_string. If command_name is not
specified, special parameter 0 shall be set to the value of the first argument passed to sh from its parent (for example,
argv[0] for a C program), which is normally a pathname used to execute the sh utility.
command_string
A string that shall be interpreted by the shell as one or more commands, as if the string were the argument to the system() function defined in the System Interfaces volume of POSIX.1-2024. If the
command_string operand is an empty string, sh shall exit with a zero exit status.
STDIN
The standard input shall be used only if one of the following is true:
The -s option is specified.
The -c option is not specified and no operands are specified.
The script executes one or more commands that require input from standard input (such as a read command that does not redirect its input).
See the INPUT FILES section.
When the shell is using standard input and it invokes a command that also uses standard input, the shell shall ensure that the
standard input file pointer points directly after the command it has read when the command begins execution. It shall not read
ahead in such a manner that any characters intended to be read by the invoked command are consumed by the shell (whether
interpreted by the shell or not) or that characters that are not read by the invoked command are not seen by the shell. When the
command expecting to read standard input is started asynchronously by an interactive shell, it is unspecified whether characters
are read by the command or interpreted by the shell.
If the standard input to sh is a FIFO or terminal device and is set to non-blocking reads, then sh shall enable
blocking reads on standard input. This shall remain in effect when the command completes.
INPUT FILES
The input file can be of any type, but the initial portion of the file intended to be parsed according to the shell grammar (see
2.10.2 Shell Grammar Rules) shall consist of characters and shall
not contain the NUL character. The shell shall not enforce any line length limits. If the input file consists solely of zero or
more blank lines and comments, sh shall exit with a zero exit status.
ENVIRONMENT VARIABLES
The following environment variables shall affect the execution of sh:
ENV
[UP]
This variable, when and only when an interactive shell is invoked, shall be subjected to parameter expansion (see 2.6.2 Parameter Expansion) by the shell, and the resulting value shall be
used as a pathname of a file containing shell commands to execute in the current environment. The file need not be executable. If
the expanded value of ENV is not an absolute pathname, the results are unspecified. ENV shall be ignored if the real
and effective user IDs or real and effective group IDs of the process are different. The file specified by ENV need not be
processed if the file can be written by any user other than the user identified by the real (and effective) user ID of the shell
process.
FCEDIT
[UP]
This variable, when expanded by the shell, shall determine the default value for the -e editor option's editor
option-argument. If FCEDIT is null or unset, ed shall be used as the editor.
HISTFILE
[UP]
Determine a pathname naming a command history file. If the HISTFILE variable is not set, the shell may attempt to access or
create a file .sh_history in the directory referred to by the HOME environment variable. If the shell cannot obtain
both read and write access to, or create, the history file, it shall use an unspecified mechanism that allows the history to
operate properly. (References to history "file" in this section shall be understood to mean this unspecified mechanism in such
cases.) An implementation may choose to access this variable only when initializing the history file; this initialization shall
occur when fc or sh first attempt to retrieve entries from, or add entries to, the
file, as the result of commands issued by the user, the file named by the ENV variable, or implementation-defined system
start-up files. Implementations may choose to disable the history list mechanism for users with appropriate privileges who do not
set HISTFILE ; the specific circumstances under which this occurs are implementation-defined. If more than one instance of
the shell is using the same history file, it is unspecified how updates to the history file from those shells interact. As entries
are deleted from the history file, they shall be deleted oldest first. It is unspecified when history file entries are physically
removed from the history file.
HISTSIZE
[UP]
Determine a decimal number representing the limit to the number of previous commands that are accessible. If this variable is
unset, an unspecified default greater than or equal to 128 shall be used. The maximum number of commands in the history list is
unspecified, but shall be at least 128. An implementation may choose to access this variable only when initializing the history
file, as described under HISTFILE . Therefore, it is unspecified whether changes made to HISTSIZE after the history
file has been initialized are effective.
HOME
Determine the pathname of the user's home directory. The contents of HOME are used in tilde expansion as described in
2.6.1 Tilde Expansion.
LANG
Provide a default value for the internationalization variables that are unset or null. (See XBD 8.2 Internationalization Variables for the precedence of internationalization
variables used to determine the values of locale categories.)
LC_ALL
If set to a non-empty string value, override the values of all the other internationalization variables.
LC_COLLATE
Determine the behavior of range expressions, equivalence classes, and multi-character collating elements within pattern
matching.
LC_CTYPE
Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as
opposed to multi-byte characters in arguments and input files), which characters are defined as letters (character class
alpha), and the behavior of character classes within pattern matching.
LC_MESSAGES
Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
MAIL
[UP]
Determine a pathname of the user's mailbox file for purposes of incoming mail notification. If this variable is set, the shell
shall inform the user if the file named by the variable is created or if its modification time has changed. Informing the user
shall be accomplished by writing a string of unspecified format to standard error prior to the writing of the next primary prompt
string. Such check shall be performed only after the completion of the interval defined by the MAILCHECK variable after the
last such check. The user shall be informed only if MAIL is set and MAILPATH is not set.
MAILCHECK
[UP]
Establish a decimal integer value that specifies how often (in seconds) the shell shall check for the arrival of mail in the files
specified by the MAILPATH or MAIL variables. The default value shall be 600 seconds. If set to zero, the shell shall
check before issuing each primary prompt.
MAILPATH
[UP]
Provide a list of pathnames and optional messages separated by  characters. If this variable is set, the shell shall
inform the user if any of the files named by the variable are created or if any of their modification times change. (See the
preceding entry for MAIL for descriptions of mail arrival and user informing.) Each pathname can be followed by '%'
and a string that shall be subjected to parameter expansion and written to standard error when the modification time changes. If a
'%' character in the pathname is preceded by a , it shall be treated as a literal '%' in the
pathname. The default message is unspecified.
The MAILPATH environment variable takes precedence over the MAIL variable.
NLSPATH
[XSI]
Determine the location of messages objects and message catalogs.
PATH
Establish a string formatted as described in XBD 8. Environment
Variables, used to effect command interpretation; see 2.9.1.4
Command Search and Execution.
PWD
This variable shall represent an absolute pathname of the current working directory. Assignments to this variable may be
ignored.
ASYNCHRONOUS EVENTS
The sh utility shall take the standard action for all signals (see 1.4
Utility Description Defaults) with the following exceptions.
If the shell is interactive, SIGINT signals received during command line editing shall be handled as described in the EXTENDED
DESCRIPTION, and SIGINT signals received at other times shall be caught but no action performed.
If the shell is interactive:
SIGQUIT and SIGTERM signals shall be ignored.
If the -m option is in effect, SIGTTIN, SIGTTOU, and SIGTSTP signals shall be ignored.
If the -m option is not in effect, it is unspecified whether SIGTTIN, SIGTTOU, and SIGTSTP signals are ignored, set to
the default action, or caught. If they are caught, the shell shall, in the signal-catching function, set the signal to the default
action and raise the signal (after taking any appropriate steps, such as restoring terminal settings).
The standard actions, and the actions described above for interactive shells, can be overridden by use of the trap special built-in utility (see trap and 2.12 Signals and
Error Handling).
STDOUT
See the STDERR section.
STDERR
Except as otherwise stated (by the descriptions of any invoked utilities or in interactive mode), standard error shall be used
only for diagnostic messages.
OUTPUT FILES
None.
EXTENDED DESCRIPTION
See 2. Shell Command Language. [UP]   The
functionality described in the rest of the EXTENDED DESCRIPTION section shall be provided on implementations that support the User
Portability Utilities option (and the rest of this section is not further shaded for this option).
Command History List
When the sh utility is being used interactively, it shall maintain a list of commands previously entered from the
terminal in the file named by the HISTFILE environment variable. The type, size, and internal format of this file are
unspecified. Multiple sh processes can share access to the file for a user, if file access permissions allow this; see the
description of the HISTFILE environment variable.
Command Line Editing
When sh is being used interactively from a terminal, the current command and the command history (see fc) can be edited using vi-mode command line editing.
This mode uses commands, described below, similar to a subset of those described in the vi utility. Implementations may offer other command line editing modes corresponding to other
editing utilities.
The command set -o vi
shall enable vi-mode editing and place sh into vi insert mode (see Command Line Editing (vi-mode)). This
command also shall disable any other editing mode that the implementation may provide. The command set +o vi disables vi-mode editing.
Certain block-mode terminals may be unable to support shell command line editing. If a terminal is unable to provide either edit
mode, it need not be possible to set -o vi when using the shell on this terminal.
In the following sections, the characters erase, interrupt, kill, and end-of-file are those set by
the stty utility.
Command Line Editing (vi-mode)
In vi editing mode, there shall be a distinguished line, the edit line. All the
editing operations which modify a line affect the edit line. The edit line is always the newest line in the command history
buffer.
With vi-mode enabled, sh can be switched between insert mode and command
mode.
When in insert mode, an entered character shall be inserted into the command line, except as noted in vi Line Editing Insert Mode. Upon entering sh and after termination of the previous command,
sh shall be in insert mode.
Typing an escape character shall switch sh into command mode (see vi Line Editing Command
Mode). In command mode, an entered character shall either invoke a defined operation, be used as part of a multi-character
operation, or be treated as an error. A character that is not recognized as part of an editing command shall terminate any specific
editing command and shall alert the terminal. If sh receives a SIGINT signal in command mode (whether generated by typing
the interrupt character or by other means), it shall terminate command line editing on the current command line, reissue the
prompt on the next line of the terminal, and reset the command history (see fc) so that
the most recently executed command is the previous command (that is, the command that was being edited when it was interrupted is
not re-entered into the history).
In the following sections, the phrase "move the cursor to the beginning of the word" shall mean "move the cursor to the first
character of the current word" and the phrase "move the cursor to the end of the word" shall mean "move the cursor to the last
character of the current word". The phrase "beginning of the command line" indicates the point between the end of the prompt
string issued by the shell (or the beginning of the terminal line, if there is no prompt string) and the first character of the
command text.
vi Line Editing Insert Mode
While in insert mode, any character typed shall be inserted in the current command line, unless it is from the following
set.
Execute the current command line. If the current command line is not empty, this line shall be entered into the command history
(see fc).
erase
Delete the character previous to the current cursor position and move the current cursor position back one character. In insert
mode, characters shall be erased from both the screen and the buffer when backspacing.
interrupt
If sh receives a SIGINT signal in insert mode (whether generated by typing the interrupt character or by other
means), it shall terminate command line editing with the same effects as described for interrupting command mode; see Command Line Editing (vi-mode).
kill
Clear all the characters from the input line.
-V
Insert the next character input, even if the character is otherwise a special insert mode character.
-W
Delete the characters from the one preceding the cursor to the preceding word boundary. The word boundary in this case is the
closer to the cursor of either the beginning of the line or a character that is in neither the blank nor punct
character classification of the current locale.
end-of-file
Interpreted as the end of input in sh. This interpretation shall occur only at the beginning of an input line. If
end-of-file is entered other than at the beginning of the line, the results are unspecified.
Place sh into command mode.
vi Line Editing Command Mode
In command mode for the command line editing feature, decimal digits not beginning with 0 that precede a command letter shall be
remembered. Some commands use these decimal digits as a count number that affects the operation.
The term motion command represents one of the commands:
0  b  F  l  W  ^  $  ;  E  f  T  w  |  ,  B  e  h  t
If the current line is not the edit line, any command that modifies the current line shall cause the content of the current line
to replace the content of the edit line, and the current line shall become the edit line. This replacement cannot be undone (see
the u and U commands below). The modification requested shall then be performed to the edit line. When the current
line is the edit line, the modification shall be done directly to the edit line.
Any command that is preceded by count shall take a count (the numeric value of any preceding decimal digits). Unless
otherwise noted, this count shall cause the specified operation to repeat by the number of times specified by the count. Also
unless otherwise noted, a count that is out of range is considered an error condition and shall alert the terminal, but
neither the cursor position, nor the command line, shall change.
The terms word and bigword are used as defined in the vi description.
The term save buffer corresponds to the term unnamed buffer in vi.
The following commands shall be recognized in command mode:
Execute the current command line. If the current command line is not empty, this line shall be entered into the command history
(see fc).
-L
Redraw the current command line. Position the cursor at the same location on the redrawn line.
#
Insert the character '#' at the beginning of the current command line and treat the resulting edit line as a comment.
This line shall be entered into the command history; see fc.
=
Display the possible shell word expansions (see 2.6 Word Expansions
) of the bigword at the current command line position.
Note:
This does not modify the content of the current line, and therefore does not cause the current line to become the edit
line.
These expansions shall be displayed on subsequent terminal lines. If the bigword contains none of the characters '?',
'*', or '[', an  ('*') shall be implicitly assumed at the end. If any directories are
matched, these expansions shall have a '/' character appended. After the expansion, the line shall be redrawn, the cursor
repositioned at the current cursor position, and sh shall be placed in command mode.
\
Perform pathname expansion (see 2.6.6 Pathname Expansion) on the
current bigword, up to the largest set of characters that can be matched uniquely. If the bigword contains none of the characters
'?', '*', or '[', an  ('*') shall be implicitly assumed at the end. This
maximal expansion then shall replace the original bigword in the command line, and the cursor shall be placed after this expansion.
If the resulting bigword completely and uniquely matches a directory, a '/' character shall be inserted directly after the
bigword. If some other file is completely matched, a single  shall be inserted after the bigword. After this
operation, sh shall be placed in insert mode.
*
Perform pathname expansion on the current bigword and insert all expansions into the command to replace the current bigword,
with each expansion separated by a single . If at the end of the line, the current cursor position shall be moved to
the first column position following the expansions and sh shall be placed in insert mode. Otherwise, the current cursor
position shall be the last column position of the first character after the expansions and sh shall be placed in insert
mode. If the current bigword contains none of the characters '?', '*', or '[', before the operation, an
('*') shall be implicitly assumed at the end.
@letter
Insert the value of the alias named _letter. The symbol letter represents a single alphabetic character from the
portable character set; implementations may support additional characters as an extension. If the alias _letter contains
other editing commands, these commands shall be performed as part of the insertion. If no alias _letter is enabled, this
command shall have no effect.
[count]~
Convert, if the current character is a lowercase letter, to the equivalent uppercase letter and vice versa, as
prescribed by the current locale. The current cursor position then shall be advanced by one character. If the cursor was positioned
on the last character of the line, the case conversion shall occur, but the cursor shall not advance. If the '~' command
is preceded by a count, that number of characters shall be converted, and the cursor shall be advanced to the character
position after the last character converted. If the count is larger than the number of characters after the cursor, this
shall not be considered an error; the cursor shall advance to the last character on the line.
[count].
Repeat the most recent non-motion command, even if it was executed on an earlier command line. If the previous command was
preceded by a count, and no count is given on the '.' command, the count from the previous command shall be
included as part of the repeated command. If the '.' command is preceded by a count, this shall override any
count argument to the previous command. The count specified in the '.' command shall become the count for
subsequent '.' commands issued without a count.
[number]v
Invoke the vi editor to edit the current command line in a temporary file. When the
editor exits, the commands in the temporary file shall be executed and placed in the command history. If a number is
included, it specifies the command number in the command history to be edited, rather than the current command line.
[count]l   (ell)
[count]
Move the current cursor position to the next character position. If the cursor was positioned on the last character of the line,
the terminal shall be alerted and the cursor shall not be advanced. If the count is larger than the number of characters
after the cursor, this shall not be considered an error; the cursor shall advance to the last character on the line.
[count]h
Move the current cursor position to the countth (default 1) previous character position. If the cursor was positioned on
the first character of the line, the terminal shall be alerted and the cursor shall not be moved. If the count is larger than the
number of characters before the cursor, this shall not be considered an error; the cursor shall move to the first character on the
line.
[count]w
Move to the start of the next word. If the cursor was positioned on the last character of the line, the terminal shall be
alerted and the cursor shall not be advanced. If the count is larger than the number of words after the cursor, this shall
not be considered an error; the cursor shall advance to the last character on the line.
[count]W
Move to the start of the next bigword. If the cursor was positioned on the last character of the line, the terminal shall be
alerted and the cursor shall not be advanced. If the count is larger than the number of bigwords after the cursor, this
shall not be considered an error; the cursor shall advance to the last character on the line.
[count]e
Move to the end of the current word. If at the end of a word, move to the end of the next word. If the cursor was positioned on
the last character of the line, the terminal shall be alerted and the cursor shall not be advanced. If the count is larger
than the number of words after the cursor, this shall not be considered an error; the cursor shall advance to the last character on
the line.
[count]E
Move to the end of the current bigword. If at the end of a bigword, move to the end of the next bigword. If the cursor was
positioned on the last character of the line, the terminal shall be alerted and the cursor shall not be advanced. If the
count is larger than the number of bigwords after the cursor, this shall not be considered an error; the cursor shall
advance to the last character on the line.
[count]b
Move to the beginning of the current word. If at the beginning of a word, move to the beginning of the previous word. If the
cursor was positioned on the first character of the line, the terminal shall be alerted and the cursor shall not be moved. If the
count is larger than the number of words preceding the cursor, this shall not be considered an error; the cursor shall
return to the first character on the line.
[count]B
Move to the beginning of the current bigword. If at the beginning of a bigword, move to the beginning of the previous bigword.
If the cursor was positioned on the first character of the line, the terminal shall be alerted and the cursor shall not be moved.
If the count is larger than the number of bigwords preceding the cursor, this shall not be considered an error; the cursor
shall return to the first character on the line.
^
Move the current cursor position to the first character on the input line that is not a .
$
Move to the last character position on the current command line.
0
(Zero.) Move to the first character position on the current command line.
[count]|
Move to the countth character position on the current command line. If no number is specified, move to the first
position. The first character position shall be numbered 1. If the count is larger than the number of characters on the line, this
shall not be considered an error; the cursor shall be placed on the last character on the line.
[count]fc
Move to the first occurrence of the character 'c' that occurs after the current cursor position. If the cursor was
positioned on the last character of the line, the terminal shall be alerted and the cursor shall not be advanced. If the character
'c' does not occur in the line after the current cursor position, the terminal shall be alerted and the cursor shall not
be moved.
[count]Fc
Move to the first occurrence of the character 'c' that occurs before the current cursor position. If the cursor was
positioned on the first character of the line, the terminal shall be alerted and the cursor shall not be moved. If the character
'c' does not occur in the line before the current cursor position, the terminal shall be alerted and the cursor shall not
be moved.
[count]tc
Move to the character before the first occurrence of the character 'c' that occurs after the current cursor position.
If the cursor was positioned on the last character of the line, the terminal shall be alerted and the cursor shall not be advanced.
If the character 'c' does not occur in the line after the current cursor position, the terminal shall be alerted and the
cursor shall not be moved.
[count]Tc
Move to the character after the first occurrence of the character 'c' that occurs before the current cursor position.
If the cursor was positioned on the first character of the line, the terminal shall be alerted and the cursor shall not be moved.
If the character 'c' does not occur in the line before the current cursor position, the terminal shall be alerted and the
cursor shall not be moved.
[count];
Repeat the most recent f, F, t, or T command. Any number argument on that previous command shall be
ignored. Errors are those described for the repeated command.
[count],
Repeat the most recent f, F, t, or T command. Any number argument on that previous command shall be
ignored. However, reverse the direction of that command.
a
Enter insert mode after the current cursor position. Characters that are entered shall be inserted before the next
character.
A
Enter insert mode after the end of the current command line.
i
Enter insert mode at the current cursor position. Characters that are entered shall be inserted before the current
character.
I
Enter insert mode at the beginning of the current command line.
R
Enter insert mode, replacing characters from the command line beginning at the current cursor position.
[count]cmotion
Delete the characters between the current cursor position and the cursor position that would result from the specified motion
command. Then enter insert mode before the first character following any deleted characters. If count is specified, it shall
be applied to the motion command. A count shall be ignored for the following motion commands:
0    ^    $    c
If the motion command is the character 'c', the current command line shall be cleared and insert mode shall be entered.
If the motion command would move the current cursor position toward the beginning of the command line, the character under the
current cursor position shall not be deleted. If the motion command would move the current cursor position toward the end of the
command line, the character under the current cursor position shall be deleted. If the count is larger than the number of
characters between the current cursor position and the end of the command line toward which the motion command would move the
cursor, this shall not be considered an error; all of the remaining characters in the aforementioned range shall be deleted and
insert mode shall be entered. If the motion command is invalid, the terminal shall be alerted, the cursor shall not be moved, and
no text shall be deleted.
C
Delete from the current character to the end of the line and enter insert mode at the new end-of-line.
S
Clear the entire edit line and enter insert mode.
[count]rc
Replace the current character with the character 'c'. With a number count, replace the current and the
following count-1 characters. After this command, the current cursor position shall be on the last character that was
changed. If the count is larger than the number of characters after the cursor, this shall not be considered an error; all
of the remaining characters shall be changed.
[count]_
Append a  after the current character position and then append the last bigword in the previous input line after
the . Then enter insert mode after the last character just appended. With a number count, append the
countth bigword in the previous line.
[count]x
Delete the character at the current cursor position and place the deleted characters in the save buffer. If the cursor was
positioned on the last character of the line, the character shall be deleted and the cursor position shall be moved to the previous
character (the new last character). If the count is larger than the number of characters after the cursor, this shall not be
considered an error; all the characters from the cursor to the end of the line shall be deleted.
[count]X
Delete the character before the current cursor position and place the deleted characters in the save buffer. The character
under the current cursor position shall not change. If the cursor was positioned on the first character of the line, the terminal
shall be alerted, and the X command shall have no effect. If the line contained a single character, the X command
shall have no effect. If the line contained no characters, the terminal shall be alerted and the cursor shall not be moved. If the
count is larger than the number of characters before the cursor, this shall not be considered an error; all the characters
from before the cursor to the beginning of the line shall be deleted.
[count]dmotion
Delete the characters between the current cursor position and the character position that would result from the motion command. A
number count repeats the motion command count times. If the motion command would move toward the beginning of the
command line, the character under the current cursor position shall not be deleted. If the motion command is d, the entire
current command line shall be cleared. If the count is larger than the number of characters between the current cursor
position and the end of the command line toward which the motion command would move the cursor, this shall not be considered an
error; all of the remaining characters in the aforementioned range shall be deleted. The deleted characters shall be placed in the
save buffer.
D
Delete all characters from the current cursor position to the end of the line. The deleted characters shall be placed in the
save buffer.
[count]ymotion
Yank (that is, copy) the characters from the current cursor position to the position resulting from the motion command into the
save buffer. A number count shall be applied to the motion command. If the motion command would move toward the beginning of
the command line, the character under the current cursor position shall not be included in the set of yanked characters. If the
motion command is y, the entire current command line shall be yanked into the save buffer. The current cursor position shall
be unchanged. If the count is larger than the number of characters between the current cursor position and the end of the
command line toward which the motion command would move the cursor, this shall not be considered an error; all of the remaining
characters in the aforementioned range shall be yanked.
Y
Yank the characters from the current cursor position to the end of the line into the save buffer. The current character
position shall be unchanged.
[count]p
Put a copy of the current contents of the save buffer after the current cursor position. The current cursor position shall be
advanced to the last character put from the save buffer. A count shall indicate how many copies of the save buffer shall be
put.
[count]P
Put a copy of the current contents of the save buffer before the current cursor position. The current cursor position shall be
moved to the last character put from the save buffer. A count shall indicate how many copies of the save buffer shall be
put.
u
Undo the last command that changed the edit line. This operation shall not undo the copy of any command line to the edit
line.
U
Undo all changes made to the edit line. This operation shall not undo the copy of any command line to the edit line.
[count]k
[count]-
Set the current command line to be the countth previous command line in the shell command history. If count is
not specified, it shall default to 1. The cursor shall be positioned on the first character of the new command. If a k or
- command would retreat past the maximum number of commands in effect for this shell (affected by the HISTSIZE
environment variable), the terminal shall be alerted, and the command shall have no effect.
[count]j
[count]+
Set the current command line to be the countth next command line in the shell command history. If count is not
specified, it shall default to 1. The cursor shall be positioned on the first character of the new command. If a j or
+ command advances past the edit line, the current command line shall be restored to the edit line and the terminal shall be
alerted.
[number]G
Set the current command line to be the oldest command line stored in the shell command history. With a number number,
set the current command line to be the command line number in the history. If command line number does not exist, the
terminal shall be alerted and the command line shall not be changed.
/pattern
Move backwards through the command history, searching for the specified pattern, beginning with the previous command line. Patterns
use the pattern matching notation described in 2.14 Pattern Matching
Notation, except that the '^' character shall have special meaning when it appears as the first character of
pattern. In this case, the '^' is discarded and the characters after the '^' shall be matched only at the
beginning of a line. Commands in the command history shall be treated as strings, not as filenames. If the pattern is not found,
the current command line shall be unchanged and the terminal shall be alerted. If it is found in a previous line, the current
command line shall be set to that line and the cursor shall be set to the first character of the new command line.
If pattern is empty, the last non-empty pattern provided to / or ? shall be used. If there is no previous
non-empty pattern, the terminal shall be alerted and the current command line shall remain unchanged.
?pattern
Move forwards through the command history, searching for the specified pattern, beginning with the next command line. Patterns use
the pattern matching notation described in 2.14 Pattern Matching
Notation, except that the '^' character shall have special meaning when it appears as the first character of
pattern. In this case, the '^' is discarded and the characters after the '^' shall be matched only at the
beginning of a line. Commands in the command history shall be treated as strings, not as filenames. If the pattern is not found,
the current command line shall be unchanged and the terminal shall be alerted. If it is found in a following line, the current
command line shall be set to that line and the cursor shall be set to the fist character of the new command line.
If pattern is empty, the last non-empty pattern provided to / or ? shall be used. If there is no previous
non-empty pattern, the terminal shall be alerted and the current command line shall remain unchanged.
n
Repeat the most recent / or ? command. If there is no previous / or ?, the terminal shall be
alerted and the current command line shall remain unchanged.
N
Repeat the most recent / or ? command, reversing the direction of the search. If there is no previous / or
?, the terminal shall be alerted and the current command line shall remain unchanged.
EXIT STATUS
The following exit values shall be returned:
0
The script to be executed consisted solely of zero or more blank lines or comments, or both.
1-125
A non-interactive shell detected an error other than command_file not found, command_file not executable, or an
unrecoverable read error while reading commands (except from the file operand of the dot special built-in); including but not limited to syntax, redirection, or variable assignment
errors.
126
A specified command_file could not be executed due to an [ENOEXEC] error (see 2.9.1.4 Command Search and Execution, item 2).
127
A specified command_file could not be found by a non-interactive shell.
128
An unrecoverable read error was detected while reading commands, except from the file operand of the dot special built-in.
Otherwise, the shell shall terminate in the same manner as for an exit
command with no operands, unless the last command the shell invoked was executed without forking, in which case the wait status
seen by the parent process of the shell shall be the wait status of the last command the shell invoked. See the exit utility in 2.15 Special
Built-In Utilities.
CONSEQUENCES OF ERRORS
See 2.8.1 Consequences of Shell Errors.
The following sections are informative.
APPLICATION USAGE
Standard input and standard error are the files that determine whether a shell is interactive when -i is not specified.
For example:
sh > file
and:
sh 2> file
create interactive and non-interactive shells, respectively. Although both accept terminal input, the results of error
conditions are different, as described in 2.8.1 Consequences of Shell
Errors; in the second example a redirection error encountered by a special built-in utility aborts the shell.
sh -n can be used to check for many syntax errors without waiting for complete_commands to be executed, but
may be fooled into declaring false positives or missing actual errors that would occur when the shell actually evaluates eval commands present in the script, or if there are alias (or unalias) commands in the script that
would alter the syntax of commands that use the affected aliases.
A conforming application must protect its first operand, if it starts with a , by preceding it with the
"--" argument that denotes the end of the options.
Applications should note that the standard PATH to the shell cannot be assumed to be either /bin/sh or
/usr/bin/sh, and should be determined by interrogation of the PATH returned by getconf PATH , ensuring that the returned pathname is an absolute pathname and not a
shell built-in.
For example, to determine the location of the standard sh utility:
command -v sh
On some implementations this might return:
/usr/xpg4/bin/sh
Furthermore, on systems that support executable scripts (the "#!" construct), it is recommended that applications using
executable scripts install them using getconf PATH to determine the shell
pathname and update the "#!" script appropriately as it is being installed (for example, with sed). For example:
#
# Installation time script to install correct POSIX shell pathname
#
# Get list of paths to check
#
Sifs=$IFS
Sifs_set=${IFS+y}
IFS=:
set -- $(getconf PATH)
if [ "$Sifs_set" = y ]
then
IFS=$Sifs
else
unset IFS
fi
#
# Check each path for 'sh'
#
for i
do
if [ -x "${i}"/sh ]
then
Pshell=${i}/sh
fi
done
#
# This is the list of scripts to update. They should be of the
# form '${name}.source' and will be transformed to '${name}'.
# Each script should begin:
#
# #!INSTALLSHELLPATH
#
scripts="a b c"
#
# Transform each script
#
for i in ${scripts}
do
sed -e "s|INSTALLSHELLPATH|${Pshell}|"  ${i}
done
EXAMPLES
Execute a shell command from a string:
sh -c "cat myfile"
Execute a shell script from a file in the current directory:
sh my_shell_cmds
RATIONALE
The sh utility and the set special built-in utility share a common
set of options.
The name IFS was originally an abbreviation of "Input Field Separators"; however, this name is misleading as the
IFS characters are actually used as field terminators. One justification for ignoring the contents of IFS upon entry
to the script, beyond security considerations, is to assist possible future shell compilers. Allowing IFS to be imported
from the environment prevents many optimizations that might otherwise be performed via dataflow analysis of the script itself.
The text in the STDIN section about non-blocking reads concerns an instance of sh that has been invoked, probably by a
C-language program, with standard input that has been opened using the O_NONBLOCK flag; see open() in the System Interfaces volume of POSIX.1-2024. If the shell did not reset this flag,
it would immediately terminate because no input data would be available yet and that would be considered the same as
end-of-file.
The options associated with a restricted shell (command name rsh and the -r option) were excluded because
the standard developers considered that the implied level of security could not be achieved and they did not want to raise false
expectations.
On systems that support set-user-ID scripts, a historical trapdoor has been to link a script to the name -i. When it is
called by a sequence such as:
sh -
or by:
#! usr/bin/sh -
the historical systems have assumed that no option letters follow. Thus, this volume of POSIX.1-2024 allows the single
to mark the end of the options, in addition to the use of the regular "--" argument, because it was
considered that the older practice was so pervasive. An alternative approach is taken by the KornShell, where real and effective
user/group IDs must match for an interactive shell; this behavior is specifically allowed by this volume of POSIX.1-2024.
Note:
There are other problems with set-user-ID scripts that the two approaches described here do not resolve.
The initialization process for the history file can be dependent on the system start-up files, in that they may contain commands
that effectively preempt the user's settings of HISTFILE and HISTSIZE . In some historical shells, the history file
is initialized just after the ENV file has been processed. Therefore, it is implementation-defined whether changes made to
HISTFILE after the history file has been initialized are effective.
The default messages for the various MAIL -related messages are unspecified because they vary across implementations.
Typical messages are:
"you have mail\n"
or:
"you have new mail\n"
It is important that the descriptions of command line editing refer to the same shell as that in POSIX.1-2024 so that
interactive users can also be application programmers without having to deal with programmatic differences in their two
environments. It is also essential that the utility name sh be specified because this explicit utility name is too firmly
rooted in historical practice of application programs for it to change.
Consideration was given to mandating a diagnostic message when attempting to set vi-mode on terminals that do not support command line editing. However, it is not historical
practice for the shell to be cognizant of all terminal types and thus be able to detect inappropriate terminals in all cases.
Implementations are encouraged to supply diagnostics in this case whenever possible, rather than leaving the user in a state where
editing commands work incorrectly.
In early proposals, the KornShell-derived emacs mode of command line editing was included, even though the emacs
editor itself was not. The community of emacs proponents was adamant that the full emacs editor not be standardized
because they were concerned that an attempt to standardize this very powerful environment would encourage vendors to ship strictly
conforming versions lacking the extensibility required by the community. The author of the original emacs program also
expressed his desire to omit the program. Furthermore, there were a number of historical systems that did not include emacs,
or included it without supporting it, but there were very few that did not include and support vi. The shell emacs command line editing mode was finally omitted because it became
apparent that the KornShell version and the editor being distributed with the GNU system had diverged in some respects. The author
of emacs requested that the POSIX emacs mode either be deleted or have a significant number of unspecified
conditions. Although the KornShell author agreed to consider changes to bring the shell into alignment, the standard developers
decided to defer specification at that time. At the time, it was assumed that convergence on an acceptable definition would occur
for a subsequent draft, but that has not happened, and there appears to be no impetus to do so. In any case, implementations are
free to offer additional command line editing modes based on the exact models of editors their users are most comfortable with.
Early proposals had the following list entry in vi Line Editing Insert Mode:
\